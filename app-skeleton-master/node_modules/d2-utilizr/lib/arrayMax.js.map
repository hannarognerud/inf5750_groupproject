{"version":3,"sources":["../src/arrayMax.js"],"names":[],"mappings":";;;;;kBAewB,QAAQ;;;;;;;;;;;;;;;;AAAjB,SAAS,QAAQ,CAAC,KAAK,EAAE,YAAY,EAAE;AAClD,QAAI,CAAC,GAAG,CAAC;QACL,EAAE,GAAG,KAAK,CAAC,MAAM;QACjB,IAAI;QACJ,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;;AAEnB,WAAO,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;AAChB,YAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;;AAEhB,YAAI,YAAY,EAAE;AACd,gBAAI,YAAY,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;AAChC,mBAAG,GAAG,IAAI,CAAC;aACd;SACJ,MACI;AACD,gBAAI,IAAI,GAAG,GAAG,EAAE;AACZ,mBAAG,GAAG,IAAI,CAAC;aACd;SACJ;KACJ;;AAED,WAAO,GAAG,CAAC;CACd","file":"arrayMax.js","sourcesContent":["/**\n * Return the highest value (number) in the given array\n *\n * @param {Array} array The array to be scanned\n * @returns {Array} The highest value\n *\n * @throws {TypeError} When the passed array is not actually an array.\n *\n * @example\n * const sourceArray = [1,3,2];\n * arrayMax(sourceArray); // Returns: 3\n *\n * @example\n * arrayClean() // throws: Cannot read property 'length' of undefined\n */\nexport default function arrayMax(array, comparisonFn) {\n    var i = 0,\n        ln = array.length,\n        item,\n        max = array[0];        \n\n    for (; i < ln; i++) {\n        item = array[i];\n\n        if (comparisonFn) {\n            if (comparisonFn(max, item) === -1) {\n                max = item;\n            }\n        }\n        else {\n            if (item > max) {\n                max = item;\n            }\n        }\n    }\n\n    return max;\n}\n"]}