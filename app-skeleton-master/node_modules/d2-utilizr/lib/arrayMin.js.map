{"version":3,"sources":["../src/arrayMin.js"],"names":[],"mappings":";;;;;kBAewB,QAAQ;;;;;;;;;;;;;;;;AAAjB,SAAS,QAAQ,CAAC,KAAK,EAAE,YAAY,EAAE;AAClD,QAAI,CAAC,GAAG,CAAC;QACL,EAAE,GAAG,KAAK,CAAC,MAAM;QACjB,IAAI;QACJ,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;;AAEnB,WAAO,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;AAChB,YAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;;AAEhB,YAAI,YAAY,EAAE;AACd,gBAAI,YAAY,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE;AAC/B,mBAAG,GAAG,IAAI,CAAC;aACd;SACJ,MACI;AACD,gBAAI,IAAI,GAAG,GAAG,EAAE;AACZ,mBAAG,GAAG,IAAI,CAAC;aACd;SACJ;KACJ;;AAED,WAAO,GAAG,CAAC;CACd","file":"arrayMin.js","sourcesContent":["/**\n * Return the lowest value (number) in the given array\n *\n * @param {Array} array The array to be scanned\n * @returns {Array} The lowest value\n *\n * @throws {TypeError} When the passed array is not actually an array.\n *\n * @example\n * const sourceArray = [3,1,2];\n * arrayMax(sourceArray); // Returns: 1\n *\n * @example\n * arrayClean() // throws: Cannot read property 'length' of undefined\n */\nexport default function arrayMin(array, comparisonFn) {\n    var i = 0,\n        ln = array.length,\n        item,\n        min = array[0];\n\n    for (; i < ln; i++) {\n        item = array[i];\n\n        if (comparisonFn) {\n            if (comparisonFn(min, item) === 1) {\n                min = item;\n            }\n        }\n        else {\n            if (item < min) {\n                min = item;\n            }\n        }\n    }\n\n    return min;\n}\n"]}