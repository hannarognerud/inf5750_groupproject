{"version":3,"sources":["../src/isIterable.js"],"names":[],"mappings":";;;;;kBAsBwB,UAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAnB,SAAS,UAAU,CAAC,gBAAgB,EAAE;AACjD,SAAO,OAAO,CAAC,CAAC,gBAAgB,IAAI,sBAAS,gBAAgB,CAAC,CAAA,IAAK,gBAAgB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;CACzG","file":"isIterable.js","sourcesContent":["import isString from 'lodash.isstring';\n\n/**\n *\n * @param checkForIterator The value that should be checked\n * @returns {boolean} Returns `true` when the value is iterable, otherwise false.\n *\n * @example\n * isIterable('My value'); // Returns:  true\n *\n * @example\n * isIterable([1, 2, 3]); // Returns: true\n *\n * @example\n * isIterable({}); // Returns: false\n *\n * @example\n * let iterableObject = {\n *     [Symbol.iterator]: () => {}\n * };\n * isIterable(iterableObject); // Returns: true\n */\nexport default function isIterable(checkForIterator) {\n    return Boolean((checkForIterator || isString(checkForIterator)) && checkForIterator[Symbol.iterator]);\n}\n"]}