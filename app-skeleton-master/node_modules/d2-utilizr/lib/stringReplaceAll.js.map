{"version":3,"sources":["../src/stringReplaceAll.js"],"names":[],"mappings":";;;;;kBASwB,gBAAgB;;;;;;;;;;AAAzB,SAAS,gBAAgB,CAAC,GAAG,EAAE,UAAU,EAAE,YAAY,EAAE,MAAM,EAAE;AAC5E,SAAO,GAAG,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,iDAAiD,EAAE,MAAM,CAAC,EAAG,MAAM,GAAG,IAAI,GAAG,GAAG,CAAE,EAAE,AAAC,OAAO,YAAY,AAAC,IAAI,QAAQ,GAAI,YAAY,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,GAAG,YAAY,CAAC,CAAC;CACjO","file":"stringReplaceAll.js","sourcesContent":["/**\n * Replace all occurrences of the `matchValue` within the `str` parameter.\n *\n * @param {string} str The string to operate on\n * @param {string} matchValue The value to match on\n * @param {string|function} replaceValue The value to replace the matches with\n * @param {boolean} ignore Case sensitivity ignore flag. Pass `true` to ignore case. (Defaults to `false`)\n * @returns {XML|void|string|*} The resulting string.\n */\nexport default function stringReplaceAll(str, matchValue, replaceValue, ignore) {\n    return str.replace(new RegExp(matchValue.replace(/([\\/\\,\\!\\\\\\^\\$\\{\\}\\[\\]\\(\\)\\.\\*\\+\\?\\|\\<\\>\\-\\&])/g, \"\\\\$&\"), (ignore ? \"gi\" : \"g\")), (typeof(replaceValue) == \"string\") ? replaceValue.replace(/\\$/g, \"$$$$\") : replaceValue);\n}\n"]}