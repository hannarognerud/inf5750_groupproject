{"version":3,"sources":["../src/arraySort.js"],"names":[],"mappings":";;;;;kBAKwB,SAAS;;;;;;;;;;;;;;;;;;;;AAAlB,SAAS,SAAS,CAAC,KAAK,EAAE,SAAS,EAAE,GAAG,EAAE,UAAU,EAAE;;;AAGjE,QAAI,CAAC,uBAAQ,KAAK,CAAC,EAAE;AACjB,eAAO;KACV;;AAED,OAAG,GAAG,CAAC,CAAC,GAAG,IAAI,wBAAS,GAAG,CAAC,GAAG,GAAG,GAAG,MAAM,CAAC;;AAE5C,SAAK,CAAC,IAAI,CAAE,UAAS,CAAC,EAAE,CAAC,EAAE;;AAEvB,YAAI,wBAAS,CAAC,CAAC,IAAI,wBAAS,CAAC,CAAC,EAAE;AAC5B,aAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;AACX,aAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;SACd;;;AAAA,AAGD,YAAI,uBAAQ,CAAC,CAAC,IAAI,uBAAQ,CAAC,CAAC,EAAE;AAC1B,aAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;AACX,aAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;SACd;;;AAAA,AAGD,YAAI,wBAAS,CAAC,CAAC,IAAI,wBAAS,CAAC,CAAC,EAAE;AAC5B,aAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;AACpB,aAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;;AAEpB,gBAAI,SAAS,KAAK,MAAM,EAAE;;AACtB,uBAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AAAC,CAAC;aACvC,MACI;AACD,uBAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,AAAC,CAAC;aACvC;;;;AACJ,aAGI,IAAI,wBAAS,CAAC,CAAC,IAAI,wBAAS,CAAC,CAAC,EAAE;AACjC,uBAAO,SAAS,KAAK,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;aAC/C,MAEI,IAAI,CAAC,KAAK,SAAS,IAAI,CAAC,KAAK,IAAI,EAAE;AACpC,uBAAO,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;aAC9B,MAEI,IAAI,CAAC,KAAK,SAAS,IAAI,CAAC,KAAK,IAAI,EAAE;AACpC,uBAAO,UAAU,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;aAC9B;;AAED,eAAO,CAAC,CAAC,CAAC;KACb,CAAC,CAAC;;AAEH,WAAO,KAAK,CAAC;CAChB","file":"arraySort.js","sourcesContent":["import isString from './isString';\nimport isNumber from './isNumber';\nimport isArray from './isArray';\nimport isObject from './isObject';\n\nexport default function arraySort(array, direction, key, emptyFirst) {\n    // supports [number], [string], [{key: number}], [{key: string}], [[string]], [[number]]\n\n    if (!isArray(array))Â {\n        return;\n    }\n\n    key = !!key || isNumber(key) ? key : 'name';\n\n    array.sort( function(a, b) {\n        // if object, get the property values\n        if (isObject(a) && isObject(b)) {\n            a = a[key];\n            b = b[key];\n        }\n\n        // if array, get from the right index\n        if (isArray(a) && isArray(b)) {\n            a = a[key];\n            b = b[key];\n        }\n\n        // string\n        if (isString(a) && isString(b)) {\n            a = a.toLowerCase();\n            b = b.toLowerCase();\n\n            if (direction === 'DESC') { // TODO: Case sensitive really required? Why not allow `desc`, `Desc` or `dEsC`?\n                return a < b ? 1 : (a > b ? -1 : 0);\n            }\n            else {\n                return a < b ? -1 : (a > b ? 1 : 0);\n            }\n        }\n\n        // number\n        else if (isNumber(a) && isNumber(b)) {\n            return direction === 'DESC' ? b - a : a - b;\n        }\n\n        else if (a === undefined || a === null) {\n            return emptyFirst ? -1 : 1;\n        }\n\n        else if (b === undefined || b === null) {\n            return emptyFirst ? 1 : -1;\n        }\n\n        return -1;\n    });\n\n    return array;\n}\n"]}