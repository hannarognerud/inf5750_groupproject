{"version":3,"sources":["../src/numberConstrain.js"],"names":[],"mappings":";;;;;kBAQwB,eAAe;;;;;;;;;AAAxB,SAAS,eAAe,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE;AACtD,UAAM,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;;AAE5B,QAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;AACb,cAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;KAClC;AACD,QAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;AACb,cAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;KAClC;AACD,WAAO,MAAM,CAAC;CACjB","file":"numberConstrain.js","sourcesContent":["/**\n * Constrains the value between the passed min and max\n *\n * @param {Number} number The value to be constrained\n * @param {Number} min The minumum number that the value should be within\n * @param {Number} max The maximum number that the value should be within\n * @returns {Number|*} The resulting number\n */\nexport default function numberConstrain(number, min, max) {\n    number = parseFloat(number);\n\n    if (!isNaN(min)) {\n        number = Math.max(number, min);\n    }\n    if (!isNaN(max)) {\n        number = Math.min(number, max);\n    }\n    return number;\n}\n"]}