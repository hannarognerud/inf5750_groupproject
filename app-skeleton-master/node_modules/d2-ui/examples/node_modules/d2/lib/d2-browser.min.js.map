{"version":3,"sources":["webpack:///d2-browser.min.js","webpack:///webpack/bootstrap adfaedd96a58140bf370","webpack:///./src/d2.js","webpack:///./src/lib/utils.js","webpack:///./src/logger/Logger.js","webpack:///./src/lib/check.js","webpack:///./src/model/models.js","webpack:///./src/model/ModelBase.js","webpack:///./src/model/ModelValidation.js","webpack:///./src/api/Api.js","webpack:///./src/external/jquery.js","webpack:///./src/system/System.js","webpack:///./src/system/SystemSettings.js","webpack:///./src/system/SystemConfiguration.js","webpack:///./src/model/helpers/json.js","webpack:///./src/model/Model.js","webpack:///./src/model/ModelDefinition.js","webpack:///./src/model/ModelDefinitions.js","webpack:///./src/model/ModelCollection.js","webpack:///./src/pager/Pager.js","webpack:///./src/model/ModelCollectionProperty.js","webpack:///./src/lib/SchemaTypes.js","webpack:///./src/model/Filters.js","webpack:///./src/model/Filter.js","webpack:///./src/model/config/index.js","webpack:///./src/model/config/model-defaults/organisationUnitGroupSet.js","webpack:///./src/model/config/model-defaults/dataElement.js","webpack:///./src/model/config/model-defaults/dataSet.js","webpack:///./src/i18n/I18n.js","webpack:///./src/config.js","webpack:///./src/defaultConfig.js","webpack:///./src/current-user/CurrentUser.js","webpack:///./src/current-user/UserAuthorities.js","webpack:///./src/current-user/UserSettings.js"],"names":["d2","modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","i","Object","prototype","hasOwnProperty","_m","args","slice","fn","a","b","apply","this","concat","_interopRequireDefault","obj","__esModule","default","_toConsumableArray","arr","Array","isArray","arr2","length","from","getManifest","url","api","_apiApi2","_externalJquery2","setBaseUrl","manifestUtilities","getBaseUrl","activities","dhis","href","get","then","manifest","assign","getUserSettings","getApi","preInitConfig","baseUrl","firstRun","getModelRequests","schemaNames","arguments","undefined","fieldsForSchemas","modelRequests","loadSchemaForName","schemaName","fields","individualSchemaRequests","map","schemasPromise","Promise","all","schemas","push","paging","init","initConfig","logger","_loggerLogger2","getLogger","config","_config2","create","models","model","_modelModels2","Api","system","_systemSystem2","getSystem","i18n","_i18nI18n2","getI18n","processConfigForD2","deferredD2Init","_libUtils","Deferred","userRequests","systemRequests","load","res","responses","pick","attributes","currentUser","authorities","userSettings","systemInfo","apps","schema","apiEndpoint","updateAPIUrlWithBaseUrlVersionNumber","forEach","schemaAttributes","filter","attributeDescriptor","attributeNameFilter","name","join","add","ModelDefinition","createFromSchema","_currentUserCurrentUser2","setSystemInfo","setInstalledApps","resolve","promise","error","JSON","stringify","reject","getInstance","defineProperty","value","_loggerLogger","_modelModels","_apiApi","_systemSystem","_i18nI18n","_config","_currentUserCurrentUser","_externalJquery","_classCallCheck","instance","Constructor","TypeError","throwError","message","Error","curry","toCurry","parameter","_len","_key","addLockedProperty","object","propertyDescriptor","enumerable","configurable","writable","copyOwnProperties","to","key","property","item","apiUrl","apiUrlWithVersionRexExp","apiVersionMatch","match","baseUrlHasVersion","apiUrlHasVersion","test","version","replace","_createClass","defineProperties","target","props","descriptor","protoProps","staticProps","_this","global","_libCheck","Logger","logging","checkType","type","console","isType","canLog","rest","debug","_len2","_key2","_len3","_key3","log","_len4","_key4","warn","e","window","checkDefined","noop","isString","isObject","isDefined","isInteger","nVal","isFinite","Math","floor","isNumeric","parseFloat","contains","list","listToCheck","indexOf","isValidUid","Number","_ModelBase","_ModelBase2","_Model","_Model2","_ModelDefinition","_ModelDefinition2","_ModelDefinitions","_ModelDefinitions2","_ModelValidation","_ModelValidation2","ModelBase","Model","ModelDefinitions","ModelValidation","hasModelValidationForProperty","Boolean","modelDefinition","modelValidations","updateModelFromResponseStatus","result","httpStatus","response","uid","dataValues","dirty","getDirtyChildren","resetDirtyState","DIRTY_PROPERTY_LIST","clear","_helpersJson","modelValidator","getModelValidation","Symbol","validate","validationState","status","saveNew","bind","includeChildren","_this2","isDirty","save","_this3","unique","current","asyncRemoteValidation","validateAgainstSchema","validationMessages","remoteMessages","validationMessage","reduce","messages","getJSONForProperties","keys","hasDirtyChildren","values","_this4","propertyName","owner","_this5","getCollectionChildren","providedLogger","extractValidationViolations","webmessage","validationViolations","errorReports","post","getOwnedPropertyJSON","webMessage","modelValidation","getMergeStrategyParam","mergeType","minor","processSuccess","data","processFailure","jqXHR","responseJSON","getUrl","RegExp","urlParts","jquery","defaultRequestSettings","headers","Cache-Control","contentType","options","request","payload","useMergeStrategy","urlForUpdate","getOptions","mergeOptions","requestData","toString","resultOptions","requestUrl","dataType","urlQueryParams","str","separator","filterQuery","ajax","jQuery","_SystemSettings","_SystemSettings2","_SystemConfiguration","_SystemConfiguration2","System","settings","configuration","installedApps","parseVersionString","zipFile","onProgress","FormData","xhr","append","XMLHttpRequest","upload","onprogress","progress","lengthComputable","total","processData","compatibleOnly","appStoreData","appStore","appData","app","versions","versionData","isVersionCompatible","err","appKey","update","loadInstalledApps","major","parseInt","substring","snapshot","String","systemVersion","appVersion","isNewEnough","min_platform_version","compareVersions","isNotTooOld","max_platform_version","SystemSettings","systemSettingsKey","processValue","parse","systemSettingValue","settingUrl","SystemConfiguration","_configuration","_configPromise","ignoreCache","that","req","trim","split","isPlainValue","collection","isCollectionProperty","properties","objectToSave","collectionProperties","getCollectionChildrenPropertyNames","propertyNames","childModel","ownedProperties","getOwnedPropertyNames","modelProperties","hasKeys","attributeProperties","attributeName","attributeValues","attribute","set","attributeValue","av","Set","_inherits","subClass","superClass","constructor","setPrototypeOf","__proto__","createModelPropertyDescriptor","propertiesObject","schemaProperty","collectionName","propertyDetails","createPropertiesObject","schemaProperties","createModelPropertyDescriptorOn","createValidationSetting","validationObject","getReferenceTypeFrom","pop","validationDetails","persisted","_libSchemaTypes2","typeLookup","propertyType","required","min","max","constants","ordered","itemPropertyType","referenceType","createValidations","validationsObject","createModelPropertyOn","shouldBeModelCollectionProperty","modelProperty","isAnUpdate","modelToCheck","_get","_x6","_x7","_x8","_again","receiver","Function","desc","getOwnPropertyDescriptor","getter","parent","getPrototypeOf","_ModelCollection","_ModelCollection2","_ModelCollectionProperty","_ModelCollectionProperty2","_libSchemaTypes","_Filters","_Filters2","modelName","modelNamePlural","modelOptions","validations","shareable","metadata","klass","identifiableObject","filters","getFilters","clone","getModelDefinitions","d","defaultValues","getDefaultValuesForModelType","checkForModelProperty","ModelDefinitionPrototype","priorFilters","clonedDefinition","identifier","queryParams","definedFilters","responseData","plural","pager","jsonPayload","updateUrl","ModelDefinitionClass","specialClasses","freeze","attributeDefinition","UserModelDefinition","DataSetModelDefinition","hasData","dataClone","compulsoryDataElementOperands","user","dataSet","modelDefinitions","transformer","_throwIfContainsOtherThanModelObjects","iterator","toCheck","_throwIfContainsModelWithoutUid","_pagerPager","_pagerPager2","ModelCollection","pagerData","valuesContainerMap","Map","resultArray","entries","has","_len5","_key5","size","Pager","page","pageCount","pagingHandler","nextPage","prevPage","hasNextPage","goToPage","hasPreviousPage","pageNr","_x","_x2","_x3","_ModelCollection3","ModelCollectionProperty","parentModel","added","removed","updateDirty","throwIfContainsOtherThanModelObjects","throwIfContainsModelWithoutUid","queries","_utils","_check","SchemaTypes","getTypes","_modelFilter","_modelFilter2","Filters","getFilter","on","getQueryParamFormat","FILTER_COMPARATORS","equals","like","ilike","notEqual","Filter","comparator","filterValue","getReturn","modelDefinitionName","_modelDefaultsOrganisationUnitGroupSet","_modelDefaultsOrganisationUnitGroupSet2","_modelDefaultsCategory","_modelDefaultsCategory2","_modelDefaultsCategoryOptionGroupSet","_modelDefaultsCategoryOptionGroupSet2","_modelDefaultsDataElement","_modelDefaultsDataElement2","_modelDefaultsDataElementGroupSet","_modelDefaultsDataElementGroupSet2","_modelDefaultsDataSet","_modelDefaultsDataSet2","dataDimension","aggregationType","valueType","expiryDays","openFuturePeriods","timelyDays","periodType","_slicedToArray","sliceIterator","_arr","_n","_d","_e","_s","_i","next","done","I18n","sources","strings","translations","path","string","parseProperties","text","line","_line$split$map","out","_line$split$map2","grp","fromCharCode","propFiles","source","propFile","variables","translatedString","partial","_defaultConfig","_defaultConfig2","DEFAULT_API_VERSION","Config","configObjects","arg","every","configObject","addSource","addStrings","noCreateAllowedFor","getUserPropertiesToCopy","currentUserObject","userCredentials","propertiesToIgnore","propertySymbols","isInNoCreateAllowedForList","_UserAuthorities","_UserAuthorities2","_UserSettings","_UserSettings2","authTypes","READ","CREATE","CREATE_PUBLIC","CREATE_PRIVATE","DELETE","UPDATE","EXTERNALIZE","CurrentUser","userData","userAuthorities","userGroupIds","userGroups","userGroup","userRoleIds","userRoles","userRole","listOptions","organisationUnitsIds","organisationUnits","organisationUnit","dataViewOrganisationUnits","authorityType","modelType","authority","some","authToHave","schemaAuthority","authorityToCheckFor","authType","checkAuthorityForType","checkCreateAuthorityForType","keyUiLocale","auths","UserAuthorities","UserSettings"],"mappings":"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","file":"d2-browser.min.js","sourcesContent":["var d2 = (function () {var d2 =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ((function(modules) {\n\t// Check all modules for deduplicated modules\n\tfor(var i in modules) {\n\t\tif(Object.prototype.hasOwnProperty.call(modules, i)) {\n\t\t\tswitch(typeof modules[i]) {\n\t\t\tcase \"function\": break;\n\t\t\tcase \"object\":\n\t\t\t\t// Module can be created from a template\n\t\t\t\tmodules[i] = (function(_m) {\n\t\t\t\t\tvar args = _m.slice(1), fn = modules[_m[0]];\n\t\t\t\t\treturn function (a,b,c) {\n\t\t\t\t\t\tfn.apply(this, [a,b,c].concat(args));\n\t\t\t\t\t};\n\t\t\t\t}(modules[i]));\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t// Module is a copy of another module\n\t\t\t\tmodules[i] = modules[modules[i]];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn modules;\n}([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\texports.getManifest = getManifest;\n\texports.getUserSettings = getUserSettings;\n\texports.init = init;\n\texports.getInstance = getInstance;\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\t\n\tvar _libUtils = __webpack_require__(1);\n\t\n\tvar _loggerLogger = __webpack_require__(2);\n\t\n\tvar _loggerLogger2 = _interopRequireDefault(_loggerLogger);\n\t\n\tvar _modelModels = __webpack_require__(4);\n\t\n\tvar _modelModels2 = _interopRequireDefault(_modelModels);\n\t\n\tvar _apiApi = __webpack_require__(7);\n\t\n\tvar _apiApi2 = _interopRequireDefault(_apiApi);\n\t\n\tvar _systemSystem = __webpack_require__(9);\n\t\n\tvar _systemSystem2 = _interopRequireDefault(_systemSystem);\n\t\n\tvar _i18nI18n = __webpack_require__(29);\n\t\n\tvar _i18nI18n2 = _interopRequireDefault(_i18nI18n);\n\t\n\tvar _config = __webpack_require__(30);\n\t\n\tvar _config2 = _interopRequireDefault(_config);\n\t\n\tvar _currentUserCurrentUser = __webpack_require__(32);\n\t\n\tvar _currentUserCurrentUser2 = _interopRequireDefault(_currentUserCurrentUser);\n\t\n\tvar _externalJquery = __webpack_require__(8);\n\t\n\tvar _externalJquery2 = _interopRequireDefault(_externalJquery);\n\t\n\tvar firstRun = true;\n\tvar deferredD2Init = _libUtils.Deferred.create();\n\t\n\tvar preInitConfig = _config2['default'].create();\n\t\n\tfunction getManifest(url) {\n\t    var api = new _apiApi2['default'](_externalJquery2['default']);\n\t    api.setBaseUrl('');\n\t\n\t    var manifestUtilities = {\n\t        getBaseUrl: function getBaseUrl() {\n\t            return this.activities.dhis.href;\n\t        }\n\t    };\n\t\n\t    return api.get('' + url).then(function (manifest) {\n\t        return Object.assign({}, manifest, manifestUtilities);\n\t    });\n\t}\n\t\n\t/**\n\t * @function getUserSettings\n\t *\n\t * @returns {Promise} A promise to the current user settings\n\t *\n\t * @description\n\t * The object that is the result of the promise will have the following properties\n\t * ```js\n\t * {\n\t *   \"uiLocale\": \"en\" // The users locale, that can be used for translations)\n\t * }\n\t * ```\n\t */\n\t\n\tfunction getUserSettings() {\n\t    var api = _apiApi2['default'].getApi();\n\t\n\t    if (preInitConfig.baseUrl && firstRun) {\n\t        api.setBaseUrl(preInitConfig.baseUrl);\n\t    }\n\t\n\t    return api.get('userSettings');\n\t}\n\t\n\tfunction getModelRequests(api) {\n\t    var schemaNames = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];\n\t\n\t    var fieldsForSchemas = 'apiEndpoint,name,authorities,plural,shareable,metadata,klass,identifiableObject,properties[href,writable,referenceType,collection,collectionName,name,propertyType,persisted,required,min,max,ordered,unique,constants,owner,itemPropertyType]';\n\t    var modelRequests = [];\n\t    var loadSchemaForName = function loadSchemaForName(schemaName) {\n\t        return api.get('schemas/' + schemaName, { fields: fieldsForSchemas });\n\t    };\n\t\n\t    if (schemaNames.length > 0) {\n\t        var individualSchemaRequests = schemaNames.map(loadSchemaForName);\n\t\n\t        var schemasPromise = Promise.all(individualSchemaRequests).then(function (schemas) {\n\t            return { schemas: schemas };\n\t        });\n\t\n\t        modelRequests.push(schemasPromise);\n\t    } else {\n\t        // Used as a source to generate the models.\n\t        modelRequests.push(api.get('schemas', { fields: fieldsForSchemas }));\n\t    }\n\t\n\t    // Used to add the dynamic attributes to the models that should have them.\n\t    modelRequests.push(api.get('attributes', { fields: ':all,optionSet[:all,options[:all]]', paging: false }));\n\t\n\t    return modelRequests;\n\t}\n\t\n\t/**\n\t * @function init\n\t *\n\t * @param {Object} initConfig Configuration object that will be used to configure to define D2 Setting.\n\t * See the description for more information on the available settings.\n\t * @returns {Promise} A promise that resolves with the intialized d2 object. Which is an object that exposes `model`, `models` and `Api`\n\t *\n\t * @description\n\t * Init function that used to initialise D2. This will load the schemas from the DHIS2 api and configure your D2 instance.\n\t *\n\t * The `config` object that can be passed into D2 can have the following properties:\n\t *\n\t * baseUrl: Set this when the url is something different then `/api`. If you are running your dhis instance in a subdirectory of the actual domain\n\t * for example http://localhost/dhis/ you should set the base url to `/dhis/api`\n\t *\n\t * ```js\n\t * import init from 'd2';\n\t *\n\t * init({baseUrl: '/dhis/api'})\n\t *   .then((d2) => {\n\t *     console.log(d2.model.dataElement.list());\n\t *   });\n\t * ```\n\t */\n\t\n\tfunction init(initConfig) {\n\t    var api = _apiApi2['default'].getApi();\n\t    var logger = _loggerLogger2['default'].getLogger();\n\t\n\t    var config = _config2['default'].create(preInitConfig, initConfig);\n\t\n\t    var d2 = {\n\t        models: undefined,\n\t        model: _modelModels2['default'],\n\t        Api: _apiApi2['default'],\n\t        system: _systemSystem2['default'].getSystem(),\n\t        i18n: _i18nI18n2['default'].getI18n()\n\t    };\n\t\n\t    // Process the config in a the config class to keep all config calls together.\n\t    _config2['default'].processConfigForD2(config, d2);\n\t\n\t    // Because when importing the getInstance method in dependencies the getInstance could run before\n\t    // init we have to resolve the current promise on first run and for consecutive ones replace the\n\t    // old one with a fresh promise.\n\t    if (firstRun) {\n\t        firstRun = false;\n\t    } else {\n\t        deferredD2Init = _libUtils.Deferred.create();\n\t    }\n\t\n\t    var modelRequests = getModelRequests(api, config.schemas);\n\t\n\t    var userRequests = [api.get('me', { fields: ':all,organisationUnits[id],userGroups[id],userCredentials[:all,!user,userRoles[id]' }), api.get('me/authorization'), getUserSettings()];\n\t\n\t    var systemRequests = [api.get('system/info'), api.get('apps')];\n\t\n\t    return Promise.all([].concat(_toConsumableArray(modelRequests), userRequests, systemRequests, [d2.i18n.load()])).then(function (res) {\n\t        var responses = {\n\t            schemas: (0, _libUtils.pick)('schemas')(res[0]),\n\t            attributes: (0, _libUtils.pick)('attributes')(res[1]),\n\t            currentUser: res[2],\n\t            authorities: res[3],\n\t            userSettings: res[4],\n\t            systemInfo: res[5],\n\t            apps: res[6]\n\t        };\n\t\n\t        responses.schemas\n\t        // TODO: Remove this when the schemas endpoint is versioned or shows the correct urls for the requested version\n\t        // The schemas endpoint is not versioned which will result into the modelDefinitions always using the\n\t        // \"default\" endpoint, we therefore modify the endpoint url based on the given baseUrl.\n\t        .map(function (schema) {\n\t            schema.apiEndpoint = (0, _libUtils.updateAPIUrlWithBaseUrlVersionNumber)(schema.apiEndpoint, config.baseUrl); // eslint-disable-line no-param-reassign\n\t\n\t            return schema;\n\t        }).forEach(function (schema) {\n\t            // Attributes that do not have values do not by default get returned with the data,\n\t            // therefore we need to grab the attributes that are attached to this particular schema to be able to know about them\n\t            var schemaAttributes = responses.attributes.filter(function (attributeDescriptor) {\n\t                var attributeNameFilter = [schema.name, 'Attribute'].join('');\n\t                return attributeDescriptor[attributeNameFilter] === true;\n\t            });\n\t\n\t            if (!Object.prototype.hasOwnProperty.call(d2.models, schema.name)) {\n\t                d2.models.add(_modelModels2['default'].ModelDefinition.createFromSchema(schema, schemaAttributes));\n\t            }\n\t        });\n\t\n\t        d2.currentUser = _currentUserCurrentUser2['default'].create(responses.currentUser, responses.authorities, d2.models, responses.userSettings);\n\t        d2.system.setSystemInfo(responses.systemInfo);\n\t        d2.system.setInstalledApps(responses.apps);\n\t\n\t        deferredD2Init.resolve(d2);\n\t        return deferredD2Init.promise;\n\t    })['catch'](function (error) {\n\t        logger.error('Unable to get schemas from the api', JSON.stringify(error), error);\n\t\n\t        deferredD2Init.reject('Unable to get schemas from the DHIS2 API');\n\t        return deferredD2Init.promise;\n\t    });\n\t}\n\t\n\t/**\n\t * @function getInstance\n\t *\n\t * @returns {Promise} A promise to an initialized d2 instance.\n\t *\n\t * @description\n\t * This function can be used to retrieve the `singleton` instance of d2. The instance is being created by calling\n\t * the `init` method.\n\t *\n\t * ```js\n\t * import {init, getInstance} from 'd2';\n\t *\n\t * init({baseUrl: '/dhis2/api/'});\n\t * getInstance()\n\t *   .then(d2 => {\n\t *      d2.models.dataElement.list();\n\t *      // and all your other d2 magic.\n\t *   });\n\t * ```\n\t */\n\t\n\tfunction getInstance() {\n\t    return deferredD2Init.promise;\n\t}\n\t\n\t// Alias preInitConfig to be able to `import {config} from 'd2';`\n\t/**\n\t * @property config\n\t *\n\t * @description\n\t * Can be used to set config options before initialisation of d2.\n\t *\n\t * ```js\n\t * import {config, init} from 'd2';\n\t *\n\t * config.baseUrl = '/demo/api';\n\t * config.i18n.sources.add('i18n/systemsettingstranslations.properties');\n\t *\n\t * init()\n\t *   .then(d2 => {\n\t *     d2.system.settings.all()\n\t *       .then(systemSettings => Object.keys())\n\t *       .then(systemSettingsKey => {\n\t *         d2.i18n.getTranslation(systemSettingsKey);\n\t *       });\n\t *   });\n\t *\n\t * ```\n\t */\n\tvar config = preInitConfig;\n\t\n\texports.config = config;\n\texports['default'] = {\n\t    init: init,\n\t    config: config,\n\t    getInstance: getInstance,\n\t    getUserSettings: getUserSettings,\n\t    getManifest: getManifest\n\t};\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t// TODO: Most of these functions should be moved out to d2-utilizr\n\t\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\texports.throwError = throwError;\n\texports.curry = curry;\n\texports.addLockedProperty = addLockedProperty;\n\texports.copyOwnProperties = copyOwnProperties;\n\texports.pick = pick;\n\texports.updateAPIUrlWithBaseUrlVersionNumber = updateAPIUrlWithBaseUrlVersionNumber;\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction throwError(message) {\n\t    throw new Error(message);\n\t}\n\t\n\t// TODO: Throw an error when `toCurry` is not a function\n\t\n\tfunction curry(toCurry, parameter) {\n\t    return function curried() {\n\t        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t            args[_key] = arguments[_key];\n\t        }\n\t\n\t        return toCurry.apply(this, [parameter].concat(args));\n\t    };\n\t}\n\t\n\tfunction addLockedProperty(object, name, value) {\n\t    var propertyDescriptor = {\n\t        enumerable: true,\n\t        configurable: false,\n\t        writable: false,\n\t        value: value\n\t    };\n\t    Object.defineProperty(object, name, propertyDescriptor);\n\t}\n\t\n\tfunction copyOwnProperties(to, from) {\n\t    var key = undefined;\n\t\n\t    for (key in from) {\n\t        if (from.hasOwnProperty(key)) {\n\t            to[key] = from[key]; // eslint-disable-line no-param-reassign\n\t        }\n\t    }\n\t\n\t    return to;\n\t}\n\t\n\tfunction pick(property) {\n\t    return function (item) {\n\t        if (item) {\n\t            return item[property];\n\t        }\n\t        return undefined;\n\t    };\n\t}\n\t\n\tvar Deferred = (function () {\n\t    function Deferred() {\n\t        var _this = this;\n\t\n\t        _classCallCheck(this, Deferred);\n\t\n\t        this.promise = new Promise(function (resolve, reject) {\n\t            _this.resolve = resolve;\n\t            _this.reject = reject;\n\t        });\n\t    }\n\t\n\t    _createClass(Deferred, null, [{\n\t        key: \"create\",\n\t        value: function create() {\n\t            return new Deferred();\n\t        }\n\t    }]);\n\t\n\t    return Deferred;\n\t})();\n\t\n\texports.Deferred = Deferred;\n\t\n\tfunction updateAPIUrlWithBaseUrlVersionNumber(apiUrl, baseUrl) {\n\t    if (!baseUrl || !apiUrl) {\n\t        return apiUrl;\n\t    }\n\t\n\t    var apiUrlWithVersionRexExp = /api\\/(2[3-9])/;\n\t    var apiVersionMatch = baseUrl.match(apiUrlWithVersionRexExp);\n\t\n\t    var baseUrlHasVersion = apiVersionMatch && apiVersionMatch[1];\n\t    var apiUrlHasVersion = apiUrl && !apiUrlWithVersionRexExp.test(apiUrl);\n\t\n\t    if (baseUrlHasVersion && apiUrlHasVersion) {\n\t        var version = apiVersionMatch[1];\n\t\n\t        // Inject the current api version number into the endPoint urls\n\t        return apiUrl.replace(/api/, \"api/\" + version);\n\t    }\n\t\n\t    return apiUrl;\n\t}\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _libCheck = __webpack_require__(3);\n\t\n\tvar Logger = (function () {\n\t    function Logger(logging) {\n\t        _classCallCheck(this, Logger);\n\t\n\t        (0, _libCheck.checkType)(logging, 'object', 'console');\n\t        this.logger = logging;\n\t    }\n\t\n\t    _createClass(Logger, [{\n\t        key: 'canLog',\n\t        value: function canLog(type) {\n\t            return !!(type && console && (0, _libCheck.isType)(this.logger[type], 'function'));\n\t        }\n\t    }, {\n\t        key: 'debug',\n\t        value: function debug() {\n\t            if (this.canLog('debug')) {\n\t                for (var _len = arguments.length, rest = Array(_len), _key = 0; _key < _len; _key++) {\n\t                    rest[_key] = arguments[_key];\n\t                }\n\t\n\t                this.logger.debug.apply(console, rest);\n\t                return true;\n\t            }\n\t            return false;\n\t        }\n\t    }, {\n\t        key: 'error',\n\t        value: function error() {\n\t            if (this.canLog('error')) {\n\t                for (var _len2 = arguments.length, rest = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n\t                    rest[_key2] = arguments[_key2];\n\t                }\n\t\n\t                this.logger.error.apply(console, rest);\n\t                return true;\n\t            }\n\t            return false;\n\t        }\n\t    }, {\n\t        key: 'log',\n\t        value: function log() {\n\t            if (this.canLog('log')) {\n\t                for (var _len3 = arguments.length, rest = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n\t                    rest[_key3] = arguments[_key3];\n\t                }\n\t\n\t                this.logger.log.apply(console, rest);\n\t                return true;\n\t            }\n\t            return false;\n\t        }\n\t    }, {\n\t        key: 'warn',\n\t        value: function warn() {\n\t            if (this.canLog('warn')) {\n\t                for (var _len4 = arguments.length, rest = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n\t                    rest[_key4] = arguments[_key4];\n\t                }\n\t\n\t                this.logger.warn.apply(console, rest);\n\t                return true;\n\t            }\n\t            return false;\n\t        }\n\t    }], [{\n\t        key: 'getLogger',\n\t        value: function getLogger() {\n\t            var logger = undefined;\n\t\n\t            // TODO: This is not very clean try to figure out a better way to do this.\n\t            try {\n\t                // Node version\n\t                logger = global.console;\n\t            } catch (e) {\n\t                // Browser version fallback\n\t                /* istanbul ignore next */\n\t                logger = window.console;\n\t            }\n\t\n\t            if (this.logger) {\n\t                return this.logger;\n\t            }\n\t            return this.logger = new Logger(logger);\n\t        }\n\t    }]);\n\t\n\t    return Logger;\n\t})();\n\t\n\texports['default'] = Logger;\n\tmodule.exports = exports['default'];\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\texports.checkDefined = checkDefined;\n\texports.checkType = checkType;\n\texports.isType = isType;\n\texports.isString = isString;\n\texports.isArray = isArray;\n\texports.isObject = isObject;\n\texports.isDefined = isDefined;\n\texports.isInteger = isInteger;\n\texports.isNumeric = isNumeric;\n\texports.contains = contains;\n\texports.isValidUid = isValidUid;\n\t\n\tfunction checkDefined(value, name) {\n\t    if (value !== undefined) {\n\t        return true;\n\t    }\n\t    throw new Error([name || 'Value', 'should be provided'].join(' '));\n\t}\n\t\n\t// TODO: Decide if checkType([], 'object') is a 'false' positive\n\t\n\tfunction checkType(value, type, name) {\n\t    checkDefined(value, name);\n\t    checkDefined(type, 'Type');\n\t\n\t    if (typeof type === 'function' && value instanceof type || typeof type === 'string' && typeof value === type) {\n\t        return true;\n\t    }\n\t    throw new Error(['Expected', name || value, 'to have type', type].join(' '));\n\t}\n\t\n\t// TODO: Log type error?\n\t\n\tfunction isType(value, type) {\n\t    function noop() {}\n\t\n\t    try {\n\t        checkType(value, type);\n\t        return true;\n\t    } catch (e) {\n\t        noop();\n\t    }\n\t\n\t    return false;\n\t}\n\t\n\tfunction isString(value) {\n\t    return isType(value, 'string');\n\t}\n\t\n\tfunction isArray(value) {\n\t    return Array.isArray(value);\n\t}\n\t\n\tfunction isObject(value) {\n\t    return isType(value, Object);\n\t}\n\t\n\tfunction isDefined(value) {\n\t    return value !== undefined;\n\t}\n\t\n\tfunction isInteger(nVal) {\n\t    return typeof nVal === 'number' && isFinite(nVal) && nVal > -9007199254740992 && nVal < 9007199254740992 && Math.floor(nVal) === nVal;\n\t}\n\t\n\t// Polyfill for the isInteger function that will be added in ES6\n\t// http://wiki.ecmascript.org/doku.php?id=harmony:number.isinteger\n\t/* istanbul ignore if  */\n\tif (!Number.isInteger) {\n\t    Number.isInteger = isInteger;\n\t}\n\t\n\tfunction isNumeric(nVal) {\n\t    return typeof nVal === 'number' && isFinite(nVal) && nVal - parseFloat(nVal) + 1 >= 0;\n\t}\n\t\n\tfunction contains(item, list) {\n\t    var listToCheck = isArray(list) && list || [];\n\t\n\t    return listToCheck.indexOf(item) >= 0;\n\t}\n\t\n\tfunction isValidUid(value) {\n\t    return value && value.length === 11;\n\t}\n\t\n\texports['default'] = {\n\t    checkType: checkType,\n\t    checkDefined: checkDefined,\n\t    isArray: isArray,\n\t    isDefined: isDefined,\n\t    isInteger: isInteger,\n\t    isNumeric: isNumeric,\n\t    isString: isString,\n\t    isType: isType,\n\t    contains: contains,\n\t    isValidUid: isValidUid\n\t};\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _ModelBase = __webpack_require__(5);\n\t\n\tvar _ModelBase2 = _interopRequireDefault(_ModelBase);\n\t\n\tvar _Model = __webpack_require__(13);\n\t\n\tvar _Model2 = _interopRequireDefault(_Model);\n\t\n\tvar _ModelDefinition = __webpack_require__(14);\n\t\n\tvar _ModelDefinition2 = _interopRequireDefault(_ModelDefinition);\n\t\n\tvar _ModelDefinitions = __webpack_require__(15);\n\t\n\tvar _ModelDefinitions2 = _interopRequireDefault(_ModelDefinitions);\n\t\n\tvar _ModelValidation = __webpack_require__(6);\n\t\n\tvar _ModelValidation2 = _interopRequireDefault(_ModelValidation);\n\t\n\texports['default'] = {\n\t    ModelBase: _ModelBase2['default'],\n\t    Model: _Model2['default'],\n\t    ModelDefinition: _ModelDefinition2['default'],\n\t    ModelDefinitions: _ModelDefinitions2['default'],\n\t    ModelValidation: _ModelValidation2['default']\n\t};\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _ModelValidation = __webpack_require__(6);\n\t\n\tvar _ModelValidation2 = _interopRequireDefault(_ModelValidation);\n\t\n\tvar _libCheck = __webpack_require__(3);\n\t\n\tvar _helpersJson = __webpack_require__(12);\n\t\n\tvar modelValidator = _ModelValidation2['default'].getModelValidation();\n\t\n\tvar DIRTY_PROPERTY_LIST = Symbol('List to keep track of dirty properties');\n\t\n\texports.DIRTY_PROPERTY_LIST = DIRTY_PROPERTY_LIST;\n\tfunction hasModelValidationForProperty(model, property) {\n\t    return Boolean(model.modelDefinition && model.modelDefinition.modelValidations && model.modelDefinition.modelValidations[property] && Object.prototype.hasOwnProperty.call(model.modelDefinition.modelValidations, property));\n\t}\n\t\n\tfunction updateModelFromResponseStatus(result) {\n\t    if (result && result.httpStatus === 'Created' && result && (0, _libCheck.isValidUid)(result.response.uid)) {\n\t        this.dataValues.id = result.response.uid;\n\t        this.dataValues.href = [this.modelDefinition.apiEndpoint, this.dataValues.id].join('/');\n\t    }\n\t    this.dirty = false;\n\t    this.getDirtyChildren().forEach(function (value) {\n\t        if (value.resetDirtyState) {\n\t            value.resetDirtyState();\n\t        } else {\n\t            value.dirty = false; // eslint-disable-line no-param-reassign\n\t        }\n\t    });\n\t\n\t    this[DIRTY_PROPERTY_LIST].clear();\n\t    return result;\n\t}\n\t\n\t/**\n\t * @class ModelBase\n\t */\n\t\n\tvar ModelBase = (function () {\n\t    function ModelBase() {\n\t        _classCallCheck(this, ModelBase);\n\t    }\n\t\n\t    _createClass(ModelBase, [{\n\t        key: 'create',\n\t\n\t        /**\n\t         * @method create\n\t         *\n\t         * @returns {Promise} Returns a promise that resolves when the model has been saved or rejected with the result from\n\t         * the `validate()` call.\n\t         *\n\t         * @definition\n\t         * Will save model as a new object to the server using a POST request. This method would generally be used if\n\t         * you're creating models with pre-specified IDs. Note that this does not check if the model is marked as dirty.\n\t         */\n\t        value: function create() {\n\t            var _this = this;\n\t\n\t            return this.validate().then(function (validationState) {\n\t                if (!validationState.status) {\n\t                    return Promise.reject(validationState);\n\t                }\n\t\n\t                return _this.modelDefinition.saveNew(_this).then(updateModelFromResponseStatus.bind(_this));\n\t            });\n\t        }\n\t\n\t        /**\n\t         * @method save\n\t         *\n\t         * @returns {Promise} Returns a promise that resolves when the model has been saved\n\t         * or rejects with the result from the `validate()` call.\n\t         *\n\t         * @description\n\t         * Checks if the model is dirty. When the model is dirty it will check if the values of the model are valid by calling\n\t         * `validate`. If this is correct it will attempt to save the [Model](#/model/Model) to the api.\n\t         *\n\t         * ```js\n\t         * myModel.save()\n\t         *   .then((message) => console.log(message));\n\t         * ```\n\t         */\n\t    }, {\n\t        key: 'save',\n\t        value: function save(includeChildren) {\n\t            var _this2 = this;\n\t\n\t            if (!this.isDirty(includeChildren)) {\n\t                return Promise.reject('No changes to be saved');\n\t            }\n\t\n\t            return this.validate().then(function (validationState) {\n\t                if (!validationState.status) {\n\t                    return Promise.reject(validationState);\n\t                }\n\t\n\t                return _this2.modelDefinition.save(_this2).then(updateModelFromResponseStatus.bind(_this2));\n\t            });\n\t        }\n\t\n\t        /**\n\t         * @method validate\n\t         *\n\t         * @returns {Promise} Promise that resolves with an object with a status property that represents if the model\n\t         * is valid or not the fields array will return the names of the fields that are invalid.\n\t         *\n\t         * @description\n\t         * This will run the validations on the properties which have validations set. Normally these validations are defined\n\t         * through the DHIS2 schema. It will check min/max for strings/numbers etc. Additionally it will\n\t         * run model validations against the schema.\n\t         *\n\t         * ```js\n\t         * myModel.validate()\n\t         *  .then(myModelStatus => {\n\t         *    if (myModelStatus.status === false) {\n\t         *      myModelStatus.fields.forEach((fieldName) => console.log(fieldName));\n\t         *    }\n\t         * });\n\t         * ```\n\t         */\n\t    }, {\n\t        key: 'validate',\n\t        value: function validate() {\n\t            var _this3 = this;\n\t\n\t            return new Promise(function (resolve, reject) {\n\t                var validationMessages = [];\n\t\n\t                function unique(current, property) {\n\t                    if (property && current.indexOf(property) === -1) {\n\t                        current.push(property);\n\t                    }\n\t                    return current;\n\t                }\n\t\n\t                function asyncRemoteValidation(model) {\n\t                    return modelValidator.validateAgainstSchema(model);\n\t                }\n\t\n\t                // Run async validation against the api\n\t                asyncRemoteValidation(_this3)['catch'](function (remoteMessages) {\n\t                    // Errors are ok in this case\n\t                    if (Array.isArray(remoteMessages)) {\n\t                        return remoteMessages;\n\t                    }\n\t                    return Promise.reject(remoteMessages);\n\t                }).then(function (remoteMessages) {\n\t                    validationMessages = validationMessages.concat(remoteMessages);\n\t\n\t                    var validationState = {\n\t                        status: remoteMessages.length === 0,\n\t                        fields: validationMessages.map(function (validationMessage) {\n\t                            return validationMessage.property;\n\t                        }).reduce(unique, []),\n\t                        messages: validationMessages\n\t                    };\n\t                    resolve(validationState);\n\t                })['catch'](function (message) {\n\t                    return reject(message);\n\t                });\n\t            });\n\t        }\n\t    }, {\n\t        key: 'clone',\n\t        value: function clone() {\n\t            return this.modelDefinition.create((0, _helpersJson.getJSONForProperties)(this, Object.keys(this.modelDefinition.modelValidations)));\n\t        }\n\t    }, {\n\t        key: 'delete',\n\t        value: function _delete() {\n\t            return this.modelDefinition['delete'](this);\n\t        }\n\t    }, {\n\t        key: 'isDirty',\n\t        value: function isDirty() {\n\t            var includeChildren = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\n\t\n\t            if (!(this.dirty || includeChildren === true && this.hasDirtyChildren())) {\n\t                return false;\n\t            }\n\t            return true;\n\t        }\n\t    }, {\n\t        key: 'getDirtyPropertyNames',\n\t        value: function getDirtyPropertyNames() {\n\t            return Array.from(this[DIRTY_PROPERTY_LIST].values());\n\t        }\n\t    }, {\n\t        key: 'getCollectionChildren',\n\t        value: function getCollectionChildren() {\n\t            var _this4 = this;\n\t\n\t            // TODO: Can't be sure that this has a `modelDefinition` property\n\t            return Object.keys(this).filter(function (propertyName) {\n\t                return _this4[propertyName] && hasModelValidationForProperty(_this4, propertyName) && _this4.modelDefinition.modelValidations[propertyName].owner;\n\t            }).map(function (propertyName) {\n\t                return _this4[propertyName];\n\t            });\n\t        }\n\t    }, {\n\t        key: 'getCollectionChildrenPropertyNames',\n\t        value: function getCollectionChildrenPropertyNames() {\n\t            var _this5 = this;\n\t\n\t            return Object.keys(this).filter(function (propertyName) {\n\t                return _this5.modelDefinition && _this5.modelDefinition.modelValidations && _this5.modelDefinition.modelValidations[propertyName] && _this5.modelDefinition.modelValidations[propertyName].type === 'COLLECTION';\n\t            });\n\t        }\n\t    }, {\n\t        key: 'getDirtyChildren',\n\t        value: function getDirtyChildren() {\n\t            return this.getCollectionChildren().filter(function (property) {\n\t                return property && property.dirty === true;\n\t            });\n\t        }\n\t    }, {\n\t        key: 'hasDirtyChildren',\n\t        value: function hasDirtyChildren() {\n\t            return this.getDirtyChildren().length > 0;\n\t        }\n\t    }]);\n\t\n\t    return ModelBase;\n\t})();\n\t\n\texports['default'] = new ModelBase();\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _libCheck = __webpack_require__(3);\n\t\n\tvar _loggerLogger = __webpack_require__(2);\n\t\n\tvar _loggerLogger2 = _interopRequireDefault(_loggerLogger);\n\t\n\tvar _apiApi = __webpack_require__(7);\n\t\n\tvar _apiApi2 = _interopRequireDefault(_apiApi);\n\t\n\tvar _helpersJson = __webpack_require__(12);\n\t\n\t/**\n\t * @class ModelValidation\n\t */\n\t\n\tvar ModelValidation = (function () {\n\t    function ModelValidation(providedLogger) {\n\t        _classCallCheck(this, ModelValidation);\n\t\n\t        (0, _libCheck.checkType)(providedLogger, 'object', 'logger (Logger)');\n\t        this.logger = providedLogger;\n\t    }\n\t\n\t    /**\n\t     * @deprecated\n\t     * @method validate\n\t     *\n\t     * @returns {{status: boolean, messages: Array}} Returns {status: true, messages: []}\n\t     */\n\t\n\t    _createClass(ModelValidation, [{\n\t        key: 'validate',\n\t        value: function validate() {\n\t            this.logger.warn('Client side model validation is deprecated');\n\t            throw new Error('Client side model validation is deprecated');\n\t        }\n\t\n\t        /**\n\t         * @method validateAgainstSchema\n\t         *\n\t         * @param {Model} model The model that should be validated.\n\t         * @returns {Array} Returns an array with validation messages if there are any.\n\t         *\n\t         * @description\n\t         * Sends a POST request against the `api/schemas` endpoint to check if the model is valid.\n\t         *\n\t         * @note {warn} Currently only checks\n\t         */\n\t    }, {\n\t        key: 'validateAgainstSchema',\n\t        value: function validateAgainstSchema(model) {\n\t            if (!(model && model.modelDefinition && model.modelDefinition.name)) {\n\t                return Promise.reject('model.modelDefinition.name can not be found');\n\t            }\n\t\n\t            function extractValidationViolations(webmessage) {\n\t                // Support both the 2.23+ version using `errorReports` and the 2.22 and lower using `validationViolations`\n\t                // for errorMessages from the schemas endpoint.\n\t                // TODO: Remove support for the older `validationViolations` when supporting 2.22 is no longer required\n\t                if (webmessage.response && (webmessage.response.validationViolations || webmessage.response.errorReports)) {\n\t                    return webmessage.response.validationViolations || webmessage.response.errorReports;\n\t                }\n\t                throw new Error('Response was not a WebMessage with the expected format');\n\t            }\n\t\n\t            var url = 'schemas/' + model.modelDefinition.name;\n\t\n\t            // TODO: The function getOwnedPropertyJSON should probably not be exposed, perhaps we could have a getJSONForModel(ownedPropertiesOnly=true) method.\n\t            return _apiApi2['default'].getApi().post(url, (0, _helpersJson.getOwnedPropertyJSON)(model)).then(function (webMessage) {\n\t                if (webMessage.status === 'OK') {\n\t                    return [];\n\t                }\n\t                return Promise.reject(webMessage);\n\t            })['catch'](extractValidationViolations);\n\t        }\n\t\n\t        /**\n\t         * @method getModelValidation\n\t         * @static\n\t         *\n\t         * @returns {ModelValidation} New or memoized instance of `ModelInstance`\n\t         *\n\t         * @description\n\t         * Returns the `ModelValidation` singleton. Creates a new one if it does not yet exist.\n\t         * Grabs a logger instance by calling `Logger.getLogger`\n\t         */\n\t    }], [{\n\t        key: 'getModelValidation',\n\t        value: function getModelValidation() {\n\t            if (this.modelValidation) {\n\t                return this.modelValidation;\n\t            }\n\t            return this.modelValidation = new ModelValidation(_loggerLogger2['default'].getLogger(console));\n\t        }\n\t    }]);\n\t\n\t    return ModelValidation;\n\t})();\n\t\n\texports['default'] = ModelValidation;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _libCheck = __webpack_require__(3);\n\t\n\tvar _externalJquery = __webpack_require__(8);\n\t\n\tvar _externalJquery2 = _interopRequireDefault(_externalJquery);\n\t\n\tvar _systemSystem = __webpack_require__(9);\n\t\n\tvar _systemSystem2 = _interopRequireDefault(_systemSystem);\n\t\n\tfunction getMergeStrategyParam() {\n\t    var mergeType = arguments.length <= 0 || arguments[0] === undefined ? 'REPLACE' : arguments[0];\n\t\n\t    var system = _systemSystem2['default'].getSystem();\n\t\n\t    if (system.version && Number(system.version.minor) <= 22) {\n\t        return 'mergeStrategy=' + mergeType;\n\t    }\n\t\n\t    return 'mergeMode=' + mergeType;\n\t}\n\t\n\tfunction processSuccess(resolve) {\n\t    return function (data /* , textStatus, jqXHR */) {\n\t        resolve(data);\n\t    };\n\t}\n\t\n\tfunction processFailure(reject) {\n\t    return function (jqXHR /* , textStatus, errorThrown */) {\n\t        if (jqXHR.responseJSON) {\n\t            return reject(jqXHR.responseJSON);\n\t        }\n\t\n\t        delete jqXHR.then; // eslint-disable-line no-param-reassign\n\t        return reject(jqXHR);\n\t    };\n\t}\n\t\n\tfunction getUrl(baseUrl, url) {\n\t    // If we are dealing with an absolute url use that instead\n\t    if (new RegExp('^(:?https?:)?//').test(url)) {\n\t        return url;\n\t    }\n\t\n\t    var urlParts = [];\n\t\n\t    if (baseUrl) {\n\t        urlParts.push(baseUrl);\n\t    }\n\t    urlParts.push(url);\n\t\n\t    return urlParts.join('/').replace(new RegExp('(.(?:[^:]))\\/\\/+', 'g'), '$1/').replace(new RegExp('\\/$'), '');\n\t}\n\t\n\tvar Api = (function () {\n\t    function Api(jquery) {\n\t        _classCallCheck(this, Api);\n\t\n\t        if (!jquery) {\n\t            throw new Error('D2 requires jQuery');\n\t        }\n\t\n\t        this.jquery = jquery;\n\t        this.baseUrl = '/api';\n\t        this.defaultRequestSettings = {\n\t            headers: {\n\t                // FIXME: Remove the 'Cache-Control: no-store' header when we figure out how to solve this xhr/jquery bug\n\t                // does not process consecutive requests for the same url properly due to the 304 response.\n\t                // It makes no sense to set a 'Cache-Control: no-store' on a request...\n\t                'Cache-Control': 'no-store'\n\t            },\n\t            data: {},\n\t            contentType: 'application/json',\n\t            type: undefined,\n\t            url: undefined\n\t        };\n\t    }\n\t\n\t    _createClass(Api, [{\n\t        key: 'get',\n\t        value: function get(url, data, options) {\n\t            return this.request('GET', getUrl(this.baseUrl, url), data, options);\n\t        }\n\t    }, {\n\t        key: 'post',\n\t        value: function post(url, data, options) {\n\t            // Pass data through JSON.stringify, unless options.contentType is 'text/plain' or false (meaning don't process)\n\t            var payload = options && options.contentType !== undefined && (options.contentType === 'text/plain' || options.contentType === false) ? data : JSON.stringify(data);\n\t            return this.request('POST', getUrl(this.baseUrl, url), payload, options);\n\t        }\n\t    }, {\n\t        key: 'delete',\n\t        value: function _delete(url, options) {\n\t            return this.request('DELETE', getUrl(this.baseUrl, url), undefined, options);\n\t        }\n\t    }, {\n\t        key: 'update',\n\t        value: function update(url, data) {\n\t            var useMergeStrategy = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\n\t\n\t            // Since we are currently using PUT to save the full state back, we have to use mergeMode=REPLACE\n\t            // to clear out existing values\n\t            var urlForUpdate = useMergeStrategy === true ? url + '?' + getMergeStrategyParam() : url;\n\t\n\t            return this.request('PUT', getUrl(this.baseUrl, urlForUpdate), JSON.stringify(data));\n\t        }\n\t    }, {\n\t        key: 'request',\n\t        value: function request(type, url, data) {\n\t            var options = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];\n\t\n\t            (0, _libCheck.checkType)(type, 'string', 'Request type');\n\t            (0, _libCheck.checkType)(url, 'string', 'Url');\n\t            var requestUrl = url;\n\t\n\t            if (data && data.filter) {\n\t                var urlQueryParams = data.filter\n\t                // `${str}${separator}${filter}`\n\t                .reduce(function (str, filter) {\n\t                    var separator = str.length ? '&' : '';\n\t                    var filterQuery = 'filter=' + filter;\n\t\n\t                    return '' + str + separator + filterQuery;\n\t                }, '');\n\t\n\t                delete data.filter; // eslint-disable-line no-param-reassign\n\t                requestUrl += '?' + urlQueryParams;\n\t            }\n\t\n\t            var api = this;\n\t\n\t            function getOptions(mergeOptions, requestData) {\n\t                var payload = requestData;\n\t                if (payload === undefined) {\n\t                    payload = {};\n\t                } else if (payload === true || payload === false) {\n\t                    payload = payload.toString();\n\t                }\n\t\n\t                var resultOptions = Object.assign({}, api.defaultRequestSettings, mergeOptions);\n\t\n\t                resultOptions.type = type;\n\t                resultOptions.url = requestUrl;\n\t                resultOptions.data = payload;\n\t                resultOptions.dataType = options.dataType !== undefined ? options.dataType : 'json';\n\t                resultOptions.contentType = options.contentType !== undefined ? options.contentType : 'application/json';\n\t\n\t                // Only set content type when there is data to send\n\t                // GET requests and requests without data do not need a Content-Type header\n\t                // 0 and false are valid requestData values and therefore should have a content type\n\t                if (type === 'GET' || !requestData && requestData !== 0 && requestData !== false) {\n\t                    resultOptions.contentType = undefined;\n\t                }\n\t\n\t                return resultOptions;\n\t            }\n\t\n\t            return new Promise(function (resolve, reject) {\n\t                api.jquery.ajax(getOptions(options, data)).then(processSuccess(resolve), processFailure(reject));\n\t            });\n\t        }\n\t    }, {\n\t        key: 'setBaseUrl',\n\t        value: function setBaseUrl(baseUrl) {\n\t            (0, _libCheck.checkType)(baseUrl, 'string', 'Base url');\n\t\n\t            this.baseUrl = baseUrl;\n\t\n\t            return this;\n\t        }\n\t    }]);\n\t\n\t    return Api;\n\t})();\n\t\n\tfunction getApi() {\n\t    if (getApi.api) {\n\t        return getApi.api;\n\t    }\n\t    return getApi.api = new Api(_externalJquery2['default']);\n\t}\n\t\n\tApi.getApi = getApi;\n\t\n\texports['default'] = Api;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _loggerLogger = __webpack_require__(2);\n\t\n\tvar _loggerLogger2 = _interopRequireDefault(_loggerLogger);\n\t\n\tvar jquery = undefined;\n\t\n\ttry {\n\t    jquery = window.jQuery;\n\t} catch (e) {\n\t    _loggerLogger2['default'].getLogger().error('JQuery not found');\n\t    jquery = {};\n\t}\n\t\n\texports['default'] = jquery;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @module System\n\t *\n\t * @requires d2/system/SystemSettings\n\t */\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _apiApi = __webpack_require__(7);\n\t\n\tvar _apiApi2 = _interopRequireDefault(_apiApi);\n\t\n\tvar _SystemSettings = __webpack_require__(10);\n\t\n\tvar _SystemSettings2 = _interopRequireDefault(_SystemSettings);\n\t\n\tvar _SystemConfiguration = __webpack_require__(11);\n\t\n\tvar _SystemConfiguration2 = _interopRequireDefault(_SystemConfiguration);\n\t\n\t/**\n\t * @class System\n\t *\n\t * @description\n\t * Represents the system that can be interacted with. There is a single instance of this pre-defined onto the d2\n\t * object after initialisation. This can be interacted with using its property objects to among other be used\n\t * to get and save systemSettings.\n\t */\n\t\n\tvar System = (function () {\n\t    function System(settings, configuration) {\n\t        _classCallCheck(this, System);\n\t\n\t        /**\n\t         * @property {SystemSettings} settings Contains a reference to a `SystemSettings` instance that can be used\n\t         * to retrieve and save system settings.\n\t         *\n\t         * @description\n\t         * ```js\n\t         * d2.system.settings.get('keyLastSuccessfulResourceTablesUpdate')\n\t         *  .then(systemSettingsValue => {\n\t         *    console.log('Analytics was last updated on: ' + systemSettingsValue);\n\t         *  });\n\t         * ```\n\t         */\n\t        this.settings = settings;\n\t\n\t        /**\n\t         * @property {SystemConfiguration} configuration\n\t         *\n\t         * @description A representation of the system configuration, that can be used to retreive and change system\n\t         * configuration options.\n\t         */\n\t        this.configuration = configuration;\n\t\n\t        /**\n\t         * @property {Object} systemInfo\n\t         *\n\t         * @description An object containing system information about the DHIS2 instance\n\t         */\n\t        this.systemInfo = undefined;\n\t\n\t        /**\n\t         * @property {Object} version\n\t         *\n\t         * @description An object containing version information about the DHIS2 instance\n\t         */\n\t        this.version = undefined;\n\t\n\t        /**\n\t         * @property {Array} installedApps\n\t         *\n\t         * @description An array of all the webapps that are installed on the current DHIS2 instance\n\t         */\n\t        this.installedApps = undefined;\n\t    }\n\t\n\t    /**\n\t     * Sets the systemInfo and version properties\n\t     *\n\t     * @param systemInfo\n\t     */\n\t\n\t    _createClass(System, [{\n\t        key: 'setSystemInfo',\n\t        value: function setSystemInfo(systemInfo) {\n\t            this.version = System.parseVersionString(systemInfo.version);\n\t            this.systemInfo = systemInfo;\n\t        }\n\t\n\t        /**\n\t         * Sets the list of currently installed webapps\n\t         *\n\t         * @param apps\n\t         */\n\t    }, {\n\t        key: 'setInstalledApps',\n\t        value: function setInstalledApps(apps) {\n\t            this.installedApps = apps;\n\t        }\n\t\n\t        /**\n\t         * Refreshes the list of currently installed webapps\n\t         *\n\t         * @returns {Promise} A promise that resolves to the list of installed apps\n\t         */\n\t    }, {\n\t        key: 'loadInstalledApps',\n\t        value: function loadInstalledApps() {\n\t            var _this = this;\n\t\n\t            var api = _apiApi2['default'].getApi();\n\t\n\t            return api.get('apps').then(function (apps) {\n\t                _this.setInstalledApps(apps);\n\t\n\t                return apps;\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Upload and install a zip file containing a new webapp\n\t         *\n\t         * @param zipFile Zip file data from a file input form field\n\t         * @param onProgress An optional callback that will be called whenever file upload progress info is available\n\t         * @returns {Promise}\n\t         */\n\t    }, {\n\t        key: 'uploadApp',\n\t        value: function uploadApp(zipFile, onProgress) {\n\t            var api = _apiApi2['default'].getApi();\n\t            var data = new FormData();\n\t            var xhr = undefined;\n\t            data.append('file', zipFile);\n\t\n\t            if (onProgress !== undefined) {\n\t                xhr = new XMLHttpRequest();\n\t                xhr.upload.onprogress = function (progress) {\n\t                    if (progress.lengthComputable) {\n\t                        onProgress(progress.loaded / progress.total);\n\t                    }\n\t                };\n\t            }\n\t\n\t            return api.post('apps', data, {\n\t                contentType: false,\n\t                processData: false,\n\t                xhr: xhr !== undefined ? function () {\n\t                    return xhr;\n\t                } : undefined\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Load the list of apps available in the DHIS 2 app store\n\t         *\n\t         * @param compatibleOnly If true, apps that are incompatible with the current system will be filtered out\n\t         * @returns {Promise}\n\t         */\n\t    }, {\n\t        key: 'loadAppStore',\n\t        value: function loadAppStore() {\n\t            var _this2 = this;\n\t\n\t            var compatibleOnly = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\n\t\n\t            return new Promise(function (resolve, reject) {\n\t                var api = _apiApi2['default'].getApi();\n\t                api.get('appStore').then(function (appStoreData) {\n\t                    var appStore = Object.assign({}, appStoreData);\n\t\n\t                    appStore.apps = appStore.apps.map(function (appData) {\n\t                        var app = Object.assign({}, appData);\n\t\n\t                        if (compatibleOnly) {\n\t                            app.versions = app.versions.filter(function (versionData) {\n\t                                return System.isVersionCompatible(_this2.version, versionData);\n\t                            });\n\t                        }\n\t\n\t                        return app;\n\t                    }).filter(function (appData) {\n\t                        return appData.versions.length > 0;\n\t                    });\n\t\n\t                    resolve(appStore);\n\t                })['catch'](function (err) {\n\t                    reject(err);\n\t                });\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Install the specified app version from the DHIS 2 app store\n\t         *\n\t         * @param uid The uid of the app version to install\n\t         * @returns {Promise}\n\t         */\n\t    }, {\n\t        key: 'installAppVersion',\n\t        value: function installAppVersion(uid) {\n\t            var api = _apiApi2['default'].getApi();\n\t            return new Promise(function (resolve, reject) {\n\t                api.post(['appStore', uid].join('/'), '', { dataType: 'text' }).then(function () {\n\t                    resolve();\n\t                })['catch'](function (err) {\n\t                    reject(err);\n\t                });\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Remove the specified app from the system\n\t         *\n\t         * @param appKey The key of the app to remove\n\t         * @returns {Promise}\n\t         */\n\t    }, {\n\t        key: 'uninstallApp',\n\t        value: function uninstallApp(appKey) {\n\t            var api = _apiApi2['default'].getApi();\n\t\n\t            return api['delete'](['apps', appKey].join('/'))\n\t            // TODO: Stop jQuery from rejecting successful promises\n\t            ['catch'](function () {\n\t                return undefined;\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Refresh the list of apps that are installed on the server\n\t         *\n\t         * @returns {Promise} A promise that resolves to the updated list of installed apps\n\t         */\n\t    }, {\n\t        key: 'reloadApps',\n\t        value: function reloadApps() {\n\t            var _this3 = this;\n\t\n\t            var api = _apiApi2['default'].getApi();\n\t            return api.update('apps').then(function () {\n\t                return _this3.loadInstalledApps();\n\t            });\n\t        }\n\t\n\t        // TODO: Document\n\t        // TODO: Validate string\n\t        // TODO: Handle valid version objects too\n\t    }], [{\n\t        key: 'parseVersionString',\n\t        value: function parseVersionString(version) {\n\t            return {\n\t                major: Number.parseInt(version, 10),\n\t                minor: Number.parseInt(version.substring(version.indexOf('.') + 1), 10),\n\t                snapshot: version.indexOf('-SNAPSHOT') >= 0\n\t            };\n\t        }\n\t\n\t        // TODO: Document\n\t        // Disable eslint complexity warning\n\t        /* eslint-disable */\n\t    }, {\n\t        key: 'compareVersions',\n\t        value: function compareVersions(a, b) {\n\t            var from = typeof a === 'string' || a instanceof String ? System.parseVersionString(a) : a;\n\t            var to = typeof b === 'string' || b instanceof String ? System.parseVersionString(b) : b;\n\t\n\t            if (from.major !== to.major) {\n\t                return from.major - to.major;\n\t            } else if (from.minor !== to.minor) {\n\t                return from.minor - to.minor;\n\t            }\n\t\n\t            return (from.snapshot ? 0 : 1) - (to.snapshot ? 0 : 1);\n\t        }\n\t\n\t        /* eslint-enable */\n\t\n\t    }, {\n\t        key: 'isVersionCompatible',\n\t        value: function isVersionCompatible(systemVersion, appVersion) {\n\t            var isNewEnough = appVersion.min_platform_version ? System.compareVersions(systemVersion, appVersion.min_platform_version) >= 0 : true;\n\t            var isNotTooOld = appVersion.max_platform_version ? System.compareVersions(systemVersion, appVersion.max_platform_version) <= 0 : true;\n\t\n\t            return isNewEnough && isNotTooOld;\n\t        }\n\t\n\t        /**\n\t         * @method getSystem\n\t         * @static\n\t         *\n\t         * @returns {System} Object with the system interaction properties\n\t         *\n\t         * @description\n\t         * Get a new instance of the system object. This will function as a singleton, when a System object has been created\n\t         * when requesting getSystem again the original version will be returned.\n\t         */\n\t    }, {\n\t        key: 'getSystem',\n\t        value: function getSystem() {\n\t            if (!System.getSystem.system) {\n\t                System.getSystem.system = new System(new _SystemSettings2['default'](), new _SystemConfiguration2['default']());\n\t            }\n\t\n\t            return System.getSystem.system;\n\t        }\n\t    }]);\n\t\n\t    return System;\n\t})();\n\t\n\texports['default'] = System;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @module System\n\t *\n\t * @requires lib/check\n\t * @requires api/Api\n\t */\n\t\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _libCheck = __webpack_require__(3);\n\t\n\tvar _apiApi = __webpack_require__(7);\n\t\n\tvar _apiApi2 = _interopRequireDefault(_apiApi);\n\t\n\t/**\n\t * @class SystemSettings\n\t *\n\t * @description\n\t * Handles communication with the systemSettings endpoint. Can be used to get or save systemSettings.\n\t */\n\t// TODO: Return the values from the local cache if we have not updated it? We could\n\t\n\tvar SystemSettings = (function () {\n\t    function SystemSettings() {\n\t        var api = arguments.length <= 0 || arguments[0] === undefined ? _apiApi2['default'].getApi() : arguments[0];\n\t\n\t        _classCallCheck(this, SystemSettings);\n\t\n\t        this.api = api;\n\t    }\n\t\n\t    /**\n\t     * @method all\n\t     *\n\t     * @returns {Promise} Promise that resolves with the systemsettings object from the api.\n\t     *\n\t     * @description\n\t     * Loads all the system settings in the system and returns them as an object from the promise.\n\t     * ```js\n\t     * d2.system.settings.all()\n\t     *  .then(systemSettings => {\n\t     *    console.log('Analytics was last updated on: ' + systemSettings.keyLastSuccessfulResourceTablesUpdate);\n\t     *  });\n\t     * ```\n\t     */\n\t\n\t    _createClass(SystemSettings, [{\n\t        key: 'all',\n\t        value: function all() {\n\t            return this.api.get('systemSettings');\n\t        }\n\t\n\t        /**\n\t         * @method get\n\t         *\n\t         * @param {String} systemSettingsKey The identifier of the system setting that should be retrieved.\n\t         * @returns {Promise} A promise that resolves with the value or will fail if the value is not available.\n\t         *\n\t         * @description\n\t         * ```js\n\t         * d2.system.settings.get('keyLastSuccessfulResourceTablesUpdate')\n\t         *  .then(systemSettingsValue => {\n\t         *    console.log('Analytics was last updated on: ' + systemSettingsValue);\n\t         *  });\n\t         * ```\n\t         */\n\t    }, {\n\t        key: 'get',\n\t        value: function get(systemSettingsKey) {\n\t            var _this = this;\n\t\n\t            function processValue(value) {\n\t                // Attempt to parse the response as JSON. If this fails we return the value as is.\n\t                try {\n\t                    return JSON.parse(value);\n\t                } catch (e) {\n\t                    return value;\n\t                }\n\t            }\n\t\n\t            return new Promise(function (resolve, reject) {\n\t                if (!(0, _libCheck.isString)(systemSettingsKey)) {\n\t                    throw new TypeError('A \"key\" parameter should be specified when calling get() on systemSettings');\n\t                }\n\t\n\t                _this.api.get(['systemSettings', systemSettingsKey].join('/'), undefined, { dataType: 'text' }).then(function (response) {\n\t                    var systemSettingValue = processValue(response);\n\t                    if (systemSettingValue) {\n\t                        resolve(processValue(response));\n\t                    }\n\t                    reject(new Error('The requested systemSetting has no value or does not exist.'));\n\t                });\n\t            });\n\t        }\n\t    }, {\n\t        key: 'set',\n\t        value: function set(systemSettingsKey, value) {\n\t            var settingUrl = ['systemSettings', systemSettingsKey].join('/');\n\t            if (value === null || ('' + value).length === 0) {\n\t                return this.api['delete'](settingUrl, { dataType: 'text' });\n\t            }\n\t            return this.api.post(settingUrl, value, { dataType: 'text', contentType: 'text/plain' });\n\t        }\n\t    }]);\n\t\n\t    return SystemSettings;\n\t})();\n\t\n\texports['default'] = SystemSettings;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @module System\n\t *\n\t * @requires lib/check\n\t * @requires api/Api\n\t */\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _apiApi = __webpack_require__(7);\n\t\n\tvar _apiApi2 = _interopRequireDefault(_apiApi);\n\t\n\t/**\n\t * Handles communication with the configuration endpoint. Can be used to get or set configuration options.\n\t */\n\t\n\tvar SystemConfiguration = (function () {\n\t    function SystemConfiguration() {\n\t        var api = arguments.length <= 0 || arguments[0] === undefined ? _apiApi2['default'].getApi() : arguments[0];\n\t\n\t        _classCallCheck(this, SystemConfiguration);\n\t\n\t        this.api = api;\n\t\n\t        this._configuration = undefined;\n\t        this._configPromise = null;\n\t    }\n\t\n\t    /**\n\t     * Fetches all system configuration settings from the API and caches them so that future\n\t     * calls to this function won't call the API again.\n\t     *\n\t     * @param {boolean=false} ignoreCache If set to true, calls the API regardless of cache status\n\t     * @returns {Promise} Promise that resolves with all the individual configuration options from the api.\n\t     */\n\t\n\t    _createClass(SystemConfiguration, [{\n\t        key: 'all',\n\t        value: function all(ignoreCache) {\n\t            var _this = this;\n\t\n\t            if (this._configPromise === null || ignoreCache === true) {\n\t                this._configPromise = this.api.get('configuration').then(function (configuration) {\n\t                    _this._configuration = configuration;\n\t                    return _this._configuration;\n\t                });\n\t            }\n\t\n\t            return this._configPromise;\n\t        }\n\t\n\t        /**\n\t         * Returns the value of the specified configuration option.\n\t         *\n\t         * This is a convenience method that works exactly the same as calling `configuration.all()[name]`.\n\t         *\n\t         * @param key {String}\n\t         * @param {boolean=false} ignoreCache If set to true, calls the API regardless of cache status\n\t         * @returns {Promise}\n\t         */\n\t    }, {\n\t        key: 'get',\n\t        value: function get(key, ignoreCache) {\n\t            return this.all(ignoreCache).then(function (config) {\n\t                if (config.hasOwnProperty(key)) {\n\t                    return Promise.resolve(config[key]);\n\t                }\n\t\n\t                return Promise.reject('Unknown config option: ' + key);\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Send a query to the API to change the value of a configuration key to the specified value.\n\t         *\n\t         * @param key {String}\n\t         * @param value {String|null}\n\t         * @returns {Promise}\n\t         */\n\t    }, {\n\t        key: 'set',\n\t        value: function set(key, value) {\n\t            var that = this;\n\t            var req = undefined;\n\t\n\t            if (key === 'systemId') {\n\t                return Promise.reject('The system ID can\\'t be changed');\n\t            } else if ((key === 'feedbackRecipients' || key === 'selfRegistrationOrgUnit' || key === 'selfRegistrationRole') && (value === 'null' || value === null)) {\n\t                // Only valid UIDs are accepted when POST'ing, so we have to use DELETE in stead of POST'ing a null value.\n\t                req = this.api['delete'](['configuration', key].join('/'), { dataType: 'text' });\n\t            } else if (key === 'corsWhitelist') {\n\t                // The corsWhitelist endpoint expects an array of URL's, while here value is expected to be a string.\n\t                req = this.api.post(['configuration', key].join('/'), value.trim().split('\\n'), { dataType: 'text' });\n\t            } else {\n\t                req = this.api.post(['configuration', key].join('/'), value, {\n\t                    dataType: 'text',\n\t                    contentType: 'text/plain'\n\t                });\n\t            }\n\t\n\t            return req.then(function () {\n\t                // Ideally we'd update the cache here, but doing so requires another trip to the server\n\t                // For now, just bust the cache to ensure it's not incorrect\n\t                that._configuration = undefined;\n\t                return Promise.resolve();\n\t            })['catch'](function () {\n\t                return Promise.reject('No configuration found for ' + key);\n\t            });\n\t        }\n\t    }]);\n\t\n\t    return SystemConfiguration;\n\t})();\n\t\n\texports['default'] = SystemConfiguration;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\texports.getJSONForProperties = getJSONForProperties;\n\texports.getOwnedPropertyJSON = getOwnedPropertyJSON;\n\tfunction isPlainValue(collection) {\n\t    return function isPlainValueInCollection(property) {\n\t        return collection.indexOf(property) === -1;\n\t    };\n\t}\n\t\n\tfunction isCollectionProperty(collection) {\n\t    return function (property) {\n\t        return !isPlainValue(collection)(property);\n\t    };\n\t}\n\t\n\tfunction getJSONForProperties(model, properties) {\n\t    var objectToSave = {};\n\t    var collectionProperties = model.getCollectionChildrenPropertyNames()\n\t    // Even though attributeValues are considered collections, they are handled separately due to their\n\t    // difference in structure.\n\t    .filter(function (propertyName) {\n\t        return propertyName !== 'attributeValues';\n\t    });\n\t\n\t    var propertyNames = Object.keys(model.modelDefinition.modelValidations).filter(function (propertyName) {\n\t        return properties.indexOf(propertyName) >= 0;\n\t    }).filter(function (propertyName) {\n\t        return model.dataValues[propertyName] !== undefined && model.dataValues[propertyName] !== null;\n\t    });\n\t\n\t    // Handle plain values\n\t    propertyNames.filter(isPlainValue(collectionProperties)).forEach(function (propertyName) {\n\t        objectToSave[propertyName] = model.dataValues[propertyName];\n\t    });\n\t\n\t    // Handle Collection properties\n\t    propertyNames.filter(isCollectionProperty(collectionProperties)).forEach(function (propertyName) {\n\t        // compulsoryDataElementOperands and greyedFields are not arrays of models.\n\t        // TODO: This is not the proper way to do this. We should check if the array contains Models\n\t        if (propertyName === 'compulsoryDataElementOperands' || propertyName === 'greyedFields') {\n\t            objectToSave[propertyName] = Array.from(model.dataValues[propertyName]);\n\t            return;\n\t        }\n\t\n\t        // Transform an object collection to an array of objects with id properties\n\t        objectToSave[propertyName] = Array.from(model.dataValues[propertyName].values()).filter(function (value) {\n\t            return value.id;\n\t        }).map(function (childModel) {\n\t            // Legends can be saved as part of the LegendSet object.\n\t            // To make this work properly we will return all of the properties for the items in the collection\n\t            // instead of just the `id` fields\n\t            if (model.modelDefinition && model.modelDefinition.name === 'legendSet') {\n\t                return getOwnedPropertyJSON.call(childModel.modelDefinition, childModel); // eslint-disable-line no-use-before-define\n\t            }\n\t\n\t            // For any other types we return an object with just an id\n\t            return { id: childModel.id };\n\t        });\n\t    });\n\t\n\t    return objectToSave;\n\t}\n\t\n\tfunction getOwnedPropertyJSON(model) {\n\t    var ownedProperties = model.modelDefinition.getOwnedPropertyNames();\n\t\n\t    return getJSONForProperties(model, ownedProperties);\n\t}\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @module Model\n\t *\n\t * @requires lib/check\n\t * @requires model/ModelBase\n\t */\n\t\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _libCheck = __webpack_require__(3);\n\t\n\tvar _ModelBase = __webpack_require__(5);\n\t\n\tvar _ModelBase2 = _interopRequireDefault(_ModelBase);\n\t\n\t// TODO: Perhaps we can generate model classes dynamically based on the schemas and inherit from this.\n\t/**\n\t * @class Model\n\t * @extends ModelBase\n\t *\n\t * @description\n\t * A Model represents an object from the DHIS2 Api. A model is created based of a ModelDefinition. The ModelDefinition\n\t * has the properties that the model should have.\n\t */\n\t\n\tvar Model = (function () {\n\t\n\t    /**\n\t     * @constructor\n\t     *\n\t     * @param {ModelDefinition} modelDefinition The model definition that corresponds with the model.\n\t     * This is essential defining what type the model is representing.\n\t     *\n\t     * @description\n\t     * Will create a new model instanced based on the model definition. When creating a new instance the model\n\t     * definition needs to have both the modelValidations and modelProperties.\n\t     *\n\t     * The model properties will depend on the ModelDefinition. A model definition is based on a DHIS2 Schema.\n\t     */\n\t\n\t    function Model(modelDefinition) {\n\t        var _this = this;\n\t\n\t        _classCallCheck(this, Model);\n\t\n\t        (0, _libCheck.checkType)(modelDefinition, 'object', 'modelDefinition');\n\t        (0, _libCheck.checkType)(modelDefinition.modelProperties, 'object', 'modelProperties');\n\t\n\t        /**\n\t         * @property {ModelDefinition} modelDefinition Stores reference to the modelDefinition that was used when\n\t         * creating the model. This property is not enumerable or writable and will therefore not show up when looping\n\t         * over the object properties.\n\t         */\n\t        Object.defineProperty(this, 'modelDefinition', {\n\t            enumerable: false,\n\t            configurable: false,\n\t            writable: false,\n\t            value: modelDefinition\n\t        });\n\t\n\t        /**\n\t         * @property {Boolean} dirty Represents the state of the model. When the model is concidered `dirty`\n\t         * there are pending changes.\n\t         * This property is not enumerable or writable and will therefore not show up when looping\n\t         * over the object properties.\n\t         */\n\t        Object.defineProperty(this, 'dirty', {\n\t            enumerable: false,\n\t            configurable: false,\n\t            writable: true,\n\t            value: false\n\t        });\n\t\n\t        /**\n\t         * @property {Object} dataValues Values object used to store the actual model values. Normally access to the\n\t         * Model data will be done through accessor properties that are generated from the modelDefinition.\n\t         *\n\t         * @note {warning} This should not be accessed directly.\n\t         */\n\t        Object.defineProperty(this, 'dataValues', {\n\t            enumerable: false,\n\t            configurable: true,\n\t            writable: true,\n\t            value: {}\n\t        });\n\t\n\t        var hasKeys = function hasKeys(object) {\n\t            return object && !!Object.keys(object).length;\n\t        };\n\t        var attributes = {};\n\t        var attributeProperties = modelDefinition.attributeProperties;\n\t        if (hasKeys(attributeProperties)) {\n\t            Object.defineProperty(this, 'attributes', {\n\t                enumerable: false,\n\t                value: attributes\n\t            });\n\t\n\t            Object.keys(attributeProperties).forEach(function (attributeName) {\n\t                Object.defineProperty(attributes, attributeName, {\n\t                    enumerable: true,\n\t                    get: function get() {\n\t                        if (!Array.isArray(_this.attributeValues)) {\n\t                            return undefined;\n\t                        }\n\t\n\t                        return _this.attributeValues.filter(function (value) {\n\t                            return value.attribute.name === attributeName;\n\t                        }).reduce(function (current, value) {\n\t                            return value.value;\n\t                        }, undefined);\n\t                    },\n\t                    set: function set(value) {\n\t                        if (!_this.attributeValues) {\n\t                            _this.attributeValues = [];\n\t                        }\n\t\n\t                        var attributeValue = _this.attributeValues.filter(function (av) {\n\t                            return av.attribute.name === attributeName;\n\t                        }).reduce(function (current, av) {\n\t                            return av;\n\t                        }, undefined);\n\t\n\t                        if (attributeValue) {\n\t                            // Don't do anything if the value stayed the same\n\t                            if (attributeValue.value === value) {\n\t                                return;\n\t                            }\n\t\n\t                            attributeValue.value = value;\n\t                        } else {\n\t                            // Add the new attribute value to the attributeValues collection\n\t                            _this.attributeValues.push({\n\t                                value: value,\n\t                                attribute: {\n\t                                    id: attributeProperties[attributeName].id,\n\t                                    name: attributeProperties[attributeName].name\n\t                                }\n\t                            });\n\t                        }\n\t\n\t                        // Set the model to be dirty\n\t                        _this.dirty = true;\n\t                    }\n\t                });\n\t            });\n\t        }\n\t\n\t        Object.defineProperties(this, modelDefinition.modelProperties);\n\t\n\t        this[_ModelBase.DIRTY_PROPERTY_LIST] = new Set([]);\n\t    }\n\t\n\t    /**\n\t     * @method create\n\t     * @static\n\t     *\n\t     * @param {ModelDefinition} modelDefinition ModelDefinition from which the model should be created\n\t     * @returns {Model} Returns an instance of the model.\n\t     *\n\t     * @description The static method is a factory method to create Model objects. It calls `new Model()` with the passed `ModelDefinition`.\n\t     *\n\t     * ```js\n\t     * let myModel = Model.create(modelDefinition);\n\t     * ```\n\t     */\n\t\n\t    _createClass(Model, null, [{\n\t        key: 'create',\n\t        value: function create(modelDefinition) {\n\t            return new Model(modelDefinition);\n\t        }\n\t    }]);\n\t\n\t    return Model;\n\t})();\n\t\n\tModel.prototype = _ModelBase2['default'];\n\t\n\texports['default'] = Model;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _get = function get(_x6, _x7, _x8) { var _again = true; _function: while (_again) { var object = _x6, property = _x7, receiver = _x8; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x6 = parent; _x7 = property; _x8 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _libCheck = __webpack_require__(3);\n\t\n\tvar _libUtils = __webpack_require__(1);\n\t\n\tvar _ModelDefinitions = __webpack_require__(15);\n\t\n\tvar _ModelDefinitions2 = _interopRequireDefault(_ModelDefinitions);\n\t\n\tvar _Model = __webpack_require__(13);\n\t\n\tvar _Model2 = _interopRequireDefault(_Model);\n\t\n\tvar _ModelCollection = __webpack_require__(16);\n\t\n\tvar _ModelCollection2 = _interopRequireDefault(_ModelCollection);\n\t\n\tvar _ModelCollectionProperty = __webpack_require__(18);\n\t\n\tvar _ModelCollectionProperty2 = _interopRequireDefault(_ModelCollectionProperty);\n\t\n\tvar _libSchemaTypes = __webpack_require__(19);\n\t\n\tvar _libSchemaTypes2 = _interopRequireDefault(_libSchemaTypes);\n\t\n\tvar _Filters = __webpack_require__(20);\n\t\n\tvar _Filters2 = _interopRequireDefault(_Filters);\n\t\n\tvar _ModelBase = __webpack_require__(5);\n\t\n\tvar _config = __webpack_require__(22);\n\t\n\tvar _helpersJson = __webpack_require__(12);\n\t\n\tfunction createModelPropertyDescriptor(propertiesObject, schemaProperty) {\n\t    var propertyName = schemaProperty.collection ? schemaProperty.collectionName : schemaProperty.name;\n\t    var propertyDetails = {\n\t        // Actual property descriptor properties\n\t        configurable: false,\n\t        enumerable: true,\n\t        get: function get() {\n\t            return this.dataValues[propertyName];\n\t        }\n\t    };\n\t\n\t    // Only add a setter for writable properties\n\t    if (schemaProperty.writable) {\n\t        propertyDetails.set = function dynamicPropertySetter(value) {\n\t            // TODO: Objects and Arrays are considered unequal when their data is the same and therefore trigger a dirty\n\t            if (!(0, _libCheck.isObject)(value) && value !== this.dataValues[propertyName] || (0, _libCheck.isObject)(value)) {\n\t                this.dirty = true;\n\t                this[_ModelBase.DIRTY_PROPERTY_LIST].add(propertyName);\n\t                this.dataValues[propertyName] = value;\n\t            }\n\t        };\n\t    }\n\t\n\t    if (propertyName) {\n\t        propertiesObject[propertyName] = propertyDetails; // eslint-disable-line no-param-reassign\n\t    }\n\t}\n\t\n\tfunction createPropertiesObject(schemaProperties) {\n\t    var propertiesObject = {};\n\t    var createModelPropertyDescriptorOn = (0, _libUtils.curry)(createModelPropertyDescriptor, propertiesObject);\n\t\n\t    (schemaProperties || []).forEach(createModelPropertyDescriptorOn);\n\t\n\t    return propertiesObject;\n\t}\n\t\n\tfunction createValidationSetting(validationObject, schemaProperty) {\n\t    var propertyName = schemaProperty.collection ? schemaProperty.collectionName : schemaProperty.name;\n\t    var validationDetails = {\n\t        persisted: schemaProperty.persisted,\n\t        type: _libSchemaTypes2['default'].typeLookup(schemaProperty.propertyType),\n\t        required: schemaProperty.required,\n\t        min: schemaProperty.min,\n\t        max: schemaProperty.max,\n\t        owner: schemaProperty.owner,\n\t        unique: schemaProperty.unique,\n\t        writable: schemaProperty.writable,\n\t        constants: schemaProperty.constants,\n\t        ordered: Boolean(schemaProperty.ordered)\n\t    };\n\t\n\t    function getReferenceTypeFrom(property) {\n\t        if (property.href) {\n\t            return property.href.split('/').pop();\n\t        }\n\t\n\t        return undefined;\n\t    }\n\t\n\t    // Add a referenceType to be able to get a hold of the reference objects model.\n\t    if (validationDetails.type === 'REFERENCE' || validationDetails.type === 'COLLECTION' && schemaProperty.itemPropertyType === 'REFERENCE') {\n\t        validationDetails.referenceType = getReferenceTypeFrom(schemaProperty);\n\t    }\n\t\n\t    if (propertyName) {\n\t        validationObject[propertyName] = validationDetails; // eslint-disable-line no-param-reassign\n\t    }\n\t}\n\t\n\tfunction createValidations(schemaProperties) {\n\t    var validationsObject = {};\n\t    var createModelPropertyOn = (0, _libUtils.curry)(createValidationSetting, validationsObject);\n\t\n\t    (schemaProperties || []).forEach(createModelPropertyOn);\n\t\n\t    return validationsObject;\n\t}\n\t\n\tfunction shouldBeModelCollectionProperty(model, models) {\n\t    return function shouldBeModelCollectionPropertyIterator(modelProperty) {\n\t        return model && models && model.modelDefinition && model.modelDefinition.modelValidations && model.modelDefinition.modelValidations[modelProperty] && model.modelDefinition.modelValidations[modelProperty].type === 'COLLECTION' && models.hasOwnProperty(model.modelDefinition.modelValidations[modelProperty].referenceType);\n\t    };\n\t}\n\t\n\tfunction isAnUpdate(modelToCheck) {\n\t    return Boolean(modelToCheck.id);\n\t}\n\t\n\t/**\n\t * @class ModelDefinition\n\t *\n\t * @description\n\t * Definition of a Model. Basically this object contains the meta data related to the Model. Like `name`, `apiEndPoint`, `modelValidation`, etc.\n\t * It also has methods to create and load Models that are based on this definition. The Data element `ModelDefinition` would be used to create Data Element `Model`s\n\t *\n\t * Note: ModelDefinition has a property `api` that is used for the communication with the dhis2 api. The value of this\n\t * property is an instance of `Api`.\n\t */\n\t\n\tvar ModelDefinition = (function () {\n\t    function ModelDefinition(modelName, modelNamePlural, modelOptions, properties, validations, attributes, authorities) {\n\t        _classCallCheck(this, ModelDefinition);\n\t\n\t        (0, _libCheck.checkType)(modelName, 'string');\n\t        (0, _libCheck.checkType)(modelNamePlural, 'string', 'Plural');\n\t\n\t        (0, _libUtils.addLockedProperty)(this, 'name', modelName);\n\t        (0, _libUtils.addLockedProperty)(this, 'plural', modelNamePlural);\n\t        (0, _libUtils.addLockedProperty)(this, 'isShareable', modelOptions && modelOptions.shareable || false);\n\t        (0, _libUtils.addLockedProperty)(this, 'isMetaData', modelOptions && modelOptions.metadata || false);\n\t        (0, _libUtils.addLockedProperty)(this, 'apiEndpoint', modelOptions && modelOptions.apiEndpoint);\n\t        (0, _libUtils.addLockedProperty)(this, 'javaClass', modelOptions && modelOptions.klass);\n\t        (0, _libUtils.addLockedProperty)(this, 'identifiableObject', modelOptions && modelOptions.identifiableObject);\n\t        (0, _libUtils.addLockedProperty)(this, 'modelProperties', properties);\n\t        (0, _libUtils.addLockedProperty)(this, 'modelValidations', validations);\n\t        (0, _libUtils.addLockedProperty)(this, 'attributeProperties', attributes);\n\t        (0, _libUtils.addLockedProperty)(this, 'authorities', authorities);\n\t\n\t        this.filters = _Filters2['default'].getFilters(this);\n\t    }\n\t\n\t    _createClass(ModelDefinition, [{\n\t        key: 'filter',\n\t        value: function filter() {\n\t            return this.clone().filters;\n\t        }\n\t\n\t        /**\n\t         * @method create\n\t         *\n\t         * @param {Object} [data] Datavalues that should be loaded into the model.\n\t         *\n\t         * @returns {Model} Returns the newly created model instance.\n\t         *\n\t         * @description\n\t         * Creates a fresh Model instance based on the `ModelDefinition`. If data is passed into the method that\n\t         * data will be loaded into the matching properties of the model.\n\t         *\n\t         * ```js\n\t         * dataElement.create({name: 'ANC', id: 'd2sf33s3ssf'});\n\t         * ```\n\t         */\n\t    }, {\n\t        key: 'create',\n\t        value: function create(data) {\n\t            var model = _Model2['default'].create(this);\n\t            var validations = model.modelDefinition.modelValidations;\n\t            var models = _ModelDefinitions2['default'].getModelDefinitions();\n\t            var dataValues = Object.assign({}, data);\n\t\n\t            if (data) {\n\t                // Set the data values onto the model directly\n\t                Object.keys(model).forEach(function (modelProperty) {\n\t                    var referenceType = validations[modelProperty].hasOwnProperty('referenceType') && validations[modelProperty].referenceType || models.hasOwnProperty(modelProperty) && modelProperty;\n\t\n\t                    // For collections of objects, create ModelCollectionProperties rather than plain arrays\n\t                    if (referenceType && models.hasOwnProperty(referenceType) && Array.isArray(data[modelProperty])) {\n\t                        // Object properties that are not themselves instances of models need special handling because\n\t                        // we can't turn them into ModelCollectionProperties\n\t                        // TODO: Proper generic handling of translations\n\t                        if (modelProperty === 'translations' || modelProperty === 'greyedFields') {\n\t                            dataValues[modelProperty] = data[modelProperty];\n\t                        } else {\n\t                            dataValues[modelProperty] = _ModelCollectionProperty2['default'].create(model, models[referenceType], data[modelProperty].map(function (d) {\n\t                                return models[referenceType].create(d);\n\t                            }));\n\t                        }\n\t                    }\n\t                    model.dataValues[modelProperty] = dataValues[modelProperty];\n\t                });\n\t            } else {\n\t                (function () {\n\t                    // Create empty ModelCollectionProperties for models without data.\n\t                    Object.keys(model).filter(shouldBeModelCollectionProperty(model, models)).forEach(function (modelProperty) {\n\t                        var referenceType = model.modelDefinition.modelValidations[modelProperty].referenceType;\n\t\n\t                        model.dataValues[modelProperty] = _ModelCollectionProperty2['default'].create(model, models[referenceType], []);\n\t                    });\n\t\n\t                    // When no initial values are provided we are dealing with a new Model. For some properties there are\n\t                    // implicit default values that should be set. DHIS2 has some default values for models that would implicitly\n\t                    // be set when omitting sending a value on POST, we'll set these properties to their default values so they\n\t                    // are reflected in read operations on the model and to make them more transparent.\n\t                    var defaultValues = (0, _config.getDefaultValuesForModelType)(model.modelDefinition.name);\n\t                    var checkForModelProperty = shouldBeModelCollectionProperty(model, models);\n\t\n\t                    Object.keys(model).filter(function (modelProperty) {\n\t                        return !checkForModelProperty(modelProperty);\n\t                    }).forEach(function (modelProperty) {\n\t                        model.dataValues[modelProperty] = defaultValues[modelProperty];\n\t                    });\n\t                })();\n\t            }\n\t\n\t            return model;\n\t        }\n\t    }, {\n\t        key: 'clone',\n\t        value: function clone() {\n\t            var ModelDefinitionPrototype = Object.getPrototypeOf(this);\n\t            var priorFilters = this.filters.filters;\n\t            var clonedDefinition = Object.create(ModelDefinitionPrototype);\n\t\n\t            clonedDefinition = (0, _libUtils.copyOwnProperties)(clonedDefinition, this);\n\t            clonedDefinition.filters = _Filters2['default'].getFilters(clonedDefinition);\n\t            clonedDefinition.filters.filters = priorFilters.map(function (filter) {\n\t                return filter;\n\t            });\n\t\n\t            return clonedDefinition;\n\t        }\n\t\n\t        /**\n\t         * @method get\n\t         *\n\t         * @param {String} identifier\n\t         * @param {Object} [queryParams={fields: ':all'}] Query parameters that should be passed to the GET query.\n\t         * @returns {Promise} Resolves with a `Model` instance or an error message.\n\t         *\n\t         * @description\n\t         * Get a `Model` instance from the api loaded with data that relates to `identifier`.\n\t         * This will do an API call and return a Promise that resolves with a `Model` or rejects with the api error message.\n\t         *\n\t         * ```js\n\t         * //Do a get request for the dataElement with given id (d2sf33s3ssf) and print it's name\n\t         * //when that request is complete and the model is loaded.\n\t         * dataElement.get('d2sf33s3ssf')\n\t         *   .then(model => console.log(model.name));\n\t         * ```\n\t         */\n\t    }, {\n\t        key: 'get',\n\t        value: function get(identifier) {\n\t            var _this = this;\n\t\n\t            var queryParams = arguments.length <= 1 || arguments[1] === undefined ? { fields: ':all,attributeValues[:all,attribute[id,name,displayName]]' } : arguments[1];\n\t\n\t            (0, _libCheck.checkDefined)(identifier, 'Identifier');\n\t\n\t            if (Array.isArray(identifier)) {\n\t                return this.list({ filter: ['id:in:[' + identifier.join(',') + ']'] });\n\t            }\n\t\n\t            // TODO: should throw error if API has not been defined\n\t            return this.api.get([this.apiEndpoint, identifier].join('/'), queryParams).then(function (data) {\n\t                return _this.create(data);\n\t            })['catch'](function (response) {\n\t                if (response.message) {\n\t                    return Promise.reject(response.message);\n\t                }\n\t\n\t                return Promise.reject(response);\n\t            });\n\t        }\n\t\n\t        /**\n\t         * @method list\n\t         *\n\t         * @param {Object} [queryParams={fields: ':all'}] Query parameters that should be passed to the GET query.\n\t         * @returns {Promise} ModelCollection collection of models objects of the `ModelDefinition` type.\n\t         *\n\t         * @description\n\t         * Loads a list of models.\n\t         *\n\t         * ```js\n\t         * // Loads a list of models and prints their name.\n\t         * dataElement.list()\n\t         *   .then(modelCollection => {\n\t         *     modelCollection.forEach(model => console.log(model.name));\n\t         *   });\n\t         * ```\n\t         */\n\t    }, {\n\t        key: 'list',\n\t        value: function list() {\n\t            var _this2 = this;\n\t\n\t            var queryParams = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t            var definedFilters = this.filters.getFilters();\n\t            // FIXME: Looks like when specific filters are defined the model.filter() filters are not applied (they should probably be merged)\n\t            if (!(0, _libCheck.isDefined)(queryParams.filter) && definedFilters.length) {\n\t                queryParams.filter = definedFilters; // eslint-disable-line no-param-reassign\n\t            }\n\t\n\t            return this.api.get(this.apiEndpoint, Object.assign({ fields: ':all' }, queryParams)).then(function (responseData) {\n\t                return _ModelCollection2['default'].create(_this2, responseData[_this2.plural].map(function (data) {\n\t                    return _this2.create(data);\n\t                }), responseData.pager);\n\t            });\n\t        }\n\t\n\t        /**\n\t         * @method save\n\t         *\n\t         * @param {Model} model The model that should be saved to the server.\n\t         * @returns {Promise} A promise which resolves when the save was successful\n\t         * or rejects when it failed. The promise will resolve with the data that is\n\t         * returned from the server.\n\t         *\n\t         * @description\n\t         * This method is used by the `Model` instances to save the model when calling `model.save()`.\n\t         *\n\t         * @note {warning} This should generally not be called directly.\n\t         */\n\t        // TODO: check the return status of the save to see if it was actually successful and not ignored\n\t    }, {\n\t        key: 'save',\n\t        value: function save(model) {\n\t            if (isAnUpdate(model)) {\n\t                var jsonPayload = _helpersJson.getOwnedPropertyJSON.bind(this)(model);\n\t                var updateUrl = (0, _libUtils.updateAPIUrlWithBaseUrlVersionNumber)(model.dataValues.href, this.api.baseUrl);\n\t\n\t                // Save the existing model\n\t                return this.api.update(updateUrl, jsonPayload, true);\n\t            }\n\t\n\t            return this.saveNew(model);\n\t        }\n\t    }, {\n\t        key: 'saveNew',\n\t        value: function saveNew(model) {\n\t            var jsonPayload = _helpersJson.getOwnedPropertyJSON.bind(this)(model);\n\t\n\t            // Its a new object\n\t            return this.api.post(this.apiEndpoint, jsonPayload);\n\t        }\n\t\n\t        /**\n\t         * @method getOwnedPropertyNames\n\t         *\n\t         * @returns {String[]} Returns an array of property names.\n\t         *\n\t         * @description\n\t         * This method returns a list of property names that that are defined\n\t         * as \"owner\" properties on this schema. This means these properties are used\n\t         * when saving the model to the server.\n\t         *\n\t         * ```js\n\t         * dataElement.getOwnedPropertyNames()\n\t         * ```\n\t         */\n\t    }, {\n\t        key: 'getOwnedPropertyNames',\n\t        value: function getOwnedPropertyNames() {\n\t            var _this3 = this;\n\t\n\t            return Object.keys(this.modelValidations).filter(function (propertyName) {\n\t                return _this3.modelValidations[propertyName].owner;\n\t            });\n\t        }\n\t\n\t        /**\n\t         * @method delete\n\t         *\n\t         * @returns {Promise} Returns a promise to the deletion operation\n\t         *\n\t         * @description\n\t         * This method is used by the `Model` instances to delete the model when calling `model.delete()`.\n\t         *\n\t         * @note {warning} This should generally not be called directly.\n\t         */\n\t    }, {\n\t        key: 'delete',\n\t        value: function _delete(model) {\n\t            if (model.dataValues.href) {\n\t                return this.api['delete'](model.dataValues.href);\n\t            }\n\t            return this.api['delete']([model.modelDefinition.apiEndpoint, model.dataValues.id].join('/'));\n\t        }\n\t\n\t        /**\n\t         * @method createFromSchema\n\t         * @static\n\t         *\n\t         * @param {Object} schema A schema definition received from the web api (/api/schemas)\n\t         * @param {Object[]} attributes A list of attribute objects that describe custom attributes (/api/attributes)\n\t         *\n\t         * @returns {ModelDefinition} Frozen model definition object.\n\t         *\n\t         * @description\n\t         * This method creates a new `ModelDefinition` based on a JSON structure called\n\t         * a schema. A schema represents the structure of a domain model as it is\n\t         * required by DHIS. Since these schemas can not be altered on the server from\n\t         * the modelDefinition is frozen to prevent accidental changes to the definition.\n\t         *\n\t         * ```js\n\t         * ModelDefinition.createFromSchema(schemaDefinition, attributes);\n\t         * ```\n\t         *\n\t         * @note {info} An example of a schema definition can be found on\n\t         * https://apps.dhis2.org/demo/api/schemas/dataElement\n\t         */\n\t    }], [{\n\t        key: 'createFromSchema',\n\t        value: function createFromSchema(schema) {\n\t            var attributes = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];\n\t\n\t            var ModelDefinitionClass = undefined;\n\t            (0, _libCheck.checkType)(schema, Object, 'Schema');\n\t\n\t            if (typeof ModelDefinition.specialClasses[schema.name] === 'function') {\n\t                ModelDefinitionClass = ModelDefinition.specialClasses[schema.name];\n\t            } else {\n\t                ModelDefinitionClass = ModelDefinition;\n\t            }\n\t\n\t            return Object.freeze(new ModelDefinitionClass(schema.name, schema.plural, schema, Object.freeze(createPropertiesObject(schema.properties)), Object.freeze(createValidations(schema.properties)), attributes.reduce(function (current, attributeDefinition) {\n\t                current[attributeDefinition.name] = attributeDefinition; // eslint-disable-line no-param-reassign\n\t                return current;\n\t            }, {}), schema.authorities));\n\t        }\n\t    }]);\n\t\n\t    return ModelDefinition;\n\t})();\n\t\n\tvar UserModelDefinition = (function (_ModelDefinition) {\n\t    _inherits(UserModelDefinition, _ModelDefinition);\n\t\n\t    function UserModelDefinition() {\n\t        _classCallCheck(this, UserModelDefinition);\n\t\n\t        _get(Object.getPrototypeOf(UserModelDefinition.prototype), 'constructor', this).apply(this, arguments);\n\t    }\n\t\n\t    _createClass(UserModelDefinition, [{\n\t        key: 'get',\n\t\n\t        // TODO: userCredentials should always be included, no matter what the query params, that is currently not the case\n\t        value: function get(identifier) {\n\t            var queryParams = arguments.length <= 1 || arguments[1] === undefined ? { fields: ':all,userCredentials[:owner]' } : arguments[1];\n\t\n\t            return _get(Object.getPrototypeOf(UserModelDefinition.prototype), 'get', this).call(this, identifier, queryParams);\n\t        }\n\t    }]);\n\t\n\t    return UserModelDefinition;\n\t})(ModelDefinition);\n\t\n\tvar DataSetModelDefinition = (function (_ModelDefinition2) {\n\t    _inherits(DataSetModelDefinition, _ModelDefinition2);\n\t\n\t    function DataSetModelDefinition() {\n\t        _classCallCheck(this, DataSetModelDefinition);\n\t\n\t        _get(Object.getPrototypeOf(DataSetModelDefinition.prototype), 'constructor', this).apply(this, arguments);\n\t    }\n\t\n\t    _createClass(DataSetModelDefinition, [{\n\t        key: 'create',\n\t        value: function create() {\n\t            var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t            var hasData = Boolean(Object.keys(data).length);\n\t\n\t            // Filter out the compulsoryDataElementOperands structure from the retrieved data\n\t            // This structure does not follow the convention of a typical reference. We can not create a proper\n\t            // ModelCollection for this collection.\n\t            var dataClone = Object.keys(data).filter(function (key) {\n\t                return key !== 'compulsoryDataElementOperands';\n\t            }).reduce(function (obj, key) {\n\t                obj[key] = data[key]; // eslint-disable-line no-param-reassign\n\t                return obj;\n\t            }, {});\n\t\n\t            // Create the model using the usual way of creating a model\n\t            // Only pass data when there is data in the object passed to the constructor. This will guarantee\n\t            // that the empty ModelCollections are created properly.\n\t            var model = _get(Object.getPrototypeOf(DataSetModelDefinition.prototype), 'create', this).call(this, hasData ? dataClone : undefined);\n\t\n\t            // Set the compulsoryDataElementOperands onto the dataValues so it will be included during the save operations\n\t            model.dataValues.compulsoryDataElementOperands = data.compulsoryDataElementOperands;\n\t\n\t            return model;\n\t        }\n\t    }]);\n\t\n\t    return DataSetModelDefinition;\n\t})(ModelDefinition);\n\t\n\tModelDefinition.specialClasses = {\n\t    user: UserModelDefinition,\n\t    dataSet: DataSetModelDefinition\n\t};\n\t\n\texports['default'] = ModelDefinition;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _libCheck = __webpack_require__(3);\n\t\n\t/**\n\t * @class ModelDefinitions\n\t *\n\t * @description\n\t * Contains all the `ModelDefinition`s that are available. The definitions are properties on the object.\n\t * This would be used as a main entry point to do any interaction.\n\t *\n\t * After calling the initialise function `d2({baseUrl: 'dhis/api'})` this object is the `models` property\n\t * that allows you to access\n\t *\n\t * ```js\n\t * models.dataElement.getList();\n\t * ```\n\t */\n\t\n\tvar ModelDefinitions = (function () {\n\t    function ModelDefinitions() {\n\t        _classCallCheck(this, ModelDefinitions);\n\t    }\n\t\n\t    // Model definitions singleton!\n\t\n\t    _createClass(ModelDefinitions, [{\n\t        key: 'add',\n\t\n\t        // TODO: Elaborate this documentation\n\t        /**\n\t         * @method add\n\t         * @param {ModelDefinition} modelDefinition Add a model definition to the definitions collection\n\t         *\n\t         * @description\n\t         * This will allow you to add your own custom ModelDefinitions.\n\t         *\n\t         * The Definition object should have the following properties\n\t         * `modelName, modelNamePlural, modelOptions, properties, validations`\n\t         *\n\t         * ```js\n\t         * models.add({name: 'MyDefinition', plural: 'MyDefinitions', endPointname: '/myDefinition'});\n\t         * ```\n\t         */\n\t        value: function add(modelDefinition) {\n\t            try {\n\t                (0, _libCheck.checkType)(modelDefinition.name, 'string');\n\t            } catch (e) {\n\t                throw new Error('Name should be set on the passed ModelDefinition to add one');\n\t            }\n\t\n\t            if (this[modelDefinition.name]) {\n\t                throw new Error(['Model', modelDefinition.name, 'already exists'].join(' '));\n\t            }\n\t            this[modelDefinition.name] = modelDefinition;\n\t\n\t            if ((0, _libCheck.isType)(modelDefinition.plural, 'string')) {\n\t                this[modelDefinition.plural] = modelDefinition;\n\t            }\n\t        }\n\t\n\t        /**\n\t         * @method mapThroughDefinitions\n\t         *\n\t         * @param {Function} transformer Transformer function that will be run for each `ModelDefinition`\n\t         * @returns {Array} Array with the `ModelDefinition` objects.\n\t         *\n\t         * @description\n\t         * Map through the modelDefinitions like you would with a simple `Array.map()`\n\t         *\n\t         * ```js\n\t         * models.mapThroughDefinitions(definition => console.log(definition.name);\n\t         * ```\n\t         *\n\t         * @note {info} When mapping through the definition list `transformer` is called with the just the definition\n\t         * Unlike other map functions, no index or the full object is being passed.\n\t         *\n\t         * @note {warn} The resulting array contains references to the actual objects. It does not work like immutable array functions.\n\t         *\n\t         */\n\t    }, {\n\t        key: 'mapThroughDefinitions',\n\t        value: function mapThroughDefinitions(transformer) {\n\t            var result = [];\n\t            var modelDefinition = undefined;\n\t\n\t            (0, _libCheck.checkType)(transformer, 'function', 'transformer');\n\t\n\t            for (modelDefinition in this) {\n\t                if (this.hasOwnProperty(modelDefinition) && !(this[modelDefinition].plural === modelDefinition)) {\n\t                    result.push(transformer(this[modelDefinition]));\n\t                }\n\t            }\n\t\n\t            return result;\n\t        }\n\t    }]);\n\t\n\t    return ModelDefinitions;\n\t})();\n\t\n\tfunction getModelDefinitions() {\n\t    if (getModelDefinitions.modelDefinitions) {\n\t        return getModelDefinitions.modelDefinitions;\n\t    }\n\t    return getModelDefinitions.modelDefinitions = new ModelDefinitions();\n\t}\n\t\n\tModelDefinitions.getModelDefinitions = getModelDefinitions;\n\t\n\texports['default'] = ModelDefinitions;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _libCheck = __webpack_require__(3);\n\t\n\tvar _libUtils = __webpack_require__(1);\n\t\n\tvar _Model = __webpack_require__(13);\n\t\n\tvar _Model2 = _interopRequireDefault(_Model);\n\t\n\tvar _ModelDefinition = __webpack_require__(14);\n\t\n\tvar _ModelDefinition2 = _interopRequireDefault(_ModelDefinition);\n\t\n\tvar _pagerPager = __webpack_require__(17);\n\t\n\tvar _pagerPager2 = _interopRequireDefault(_pagerPager);\n\t\n\tfunction _throwIfContainsOtherThanModelObjects(values) {\n\t    if (values && values[Symbol.iterator]) {\n\t        var toCheck = [].concat(_toConsumableArray(values));\n\t        toCheck.forEach(function (value) {\n\t            if (!(value instanceof _Model2['default'])) {\n\t                (0, _libUtils.throwError)('Values of a ModelCollection must be instances of Model');\n\t            }\n\t        });\n\t    }\n\t}\n\t\n\tfunction _throwIfContainsModelWithoutUid(values) {\n\t    if (values && values[Symbol.iterator]) {\n\t        var toCheck = [].concat(_toConsumableArray(values));\n\t        toCheck.forEach(function (value) {\n\t            if (!(0, _libCheck.isValidUid)(value.id)) {\n\t                (0, _libUtils.throwError)('Can not add a Model without id to a ModelCollection');\n\t            }\n\t        });\n\t    }\n\t}\n\t\n\t/**\n\t * @class ModelCollection\n\t *\n\t * @description\n\t * Collection of `Model` objects that can be interacted upon. Can contain a pager object to easily navigate\n\t * pages within the system.\n\t */\n\t\n\tvar ModelCollection = (function () {\n\t\n\t    /**\n\t     * @constructor\n\t     *\n\t     * @param {ModelDefinition} modelDefinition The `ModelDefinition` that this collection is for. This defines the type of models that\n\t     * are allowed to be added to the collection.\n\t     * @param {Model[]} values Initial values that should be added to the collection.\n\t     * @param {Object} pagerData Object with pager data. This object contains data that will be put into the `Pager` instance.\n\t     *\n\t     * @description\n\t     *\n\t     * Creates a new `ModelCollection` object based on the passed `modelDefinition`. Additionally values can be added by passing\n\t     * `Model` objects in the `values` parameter. The collection also exposes a pager object which can be used to navigate through\n\t     * the pages in the collection. For more information see the `Pager` class.\n\t     */\n\t\n\t    function ModelCollection(modelDefinition, values, pagerData) {\n\t        var _this = this;\n\t\n\t        _classCallCheck(this, ModelCollection);\n\t\n\t        (0, _libCheck.checkType)(modelDefinition, _ModelDefinition2['default']);\n\t        /**\n\t         * @property {ModelDefinition} modelDefinition The `ModelDefinition` that this collection is for. This defines the type of models that\n\t         * are allowed to be added to the collection.\n\t         */\n\t        this.modelDefinition = modelDefinition;\n\t\n\t        /**\n\t         * @property {Pager} pager Pager object that is created from the pagerData that was passed when the collection was constructed. If no pager data was present\n\t         * the pager will have default values.\n\t         */\n\t        this.pager = new _pagerPager2['default'](pagerData, modelDefinition);\n\t\n\t        // We can not extend the Map object right away in v8 contexts.\n\t        this.valuesContainerMap = new Map();\n\t        this[Symbol.iterator] = this.valuesContainerMap[Symbol.iterator].bind(this.valuesContainerMap);\n\t\n\t        _throwIfContainsOtherThanModelObjects(values);\n\t        _throwIfContainsModelWithoutUid(values);\n\t\n\t        // Add the values separately as not all Iterators return the same values\n\t        if ((0, _libCheck.isArray)(values)) {\n\t            values.forEach(function (value) {\n\t                return _this.valuesContainerMap.set(value.id, value);\n\t            });\n\t        }\n\t    }\n\t\n\t    /**\n\t     * @property {Number} size The number of Model objects that are in the collection.\n\t     *\n\t     * @description\n\t     * Contains the number of Model objects that are in this collection. If the collection is a collection with a pager. This\n\t     * does not take into account all the items in the database. Therefore when a pager is present on the collection\n\t     * the size will return the items on that page. To get the total number of items consult the pager.\n\t     */\n\t\n\t    _createClass(ModelCollection, [{\n\t        key: 'add',\n\t\n\t        /**\n\t         * @method add\n\t         *\n\t         * @param {Model} value Model instance to add to the collection.\n\t         * @returns {ModelCollection} Returns itself for chaining purposes.\n\t         *\n\t         * @throws {Error} When the passed value is not an instance of `Model`\n\t         * @throws {Error} Throws error when the passed value does not have a valid id.\n\t         *\n\t         * @description\n\t         * Adds a Model instance to the collection. The model is checked if it is a correct instance of `Model` and if it has\n\t         * a valid id. A valid id is a uid string of 11 alphanumeric characters.\n\t         */\n\t        value: function add(value) {\n\t            _throwIfContainsOtherThanModelObjects([value]);\n\t            _throwIfContainsModelWithoutUid([value]);\n\t\n\t            this.set(value.id, value);\n\t            return this;\n\t        }\n\t\n\t        /**\n\t         * @method toArray\n\t         *\n\t         * @returns {Array} Returns the values of the collection as an array.\n\t         *\n\t         * @description\n\t         * If working with the Map type object is inconvenient this method can be used to return the values\n\t         * of the collection as an Array object.\n\t         */\n\t    }, {\n\t        key: 'toArray',\n\t        value: function toArray() {\n\t            var resultArray = [];\n\t\n\t            this.forEach(function (model) {\n\t                resultArray.push(model);\n\t            });\n\t\n\t            return resultArray;\n\t        }\n\t    }, {\n\t        key: 'clear',\n\t\n\t        /**\n\t         * @method clear\n\t         *\n\t         * @returns {this} Returns itself for chaining purposes;\n\t         *\n\t         * @description\n\t         * Clear the collection and remove all it's values.\n\t         */\n\t        // TODO: Reset the pager?\n\t        value: function clear() {\n\t            return this.valuesContainerMap.clear.apply(this.valuesContainerMap);\n\t        }\n\t    }, {\n\t        key: 'delete',\n\t        value: function _delete() {\n\t            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t                args[_key] = arguments[_key];\n\t            }\n\t\n\t            return this.valuesContainerMap['delete'].apply(this.valuesContainerMap, args);\n\t        }\n\t    }, {\n\t        key: 'entries',\n\t        value: function entries() {\n\t            return this.valuesContainerMap.entries.apply(this.valuesContainerMap);\n\t        }\n\t\n\t        // FIXME: This calls the forEach function with the values Map and not with the ModelCollection as the third argument\n\t    }, {\n\t        key: 'forEach',\n\t        value: function forEach() {\n\t            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n\t                args[_key2] = arguments[_key2];\n\t            }\n\t\n\t            return this.valuesContainerMap.forEach.apply(this.valuesContainerMap, args);\n\t        }\n\t    }, {\n\t        key: 'get',\n\t        value: function get() {\n\t            for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n\t                args[_key3] = arguments[_key3];\n\t            }\n\t\n\t            return this.valuesContainerMap.get.apply(this.valuesContainerMap, args);\n\t        }\n\t    }, {\n\t        key: 'has',\n\t        value: function has() {\n\t            for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n\t                args[_key4] = arguments[_key4];\n\t            }\n\t\n\t            return this.valuesContainerMap.has.apply(this.valuesContainerMap, args);\n\t        }\n\t    }, {\n\t        key: 'keys',\n\t        value: function keys() {\n\t            return this.valuesContainerMap.keys.apply(this.valuesContainerMap);\n\t        }\n\t    }, {\n\t        key: 'set',\n\t        value: function set() {\n\t            for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n\t                args[_key5] = arguments[_key5];\n\t            }\n\t\n\t            return this.valuesContainerMap.set.apply(this.valuesContainerMap, args);\n\t        }\n\t    }, {\n\t        key: 'values',\n\t        value: function values() {\n\t            return this.valuesContainerMap.values.apply(this.valuesContainerMap);\n\t        }\n\t    }, {\n\t        key: 'size',\n\t        get: function get() {\n\t            return this.valuesContainerMap.size;\n\t        }\n\t    }], [{\n\t        key: 'create',\n\t        value: function create(modelDefinition, values, pagerData) {\n\t            return new ModelCollection(modelDefinition, values, pagerData);\n\t        }\n\t    }, {\n\t        key: 'throwIfContainsOtherThanModelObjects',\n\t        value: function throwIfContainsOtherThanModelObjects(value) {\n\t            return _throwIfContainsOtherThanModelObjects(value);\n\t        }\n\t    }, {\n\t        key: 'throwIfContainsModelWithoutUid',\n\t        value: function throwIfContainsModelWithoutUid(value) {\n\t            return _throwIfContainsModelWithoutUid(value);\n\t        }\n\t    }]);\n\t\n\t    return ModelCollection;\n\t})();\n\t\n\texports['default'] = ModelCollection;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _libCheck = __webpack_require__(3);\n\t\n\t/**\n\t * @class Pager\n\t *\n\t * @description\n\t * Pager object that can be used to navigate pages within a `Modelcollection`\n\t */\n\t\n\tvar Pager = (function () {\n\t\n\t  /**\n\t   * @constructor\n\t   *\n\t   * @param {Object} [pager={page: 1, pageCount: 1}] Paging information object.\n\t   * @param {Object} [pagingHandler={list: () => Promise.reject('No handler available')}] Paging handler object. The requirement for this object is that it has a list method.\n\t   *\n\t   * @description\n\t   * Returns a newly created pager object with methods to navigate pages.\n\t   */\n\t\n\t  function Pager() {\n\t    var pager = arguments.length <= 0 || arguments[0] === undefined ? { page: 1, pageCount: 1 } : arguments[0];\n\t    var pagingHandler = arguments.length <= 1 || arguments[1] === undefined ? { list: function list() {\n\t        return Promise.reject('No handler available');\n\t      } } : arguments[1];\n\t\n\t    _classCallCheck(this, Pager);\n\t\n\t    /**\n\t     * @property {number} page Current page number\n\t     */\n\t    this.page = pager.page;\n\t\n\t    /**\n\t     * @property {number} pageCount The total number of pages available\n\t     */\n\t    this.pageCount = pager.pageCount;\n\t\n\t    /**\n\t     * @property {number} total The total number of items available.\n\t     *\n\t     * @description\n\t     * This represents the total number of items available in the system. Note it is not the number of items\n\t     * on the current page.\n\t     */\n\t    this.total = pager.total;\n\t\n\t    /**\n\t     * @property {string} nextPage The url to the next page.\n\t     *\n\t     * @description\n\t     * If there is no next page then this will be undefined.\n\t     */\n\t    this.nextPage = pager.nextPage;\n\t\n\t    /**\n\t     * @property {string} prevPage The url to the previous page\n\t     *\n\t     * @description\n\t     * If there is no previous page then this will be undefined.\n\t     */\n\t    this.prevPage = pager.prevPage;\n\t\n\t    this.pagingHandler = pagingHandler;\n\t  }\n\t\n\t  /**\n\t   * @method hasNextPage\n\t   *\n\t   * @returns {Boolean} Result is true when there is a next page, false when there is not.\n\t   *\n\t   * @description\n\t   * Check whether there is a next page.\n\t   */\n\t\n\t  _createClass(Pager, [{\n\t    key: 'hasNextPage',\n\t    value: function hasNextPage() {\n\t      return (0, _libCheck.isDefined)(this.nextPage);\n\t    }\n\t\n\t    /**\n\t     * @method hasPreviousPage\n\t     *\n\t     * @returns {Boolean} Result is true when there is a previous page, false when there is not.\n\t     *\n\t     * @description\n\t     * Check whether there is a previous page.\n\t     */\n\t  }, {\n\t    key: 'hasPreviousPage',\n\t    value: function hasPreviousPage() {\n\t      return (0, _libCheck.isDefined)(this.prevPage);\n\t    }\n\t\n\t    /**\n\t     * @method getNextPage\n\t     *\n\t     * @returns {Promise} Promise that resolves with a new `ModelCollection` containing the next page's data. Or rejects with\n\t     * a string when there is no next page for this collection or when the request for the next page failed.\n\t     */\n\t  }, {\n\t    key: 'getNextPage',\n\t    value: function getNextPage() {\n\t      if (this.hasNextPage()) {\n\t        return this.goToPage(this.page + 1);\n\t      }\n\t      return Promise.reject('There is no next page for this collection');\n\t    }\n\t\n\t    /**\n\t     * @method getPreviousPage\n\t     *\n\t     * @returns {Promise} Promise that resolves with a new `ModelCollection` containing the previous page's data. Or rejects with\n\t     * a string when there is no previous page for this collection or when the request for the previous page failed.\n\t     */\n\t  }, {\n\t    key: 'getPreviousPage',\n\t    value: function getPreviousPage() {\n\t      if (this.hasPreviousPage()) {\n\t        return this.goToPage(this.page - 1);\n\t      }\n\t      return Promise.reject('There is no previous page for this collection');\n\t    }\n\t\n\t    /**\n\t     * @method goToPage\n\t     *\n\t     * @param {Number} pageNr The number of the page you wish to navigate to.\n\t     * @returns {Promise} Promise that resolves with a new `ModelCollection` containing the data for the requested page.\n\t     */\n\t    // TODO: Throwing the errors here is not really consistent with the rejection of promises for the getNextPage and getPreviousPage\n\t  }, {\n\t    key: 'goToPage',\n\t    value: function goToPage(pageNr) {\n\t      if (pageNr < 1) {\n\t        throw new Error('PageNr can not be less than 1');\n\t      }\n\t      if (pageNr > this.pageCount) {\n\t        throw new Error('PageNr can not be larger than the total page count of ' + this.pageCount);\n\t      }\n\t\n\t      return this.pagingHandler.list({ page: pageNr });\n\t    }\n\t  }]);\n\t\n\t  return Pager;\n\t})();\n\t\n\texports['default'] = Pager;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar _ModelCollection2 = __webpack_require__(16);\n\t\n\tvar _ModelCollection3 = _interopRequireDefault(_ModelCollection2);\n\t\n\t/**\n\t * @class ModelCollectionProperty\n\t *\n\t * @description\n\t * A ModelCollectionProperty instance is a ModelCollection that is a property of\n\t * a model instance. ModelCollectionProperties can be operated on independently of\n\t * the Model that owns them.\n\t */\n\t\n\tvar ModelCollectionProperty = (function (_ModelCollection) {\n\t    _inherits(ModelCollectionProperty, _ModelCollection);\n\t\n\t    /**\n\t     * @constructor\n\t     *\n\t     * @param {Model} parentModel The `Model` of the parent of this `ModelCollectionProperty`\n\t     * @param {ModelDefinition} modelDefinition The `ModelDefinition` that this `ModelCollection` property is for\n\t     * @param {Model[]} values Initial values that should be added to the collection property\n\t     *\n\t     * @description\n\t     *\n\t     * Creates a new `ModelCollectionProperty` object. This is a subclass of `ModelCollection`, which adds logic\n\t     * for handling adding and removing elements to the collection and saving the changes to the API.\n\t     */\n\t\n\t    function ModelCollectionProperty(parentModel, modelDefinition, values) {\n\t        _classCallCheck(this, ModelCollectionProperty);\n\t\n\t        _get(Object.getPrototypeOf(ModelCollectionProperty.prototype), 'constructor', this).call(this, modelDefinition, values, undefined);\n\t\n\t        // Dirty bit\n\t        this.dirty = false;\n\t        // Keep track of added and removed elements\n\t        this.added = new Set();\n\t        this.removed = new Set();\n\t\n\t        // Store the parent model of this collection so we can construct the URI for API calls\n\t        this.parentModel = parentModel;\n\t    }\n\t\n\t    /**\n\t     * @method add\n\t     *\n\t     * @param {Model} value Model instance to add to the collection.\n\t     * @returns {ModelCollectionProperty} Returns itself for chaining purposes.\n\t     *\n\t     * @description\n\t     * Calls the `add` method on the parent `ModelCollection` class, and then performs checks to keep track of\n\t     * what, if any, changes that have been made to the collection.\n\t     */\n\t\n\t    _createClass(ModelCollectionProperty, [{\n\t        key: 'add',\n\t        value: function add(value) {\n\t            // TODO: Allow adding plain ID's that aren't Model instances maybe?\n\t            if (this.valuesContainerMap.has(value.id)) {\n\t                return this;\n\t            }\n\t\n\t            _get(Object.getPrototypeOf(ModelCollectionProperty.prototype), 'add', this).call(this, value);\n\t\n\t            if (this.removed.has(value.id)) {\n\t                this.removed['delete'](value.id);\n\t            } else {\n\t                this.added.add(value.id);\n\t            }\n\t\n\t            this.updateDirty();\n\t            return this;\n\t        }\n\t\n\t        /**\n\t         * @method remove\n\t         *\n\t         * @param {Model} value Model instance to remove from the collection.\n\t         * @returns {ModelCollectionProperty} Returns itself for chaining purposes.\n\t         *\n\t         * @description\n\t         * If the collection contains an object with the same id as the `value` parameter, that object is removed\n\t         * from the collection. Checks are then performed to keep track of what, if any, changes that have been\n\t         * made to the collection.\n\t         */\n\t    }, {\n\t        key: 'remove',\n\t        value: function remove(value) {\n\t            // TODO: Allow removing plain ID's that aren't Model instances maybe?\n\t            _ModelCollection3['default'].throwIfContainsOtherThanModelObjects([value]);\n\t            _ModelCollection3['default'].throwIfContainsModelWithoutUid([value]);\n\t\n\t            if (this['delete'](value.id)) {\n\t                if (this.added.has(value.id)) {\n\t                    this.added['delete'](value.id);\n\t                } else {\n\t                    this.removed.add(value.id);\n\t                }\n\t            }\n\t\n\t            this.updateDirty();\n\t            return this;\n\t        }\n\t\n\t        /**\n\t         * @method updateDirty\n\t         *\n\t         * @returns {boolean} True if the collection has changed, false otherwise.\n\t         *\n\t         * @description\n\t         * Checks whether any changes have been made to the collection, and updates the dirty flag accordingly.\n\t         */\n\t    }, {\n\t        key: 'updateDirty',\n\t        value: function updateDirty() {\n\t            this.dirty = this.added.size > 0 || this.removed.size > 0;\n\t            return this.dirty;\n\t        }\n\t\n\t        /**\n\t         * @method resetDirtyState\n\t         *\n\t         * @description\n\t         * Sets dirty=false and resets the added and removed sets used for dirty state tracking.\n\t         */\n\t    }, {\n\t        key: 'resetDirtyState',\n\t        value: function resetDirtyState() {\n\t            this.dirty = false;\n\t            this.added = new Set();\n\t            this.removed = new Set();\n\t        }\n\t\n\t        /**\n\t         * @method save\n\t         *\n\t         * @returns {Promise} A `Promise`\n\t         *\n\t         * @description\n\t         * If any changes have been made to the collection, these changes will be submitted to the API. The returned\n\t         * promise will resolve successfully when the changes have been saved to the API, and will be rejected if\n\t         * either the changes weren't saved or if there were no changes to save.\n\t         */\n\t    }, {\n\t        key: 'save',\n\t        value: function save() {\n\t            var _this = this;\n\t\n\t            // TODO: Use Promise constructor and call resolve/reject as appropriate\n\t            if (!this.dirty) {\n\t                return Promise.reject('Nothing to save!');\n\t            }\n\t\n\t            var api = this.modelDefinition.api;\n\t\n\t            var queries = [];\n\t\n\t            if (this.added.size) {\n\t                Array.from(this.added).forEach(function (id) {\n\t                    queries.push(api.post([_this.parentModel.href, _this.modelDefinition.plural, id].join('/')));\n\t                });\n\t            }\n\t            if (this.removed.size) {\n\t                Array.from(this.removed).forEach(function (id) {\n\t                    queries.push(api['delete']([_this.parentModel.href, _this.modelDefinition.plural, id].join('/')));\n\t                });\n\t            }\n\t\n\t            return Promise.all(queries).then(function () {\n\t                _this.added = new Set();\n\t                _this.removed = new Set();\n\t                _this.updateDirty();\n\t                return Promise.resolve();\n\t            })['catch'](function (err) {\n\t                return Promise.reject('Failed to alter collection:', err);\n\t            });\n\t        }\n\t\n\t        /**\n\t         * @method create\n\t         *\n\t         * @param {Model} parentModel\n\t         * @param {ModelDefinition} modelDefinition\n\t         * @param {Model[]} values\n\t         * @returns {ModelCollectionProperty}\n\t         *\n\t         * @description\n\t         * See `ModelCollectionProperty.constructor`.\n\t         */\n\t    }], [{\n\t        key: 'create',\n\t        value: function create(parentModel, modelDefinition, values) {\n\t            return new ModelCollectionProperty(parentModel, modelDefinition, values);\n\t        }\n\t    }]);\n\t\n\t    return ModelCollectionProperty;\n\t})(_ModelCollection3['default']);\n\t\n\texports['default'] = ModelCollectionProperty;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _utils = __webpack_require__(1);\n\t\n\tvar _check = __webpack_require__(3);\n\t\n\tvar SchemaTypes = (function () {\n\t    function SchemaTypes() {\n\t        _classCallCheck(this, SchemaTypes);\n\t    }\n\t\n\t    _createClass(SchemaTypes, [{\n\t        key: 'getTypes',\n\t        value: function getTypes() {\n\t            return ['TEXT', 'NUMBER', 'INTEGER', 'BOOLEAN', 'EMAIL', 'PASSWORD', 'URL', 'PHONENUMBER', 'GEOLOCATION', // TODO: Geo location could be an advanced type of 2 numbers / strings?\n\t            'COLOR', 'COMPLEX', 'COLLECTION', 'REFERENCE', 'DATE', 'COMPLEX', 'IDENTIFIER', 'CONSTANT'];\n\t        }\n\t    }, {\n\t        key: 'typeLookup',\n\t        value: function typeLookup(propertyType) {\n\t            if (this.getTypes().indexOf(propertyType) >= 0 && (0, _check.isString)(propertyType)) {\n\t                return propertyType;\n\t            }\n\t\n\t            return (0, _utils.throwError)(['Type from schema \"', propertyType, '\" not found available type list.'].join(''));\n\t        }\n\t    }]);\n\t\n\t    return SchemaTypes;\n\t})();\n\t\n\texports['default'] = new SchemaTypes();\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _libCheck = __webpack_require__(3);\n\t\n\tvar _modelFilter = __webpack_require__(21);\n\t\n\tvar _modelFilter2 = _interopRequireDefault(_modelFilter);\n\t\n\tvar Filters = (function () {\n\t    function Filters(modelDefinition) {\n\t        _classCallCheck(this, Filters);\n\t\n\t        this.filters = [];\n\t        this.modelDefinition = modelDefinition;\n\t    }\n\t\n\t    _createClass(Filters, [{\n\t        key: 'on',\n\t        value: function on(propertyName) {\n\t            return _modelFilter2['default'].getFilter(this).on(propertyName);\n\t        }\n\t    }, {\n\t        key: 'add',\n\t        value: function add(filter) {\n\t            if (!(0, _libCheck.isType)(filter, _modelFilter2['default'])) {\n\t                throw new TypeError('filter should be an instance of Filter');\n\t            }\n\t            this.filters.push(filter);\n\t        }\n\t    }, {\n\t        key: 'list',\n\t        value: function list() {\n\t            return this.modelDefinition.list();\n\t        }\n\t    }, {\n\t        key: 'getFilters',\n\t        value: function getFilters() {\n\t            return this.filters.map(function (filter) {\n\t                return filter.getQueryParamFormat();\n\t            });\n\t        }\n\t    }, {\n\t        key: 'getReturn',\n\t        value: function getReturn() {\n\t            return this.modelDefinition;\n\t        }\n\t    }], [{\n\t        key: 'getFilters',\n\t        value: function getFilters(modelDefinition) {\n\t            return new Filters(modelDefinition);\n\t        }\n\t    }]);\n\t\n\t    return Filters;\n\t})();\n\t\n\texports['default'] = Filters;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _libCheck = __webpack_require__(3);\n\t\n\tvar FILTER_COMPARATORS = {\n\t    /**\n\t     * @method equals\n\t     * @returns {Filter} Returns the modified filter for chaining\n\t     *\n\t     * @description\n\t     * This method can be used to add a equals filter value\n\t     */\n\t    equals: 'eq',\n\t    /**\n\t     * @method like\n\t     * @returns {Filter} Returns the modified filter for chaining\n\t     *\n\t     * @description\n\t     * This method can be used to add a like filter value\n\t     */\n\t    like: 'like',\n\t    /**\n\t     * @method ilike\n\t     * @returns {Filter} Returns the modified filter for chaining\n\t     *\n\t     * @description\n\t     * This method can be used to add a ilike filter value\n\t     */\n\t    ilike: 'ilike',\n\t    notEqual: 'ne'\n\t};\n\t\n\t/**\n\t * @class Filter\n\t * @description\n\t * Filter class that can be used to build api endpoint filters using a semi-natural language style.\n\t */\n\t\n\tvar Filter = (function () {\n\t    /**\n\t     * @constructor\n\t     * @param {Filters} filters Filters list that this filter will be added to when it is completed.\n\t     */\n\t\n\t    function Filter(filters) {\n\t        _classCallCheck(this, Filter);\n\t\n\t        this.filters = filters;\n\t        this.propertyName = 'name';\n\t        this.comparator = 'like';\n\t        this.filterValue = undefined;\n\t    }\n\t\n\t    // Add the filters to the Filter prototype\n\t    // TODO: Change to for..of. Currently would break e2e tests because of polyfill\n\t\n\t    /**\n\t     * @method on\n\t     * @param {String} propertyName Property name that the filter should be applied on.\n\t     * @returns {Filter}\n\t     */\n\t\n\t    _createClass(Filter, [{\n\t        key: 'on',\n\t        value: function on(propertyName) {\n\t            (0, _libCheck.checkDefined)(propertyName, 'Property name to filter on');\n\t\n\t            this.propertyName = propertyName;\n\t            return this;\n\t        }\n\t    }, {\n\t        key: 'getQueryParamFormat',\n\t        value: function getQueryParamFormat() {\n\t            return [this.propertyName, this.comparator, this.filterValue].join(':');\n\t        }\n\t\n\t        /**\n\t         * @method getFilter\n\t         * @static\n\t         *\n\t         * @param {Filters} filters Filters list that this filter will be added to when it is completed.\n\t         *\n\t         * @returns A instance of the Filter class that can be used to create\n\t         * filters.\n\t         *\n\t         * @description\n\t         * Create a filter instance\n\t         */\n\t    }], [{\n\t        key: 'getFilter',\n\t        value: function getFilter(filters) {\n\t            return new Filter(filters);\n\t        }\n\t    }]);\n\t\n\t    return Filter;\n\t})();\n\t\n\tObject.keys(FILTER_COMPARATORS).forEach(function (filter) {\n\t    Object.defineProperty(Filter.prototype, filter, {\n\t        value: function filterGetter(filterValue) {\n\t            (0, _libCheck.checkDefined)(filterValue, 'filterValue');\n\t\n\t            this.comparator = FILTER_COMPARATORS[filter];\n\t            this.filterValue = filterValue;\n\t\n\t            this.filters.add(this);\n\t\n\t            return this.filters.getReturn();\n\t        }\n\t    });\n\t});\n\t\n\texports['default'] = Filter;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\texports.getDefaultValuesForModelType = getDefaultValuesForModelType;\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _modelDefaultsOrganisationUnitGroupSet = __webpack_require__(23);\n\t\n\tvar _modelDefaultsOrganisationUnitGroupSet2 = _interopRequireDefault(_modelDefaultsOrganisationUnitGroupSet);\n\t\n\tvar _modelDefaultsCategory = __webpack_require__(24);\n\t\n\tvar _modelDefaultsCategory2 = _interopRequireDefault(_modelDefaultsCategory);\n\t\n\tvar _modelDefaultsCategoryOptionGroupSet = __webpack_require__(25);\n\t\n\tvar _modelDefaultsCategoryOptionGroupSet2 = _interopRequireDefault(_modelDefaultsCategoryOptionGroupSet);\n\t\n\tvar _modelDefaultsDataElement = __webpack_require__(26);\n\t\n\tvar _modelDefaultsDataElement2 = _interopRequireDefault(_modelDefaultsDataElement);\n\t\n\tvar _modelDefaultsDataElementGroupSet = __webpack_require__(27);\n\t\n\tvar _modelDefaultsDataElementGroupSet2 = _interopRequireDefault(_modelDefaultsDataElementGroupSet);\n\t\n\tvar _modelDefaultsDataSet = __webpack_require__(28);\n\t\n\tvar _modelDefaultsDataSet2 = _interopRequireDefault(_modelDefaultsDataSet);\n\t\n\tvar defaultValues = new Map([['organisationUnitGroupSet', _modelDefaultsOrganisationUnitGroupSet2['default']], ['category', _modelDefaultsCategory2['default']], ['categoryOptionGroupSet', _modelDefaultsCategoryOptionGroupSet2['default']], ['dataElement', _modelDefaultsDataElement2['default']], ['dataElementGroupSet', _modelDefaultsDataElementGroupSet2['default']], ['dataSet', _modelDefaultsDataSet2['default']]]);\n\t\n\texports.defaultValues = defaultValues;\n\t\n\tfunction getDefaultValuesForModelType(modelDefinitionName) {\n\t    if (defaultValues.has(modelDefinitionName)) {\n\t        return defaultValues.get(modelDefinitionName);\n\t    }\n\t    return {};\n\t}\n\n/***/ },\n/* 23 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports[\"default\"] = {\n\t    dataDimension: true\n\t};\n\tmodule.exports = exports[\"default\"];\n\n/***/ },\n/* 24 */\n23,\n/* 25 */\n23,\n/* 26 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\texports['default'] = {\n\t    aggregationType: 'SUM',\n\t    valueType: 'NUMBER'\n\t};\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 27 */\n23,\n/* 28 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\texports['default'] = {\n\t    expiryDays: 0,\n\t    openFuturePeriods: 0,\n\t    timelyDays: 15,\n\t    periodType: 'Monthly'\n\t};\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _apiApi = __webpack_require__(7);\n\t\n\tvar _apiApi2 = _interopRequireDefault(_apiApi);\n\t\n\tvar I18n = (function () {\n\t    function I18n() {\n\t        var sources = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n\t        var api = arguments.length <= 1 || arguments[1] === undefined ? _apiApi2['default'].getApi() : arguments[1];\n\t\n\t        _classCallCheck(this, I18n);\n\t\n\t        this.sources = sources;\n\t        this.api = api;\n\t        this.strings = new Set();\n\t        this.translations = undefined;\n\t    }\n\t\n\t    /**\n\t     * Adds a .properties file to the list of sources to load translations from\n\t     *\n\t     * Files are loaded in the order they're added, and the first translation of each string that's encountered will be\n\t     * used.\n\t     *\n\t     * @param {String} path\n\t     */\n\t\n\t    _createClass(I18n, [{\n\t        key: 'addSource',\n\t        value: function addSource(path) {\n\t            this.sources.push(path);\n\t        }\n\t\n\t        /**\n\t         * Adds one or more strings to the list of strings to translate\n\t         *\n\t         * @param {(String[]|String)} strings\n\t         */\n\t    }, {\n\t        key: 'addStrings',\n\t        value: function addStrings(strings) {\n\t            var _this = this;\n\t\n\t            if (typeof strings === 'string' && strings.trim().length > 0) {\n\t                this.strings.add(strings.trim());\n\t            } else {\n\t                Array.from(strings).filter(function (string) {\n\t                    return string && ('' + string).trim().length > 0;\n\t                }).forEach(function (string) {\n\t                    return _this.strings.add(string);\n\t                });\n\t            }\n\t        }\n\t\n\t        /**\n\t         * Load translations\n\t         *\n\t         * First, all properties files (specified with addSource) are loaded.\n\t         * Then, if any untranslated strings remain, these are POSTed to the i18n endpoint of the DHIS2 API.\n\t         *\n\t         * @returns {Promise}\n\t         */\n\t    }, {\n\t        key: 'load',\n\t        value: function load() {\n\t            var _this2 = this;\n\t\n\t            var i18n = this;\n\t            i18n.translations = {};\n\t\n\t            function parseProperties(text) {\n\t                return text.split('\\n').reduce(function (props, line) {\n\t                    var _line$split$map = line.split('=').map(function (out) {\n\t                        return out.trim();\n\t                    });\n\t\n\t                    var _line$split$map2 = _slicedToArray(_line$split$map, 2);\n\t\n\t                    var key = _line$split$map2[0];\n\t                    var value = _line$split$map2[1];\n\t\n\t                    if (key !== undefined && value !== undefined && !props.hasOwnProperty(key)) {\n\t                        props[key] = value // eslint-disable-line no-param-reassign\n\t                        .replace(/\\\\u([0-9a-f]{4})/gi, function (match, grp) {\n\t                            return String.fromCharCode(parseInt(grp, 16));\n\t                        });\n\t                    }\n\t                    return props;\n\t                }, {});\n\t            }\n\t\n\t            var propFiles = [];\n\t\n\t            this.sources.forEach(function (source) {\n\t                propFiles.push(i18n.api.request('GET', source, undefined, { dataType: 'text' }).then(function (data) {\n\t                    return Promise.resolve(parseProperties(data));\n\t                },\n\t\n\t                // Resolve errors to an empty object, so that one missing file doesn't prevent\n\t                // the rest from being loaded\n\t                function () {\n\t                    return Promise.resolve({});\n\t                }));\n\t            });\n\t\n\t            return Promise.all(propFiles).then(function (propFile) {\n\t                propFile.forEach(function (props) {\n\t                    Object.keys(props).forEach(function (str) {\n\t                        if (!i18n.translations.hasOwnProperty(str)) {\n\t                            i18n.translations[str] = props[str];\n\t                        }\n\t                        _this2.strings['delete'](str);\n\t                    });\n\t                });\n\t\n\t                if (_this2.strings.size > 0) {\n\t                    return i18n.api.post('i18n', Array.from(i18n.strings)).then(function (res) {\n\t                        Object.keys(res).filter(function (str) {\n\t                            return str !== res[str];\n\t                        }).forEach(function (str) {\n\t                            i18n.translations[str] = res[str];\n\t                            i18n.strings['delete'](str);\n\t                        });\n\t\n\t                        return Promise.resolve(i18n.translations);\n\t                    });\n\t                }\n\t\n\t                return Promise.resolve(i18n.translations);\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Gets the translated version of the specified string\n\t         *\n\t         * If no translation exists for the specified string, the string is returned as is with two asterisks on each side,\n\t         * in order to easily identify missing translations in the UI\n\t         *\n\t         * @param string\n\t         * @returns {String}\n\t         */\n\t    }, {\n\t        key: 'getTranslation',\n\t        value: function getTranslation(string) {\n\t            var variables = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\t\n\t            if (this.translations === undefined) {\n\t                throw new Error('Tried to translate before loading translations!');\n\t            }\n\t            var translatedString = this.translations.hasOwnProperty(string) ? this.translations[string] : '** ' + string + ' **';\n\t\n\t            if (Object.keys(variables).length) {\n\t                return translatedString.replace(/\\$\\$(.+?)\\$\\$/gi, function (match, partial) {\n\t                    return variables[partial] || '';\n\t                });\n\t            }\n\t\n\t            return translatedString;\n\t        }\n\t\n\t        /**\n\t         * Check if a translation exists for the specified string\n\t         *\n\t         * @param string\n\t         * @returns {boolean} True if a translation exists, false otherwise\n\t         */\n\t    }, {\n\t        key: 'isTranslated',\n\t        value: function isTranslated(string) {\n\t            if (this.translations === undefined) {\n\t                throw new Error('Tried to translate before loading translations!');\n\t            }\n\t            return this.translations.hasOwnProperty(string);\n\t        }\n\t\n\t        /**\n\t         * Get the list of strings that don't have translations\n\t         *\n\t         * If no translations have been loaded yet, `undefined` is returned in stead.\n\t         *\n\t         * @returns {Array|undefined} Array of untranslated strings, or undefined if translations haven't been loaded\n\t         */\n\t    }, {\n\t        key: 'getUntranslatedStrings',\n\t        value: function getUntranslatedStrings() {\n\t            return this.translations ? Array.from(this.strings) : undefined;\n\t        }\n\t\n\t        /**\n\t         * Return a new instance of this class\n\t         *\n\t         * @returns {I18n}\n\t         */\n\t    }], [{\n\t        key: 'getI18n',\n\t        value: function getI18n() {\n\t            return new I18n();\n\t        }\n\t    }]);\n\t\n\t    return I18n;\n\t})();\n\t\n\texports['default'] = I18n;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _defaultConfig = __webpack_require__(31);\n\t\n\tvar _defaultConfig2 = _interopRequireDefault(_defaultConfig);\n\t\n\tvar _libCheck = __webpack_require__(3);\n\t\n\tvar DEFAULT_API_VERSION = 24;\n\t\n\tvar Config = (function () {\n\t    function Config() {\n\t        _classCallCheck(this, Config);\n\t    }\n\t\n\t    _createClass(Config, null, [{\n\t        key: 'create',\n\t        value: function create() {\n\t            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t                args[_key] = arguments[_key];\n\t            }\n\t\n\t            var configObjects = args.filter(function (arg) {\n\t                return arg;\n\t            });\n\t\n\t            if (!configObjects.every(function (configObject) {\n\t                return (0, _libCheck.isType)(configObject, 'object');\n\t            })) {\n\t                throw new Error('Expected Config parameter to have type object');\n\t            }\n\t\n\t            return Object.assign.apply(Object, [{}, _defaultConfig2['default']].concat(args));\n\t        }\n\t    }, {\n\t        key: 'processConfigForD2',\n\t        value: function processConfigForD2(config, d2) {\n\t            var api = d2.Api.getApi();\n\t            d2.model.ModelDefinition.prototype.api = api; // eslint-disable-line no-param-reassign\n\t            d2.models = d2.model.ModelDefinitions.getModelDefinitions(); // eslint-disable-line no-param-reassign\n\t\n\t            if ((0, _libCheck.isString)(config.baseUrl)) {\n\t                api.setBaseUrl(config.baseUrl);\n\t            } else {\n\t                api.setBaseUrl('/api/' + DEFAULT_API_VERSION);\n\t            }\n\t\n\t            if (config.i18n && config.i18n.sources) {\n\t                Array.from(config.i18n.sources).forEach(function (source) {\n\t                    return d2.i18n.addSource(source);\n\t                });\n\t            }\n\t\n\t            if (config.i18n && config.i18n.strings) {\n\t                d2.i18n.addStrings(Array.from(config.i18n.strings));\n\t            }\n\t        }\n\t    }]);\n\t\n\t    return Config;\n\t})();\n\t\n\texports['default'] = Config;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 31 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\tvar noCreateAllowedFor = new Set(['categoryOptionCombo']);\n\t\n\texports.noCreateAllowedFor = noCreateAllowedFor;\n\texports['default'] = {\n\t    baseUrl: '/api',\n\t    i18n: {\n\t        sources: new Set(),\n\t        strings: new Set()\n\t    }\n\t};\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _UserAuthorities = __webpack_require__(33);\n\t\n\tvar _UserAuthorities2 = _interopRequireDefault(_UserAuthorities);\n\t\n\tvar _UserSettings = __webpack_require__(34);\n\t\n\tvar _UserSettings2 = _interopRequireDefault(_UserSettings);\n\t\n\tvar _defaultConfig = __webpack_require__(31);\n\t\n\tvar models = Symbol('models');\n\tvar propertiesToIgnore = new Set(['userCredentials', 'userGroups', 'userRoles', 'organisationUnits', 'dataViewOrganisationUnits']);\n\t\n\tvar authTypes = {\n\t    READ: ['READ'],\n\t    CREATE: ['CREATE', 'CREATE_PUBLIC', 'CREATE_PRIVATE'],\n\t    CREATE_PUBLIC: ['CREATE_PUBLIC'],\n\t    CREATE_PRIVATE: ['CREATE_PRIVATE'],\n\t    DELETE: ['DELETE'],\n\t    UPDATE: ['UPDATE'],\n\t    EXTERNALIZE: ['EXTERNALIZE']\n\t};\n\t\n\tvar propertySymbols = Array.from(propertiesToIgnore).reduce(function (result, property) {\n\t    result[property] = Symbol(property); // eslint-disable-line no-param-reassign\n\t    return result;\n\t}, {});\n\t\n\tfunction getUserPropertiesToCopy(currentUserObject) {\n\t    var properties = undefined;\n\t    // The user credentials object is confusing so we set the properties straight onto the current user\n\t    if (currentUserObject.userCredentials) {\n\t        properties = Object.assign({}, currentUserObject.userCredentials, currentUserObject);\n\t    } else {\n\t        properties = Object.assign({}, currentUserObject);\n\t    }\n\t\n\t    return Object.keys(properties).reduce(function (result, property) {\n\t        if (propertiesToIgnore.has(property)) {\n\t            if (properties[property].map) {\n\t                result[propertySymbols[property]] = properties[property] // eslint-disable-line no-param-reassign\n\t                .map(function (value) {\n\t                    return value.id;\n\t                });\n\t            }\n\t        } else {\n\t            result[property] = properties[property]; // eslint-disable-line no-param-reassign\n\t        }\n\t        return result;\n\t    }, {});\n\t}\n\t\n\tfunction isInNoCreateAllowedForList(modelDefinition) {\n\t    return modelDefinition && _defaultConfig.noCreateAllowedFor.has(modelDefinition.name);\n\t}\n\t\n\tvar CurrentUser = (function () {\n\t    function CurrentUser(userData, userAuthorities, modelDefinitions, settings) {\n\t        _classCallCheck(this, CurrentUser);\n\t\n\t        Object.assign(this, getUserPropertiesToCopy(userData));\n\t\n\t        this.authorities = userAuthorities;\n\t        this[models] = modelDefinitions;\n\t\n\t        /**\n\t         * @property {UserSettings} settings Contains a reference to a `UserSettings` instance that can be used\n\t         * to retrieve and save system settings.\n\t         *\n\t         * @description\n\t         * ```js\n\t         * d2.currentUser.userSettings.get('keyUiLocale')\n\t         *  .then(userSettingsValue => {\n\t         *    console.log('UI Locale: ' + userSettingsValue);\n\t         *  });\n\t         * ```\n\t         */\n\t        this.userSettings = settings;\n\t    }\n\t\n\t    _createClass(CurrentUser, [{\n\t        key: 'getUserGroups',\n\t        value: function getUserGroups() {\n\t            var userGroupIds = this[propertySymbols.userGroups];\n\t\n\t            return this[models].userGroup.get({ filter: ['id:in:[' + userGroupIds.join(',') + ']'] });\n\t        }\n\t    }, {\n\t        key: 'getUserRoles',\n\t        value: function getUserRoles() {\n\t            var userRoleIds = this[propertySymbols.userRoles];\n\t\n\t            return this[models].userRole.get({ filter: ['id:in:[' + userRoleIds.join(',') + ']'] });\n\t        }\n\t    }, {\n\t        key: 'getOrganisationUnits',\n\t        value: function getOrganisationUnits() {\n\t            var listOptions = arguments.length <= 0 || arguments[0] === undefined ? { fields: ':all,displayName,children[id,displayName,path,children::isNotEmpty]' } : arguments[0];\n\t\n\t            var organisationUnitsIds = this[propertySymbols.organisationUnits];\n\t\n\t            return this[models].organisationUnit.list(Object.assign({}, listOptions, { filter: ['id:in:[' + organisationUnitsIds.join(',') + ']'] }));\n\t        }\n\t    }, {\n\t        key: 'getDataViewOrganisationUnits',\n\t        value: function getDataViewOrganisationUnits() {\n\t            var listOptions = arguments.length <= 0 || arguments[0] === undefined ? { fields: ':all,displayName,children[id,displayName,path,children::isNotEmpty]' } : arguments[0];\n\t\n\t            var organisationUnitsIds = this[propertySymbols.dataViewOrganisationUnits];\n\t\n\t            return this[models].organisationUnit.list(Object.assign({}, listOptions, { filter: ['id:in:[' + organisationUnitsIds.join(',') + ']'] }));\n\t        }\n\t    }, {\n\t        key: 'checkAuthorityForType',\n\t        value: function checkAuthorityForType(authorityType, modelType) {\n\t            var _this = this;\n\t\n\t            if (!modelType || !Array.isArray(modelType.authorities)) {\n\t                return false;\n\t            }\n\t\n\t            return modelType.authorities\n\t            // Filter the correct authority to check for from the model\n\t            .filter(function (authority) {\n\t                return authorityType.some(function (authToHave) {\n\t                    return authToHave === authority.type;\n\t                });\n\t            })\n\t            // Check the left over schema authority types\n\t            .some(function (schemaAuthority) {\n\t                return schemaAuthority.authorities.some(function (authorityToCheckFor) {\n\t                    return _this.authorities.has(authorityToCheckFor);\n\t                });\n\t            } // Check if one of the schema authorities are available in the users authorities\n\t            );\n\t        }\n\t    }, {\n\t        key: 'checkCreateAuthorityForType',\n\t        value: function checkCreateAuthorityForType(authType, modelType) {\n\t            // When the modelType is mentioned in the the list of modelTypes that are not\n\t            // allowed to be created we return false\n\t            if (isInNoCreateAllowedForList(modelType)) {\n\t                return false;\n\t            }\n\t\n\t            // Otherwise we check using the normal procedure for checking authorities\n\t            return this.checkAuthorityForType(authType, modelType);\n\t        }\n\t    }, {\n\t        key: 'canCreate',\n\t        value: function canCreate(modelType) {\n\t            return this.checkCreateAuthorityForType(authTypes.CREATE, modelType);\n\t        }\n\t    }, {\n\t        key: 'canCreatePublic',\n\t        value: function canCreatePublic(modelType) {\n\t            return this.checkCreateAuthorityForType(authTypes.CREATE_PUBLIC, modelType);\n\t        }\n\t    }, {\n\t        key: 'canCreatePrivate',\n\t        value: function canCreatePrivate(modelType) {\n\t            return this.checkCreateAuthorityForType(authTypes.CREATE_PRIVATE, modelType);\n\t        }\n\t    }, {\n\t        key: 'canDelete',\n\t        value: function canDelete(modelType) {\n\t            return this.checkAuthorityForType(authTypes.DELETE, modelType);\n\t        }\n\t    }, {\n\t        key: 'canUpdate',\n\t        value: function canUpdate(modelType) {\n\t            if (this.checkAuthorityForType(authTypes.UPDATE, modelType)) {\n\t                return true;\n\t            }\n\t            return this.checkAuthorityForType(authTypes.CREATE, modelType);\n\t        }\n\t    }, {\n\t        key: 'uiLocale',\n\t        get: function get() {\n\t            if (this.userSettings && this.userSettings.keyUiLocale) {\n\t                return this.userSettings.keyUiLocale;\n\t            }\n\t            return 'en';\n\t        }\n\t    }], [{\n\t        key: 'create',\n\t        value: function create(userData, authorities, modelDefinitions, userSettings) {\n\t            return new CurrentUser(userData, _UserAuthorities2['default'].create(authorities), modelDefinitions, new _UserSettings2['default'](userSettings));\n\t        }\n\t    }]);\n\t\n\t    return CurrentUser;\n\t})();\n\t\n\texports['default'] = CurrentUser;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 33 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar auths = Symbol();\n\t\n\tvar UserAuthorities = (function () {\n\t    function UserAuthorities() {\n\t        var authorities = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n\t\n\t        _classCallCheck(this, UserAuthorities);\n\t\n\t        this[auths] = new Set(authorities);\n\t    }\n\t\n\t    _createClass(UserAuthorities, [{\n\t        key: 'has',\n\t        value: function has(authority) {\n\t            if (this[auths].has('ALL')) {\n\t                return true;\n\t            }\n\t            return this[auths].has(authority);\n\t        }\n\t    }], [{\n\t        key: 'create',\n\t        value: function create(authorities) {\n\t            return new UserAuthorities(authorities);\n\t        }\n\t    }]);\n\t\n\t    return UserAuthorities;\n\t})();\n\t\n\texports['default'] = UserAuthorities;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _apiApi = __webpack_require__(7);\n\t\n\tvar _apiApi2 = _interopRequireDefault(_apiApi);\n\t\n\tvar _libCheck = __webpack_require__(3);\n\t\n\t/**\n\t * @class UserSettings\n\t *\n\t * @description\n\t * Handles communication with the userSettings endpoint. Can be used to get or save userSettings.\n\t */\n\t\n\tvar UserSettings = (function () {\n\t    function UserSettings(userSettings) {\n\t        var api = arguments.length <= 1 || arguments[1] === undefined ? _apiApi2['default'].getApi() : arguments[1];\n\t\n\t        _classCallCheck(this, UserSettings);\n\t\n\t        this.api = api;\n\t\n\t        if (userSettings) {\n\t            Object.assign(this, userSettings);\n\t        }\n\t    }\n\t\n\t    /**\n\t     * @method all\n\t     *\n\t     * @returns {Promise} Promise that resolves with the usersettings object from the api.\n\t     *\n\t     * @description\n\t     * Loads all the user settings of current user and returns them as an object from the promise.\n\t     * ```js\n\t     * d2.currentUser.userSettings.all()\n\t     *  .then(userSettings => {\n\t     *    console.log('UI Locale: ' + userSettings.keyUiLocale);\n\t     *  });\n\t     * ```\n\t     */\n\t\n\t    _createClass(UserSettings, [{\n\t        key: 'all',\n\t        value: function all() {\n\t            return this.api.get('userSettings');\n\t        }\n\t\n\t        /**\n\t         * @method get\n\t         *\n\t         * @param {String} key The identifier of the user setting that should be retrieved.\n\t         * @returns {Promise} A promise that resolves with the value or will fail if the value is not available.\n\t         *\n\t         * @description\n\t         * ```js\n\t         * d2.currentUser.userSettings.get('keyUiLocale')\n\t         *  .then(userSettingValue => {\n\t         *    console.log('UI Locale: ' + userSettingValue);\n\t         *  });\n\t         * ```\n\t         */\n\t    }, {\n\t        key: 'get',\n\t        value: function get(key) {\n\t            var _this = this;\n\t\n\t            function processValue(value) {\n\t                // Attempt to parse the response as JSON. If this fails we return the value as is.\n\t                try {\n\t                    return JSON.parse(value);\n\t                } catch (e) {\n\t                    return value;\n\t                }\n\t            }\n\t\n\t            return new Promise(function (resolve, reject) {\n\t                if (!(0, _libCheck.isString)(key)) {\n\t                    throw new TypeError('A \"key\" parameter should be specified when calling get() on userSettings');\n\t                }\n\t\n\t                _this.api.get(['userSettings', key].join('/'), undefined, { dataType: 'text' }).then(function (response) {\n\t                    var value = processValue(response);\n\t                    // Store the value on the user settings object\n\t                    _this[key] = value;\n\t                    if (value) {\n\t                        resolve(processValue(response));\n\t                    }\n\t                    reject(new Error('The requested userSetting has no value or does not exist.'));\n\t                });\n\t            });\n\t        }\n\t\n\t        /**\n\t         * @method set\n\t         *\n\t         * @param {String} key The identifier of the user setting that should be saved.\n\t         * @param {String} value The new value of the user setting.\n\t         * @returns {Promise} A promise that will resolve when the new value has been saved, or fail if saving fails.\n\t         *\n\t         * @description\n\t         * ```js\n\t         * d2.currentUser.userSettings.set('keyUiLocale', 'fr')\n\t         *  .then(() => {\n\t         *   console.log('UI Locale is now \"fr\");\n\t         *  });\n\t         * ```\n\t         */\n\t    }, {\n\t        key: 'set',\n\t        value: function set(key, value) {\n\t            var settingUrl = ['userSettings', key].join('/');\n\t            if (value === null || ('' + value).length === 0) {\n\t                return this.api['delete'](settingUrl, { dataType: 'text' }).then(this[key] = undefined);\n\t            }\n\t            return this.api.post(settingUrl, value, { dataType: 'text', contentType: 'text/plain' }).then(this[key] = value);\n\t        }\n\t    }]);\n\t\n\t    return UserSettings;\n\t})();\n\t\n\texports['default'] = UserSettings;\n\tmodule.exports = exports['default'];\n\n/***/ }\n/******/ ])));\n                    return d2.default;\n                })();\n            \n\n\n/** WEBPACK FOOTER **\n ** d2-browser.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap adfaedd96a58140bf370\n **/","import { pick, Deferred, updateAPIUrlWithBaseUrlVersionNumber } from './lib/utils';\nimport Logger from './logger/Logger';\nimport model from './model/models';\nimport Api from './api/Api';\nimport System from './system/System';\nimport I18n from './i18n/I18n';\nimport Config from './config';\nimport CurrentUser from './current-user/CurrentUser';\nimport jQuery from './external/jquery';\n\nlet firstRun = true;\nlet deferredD2Init = Deferred.create();\n\nconst preInitConfig = Config.create();\n\nexport function getManifest(url) {\n    const api = new Api(jQuery);\n    api.setBaseUrl('');\n\n    const manifestUtilities = {\n        getBaseUrl() {\n            return this.activities.dhis.href;\n        },\n    };\n\n    return api.get(`${url}`)\n        .then(manifest => Object.assign({}, manifest, manifestUtilities));\n}\n\n\n/**\n * @function getUserSettings\n *\n * @returns {Promise} A promise to the current user settings\n *\n * @description\n * The object that is the result of the promise will have the following properties\n * ```js\n * {\n *   \"uiLocale\": \"en\" // The users locale, that can be used for translations)\n * }\n * ```\n */\nexport function getUserSettings() {\n    const api = Api.getApi();\n\n    if (preInitConfig.baseUrl && firstRun) {\n        api.setBaseUrl(preInitConfig.baseUrl);\n    }\n\n    return api.get('userSettings');\n}\n\nfunction getModelRequests(api, schemaNames = []) {\n    const fieldsForSchemas = 'apiEndpoint,name,authorities,plural,shareable,metadata,klass,identifiableObject,properties[href,writable,referenceType,collection,collectionName,name,propertyType,persisted,required,min,max,ordered,unique,constants,owner,itemPropertyType]';\n    const modelRequests = [];\n    const loadSchemaForName = (schemaName) => api.get(`schemas/${schemaName}`, { fields: fieldsForSchemas });\n\n    if (schemaNames.length > 0) {\n        const individualSchemaRequests = schemaNames.map(loadSchemaForName);\n\n        const schemasPromise = Promise\n            .all(individualSchemaRequests)\n            .then(schemas => ({ schemas }));\n\n        modelRequests.push(schemasPromise);\n    } else {\n        // Used as a source to generate the models.\n        modelRequests.push(api.get('schemas', { fields: fieldsForSchemas }));\n    }\n\n    // Used to add the dynamic attributes to the models that should have them.\n    modelRequests.push(api.get('attributes', { fields: ':all,optionSet[:all,options[:all]]', paging: false }));\n\n    return modelRequests;\n}\n\n/**\n * @function init\n *\n * @param {Object} initConfig Configuration object that will be used to configure to define D2 Setting.\n * See the description for more information on the available settings.\n * @returns {Promise} A promise that resolves with the intialized d2 object. Which is an object that exposes `model`, `models` and `Api`\n *\n * @description\n * Init function that used to initialise D2. This will load the schemas from the DHIS2 api and configure your D2 instance.\n *\n * The `config` object that can be passed into D2 can have the following properties:\n *\n * baseUrl: Set this when the url is something different then `/api`. If you are running your dhis instance in a subdirectory of the actual domain\n * for example http://localhost/dhis/ you should set the base url to `/dhis/api`\n *\n * ```js\n * import init from 'd2';\n *\n * init({baseUrl: '/dhis/api'})\n *   .then((d2) => {\n *     console.log(d2.model.dataElement.list());\n *   });\n * ```\n */\nexport function init(initConfig) {\n    const api = Api.getApi();\n    const logger = Logger.getLogger();\n\n    const config = Config.create(preInitConfig, initConfig);\n\n    const d2 = {\n        models: undefined,\n        model,\n        Api,\n        system: System.getSystem(),\n        i18n: I18n.getI18n(),\n    };\n\n    // Process the config in a the config class to keep all config calls together.\n    Config.processConfigForD2(config, d2);\n\n    // Because when importing the getInstance method in dependencies the getInstance could run before\n    // init we have to resolve the current promise on first run and for consecutive ones replace the\n    // old one with a fresh promise.\n    if (firstRun) {\n        firstRun = false;\n    } else {\n        deferredD2Init = Deferred.create();\n    }\n\n    const modelRequests = getModelRequests(api, config.schemas);\n\n    const userRequests = [\n        api.get('me', { fields: ':all,organisationUnits[id],userGroups[id],userCredentials[:all,!user,userRoles[id]' }),\n        api.get('me/authorization'),\n        getUserSettings(),\n    ];\n\n    const systemRequests = [\n        api.get('system/info'),\n        api.get('apps'),\n    ];\n\n    return Promise.all([\n        ...modelRequests,\n        ...userRequests,\n        ...systemRequests,\n        d2.i18n.load(),\n    ])\n        .then(res => {\n            const responses = {\n                schemas: pick('schemas')(res[0]),\n                attributes: pick('attributes')(res[1]),\n                currentUser: res[2],\n                authorities: res[3],\n                userSettings: res[4],\n                systemInfo: res[5],\n                apps: res[6],\n            };\n\n            responses.schemas\n                // TODO: Remove this when the schemas endpoint is versioned or shows the correct urls for the requested version\n                // The schemas endpoint is not versioned which will result into the modelDefinitions always using the\n                // \"default\" endpoint, we therefore modify the endpoint url based on the given baseUrl.\n                .map(schema => {\n                    schema.apiEndpoint = updateAPIUrlWithBaseUrlVersionNumber(schema.apiEndpoint, config.baseUrl); // eslint-disable-line no-param-reassign\n\n                    return schema;\n                })\n                .forEach((schema) => {\n                    // Attributes that do not have values do not by default get returned with the data,\n                    // therefore we need to grab the attributes that are attached to this particular schema to be able to know about them\n                    const schemaAttributes = responses.attributes\n                        .filter(attributeDescriptor => {\n                            const attributeNameFilter = [schema.name, 'Attribute'].join('');\n                            return attributeDescriptor[attributeNameFilter] === true;\n                        });\n\n                    if (!Object.prototype.hasOwnProperty.call(d2.models, schema.name)) {\n                        d2.models.add(model.ModelDefinition.createFromSchema(schema, schemaAttributes));\n                    }\n                });\n\n            d2.currentUser = CurrentUser.create(\n                responses.currentUser,\n                responses.authorities,\n                d2.models,\n                responses.userSettings\n            );\n            d2.system.setSystemInfo(responses.systemInfo);\n            d2.system.setInstalledApps(responses.apps);\n\n            deferredD2Init.resolve(d2);\n            return deferredD2Init.promise;\n        })\n        .catch((error) => {\n            logger.error('Unable to get schemas from the api', JSON.stringify(error), error);\n\n            deferredD2Init.reject('Unable to get schemas from the DHIS2 API');\n            return deferredD2Init.promise;\n        });\n}\n\n/**\n * @function getInstance\n *\n * @returns {Promise} A promise to an initialized d2 instance.\n *\n * @description\n * This function can be used to retrieve the `singleton` instance of d2. The instance is being created by calling\n * the `init` method.\n *\n * ```js\n * import {init, getInstance} from 'd2';\n *\n * init({baseUrl: '/dhis2/api/'});\n * getInstance()\n *   .then(d2 => {\n *      d2.models.dataElement.list();\n *      // and all your other d2 magic.\n *   });\n * ```\n */\nexport function getInstance() {\n    return deferredD2Init.promise;\n}\n\n// Alias preInitConfig to be able to `import {config} from 'd2';`\n/**\n * @property config\n *\n * @description\n * Can be used to set config options before initialisation of d2.\n *\n * ```js\n * import {config, init} from 'd2';\n *\n * config.baseUrl = '/demo/api';\n * config.i18n.sources.add('i18n/systemsettingstranslations.properties');\n *\n * init()\n *   .then(d2 => {\n *     d2.system.settings.all()\n *       .then(systemSettings => Object.keys())\n *       .then(systemSettingsKey => {\n *         d2.i18n.getTranslation(systemSettingsKey);\n *       });\n *   });\n *\n * ```\n */\nexport const config = preInitConfig;\n\nexport default {\n    init,\n    config,\n    getInstance,\n    getUserSettings,\n    getManifest,\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/d2.js\n **/","// TODO: Most of these functions should be moved out to d2-utilizr\n\nexport function throwError(message) {\n    throw new Error(message);\n}\n\n// TODO: Throw an error when `toCurry` is not a function\nexport function curry(toCurry, parameter) {\n    return function curried(...args) {\n        return toCurry.apply(this, [parameter].concat(args));\n    };\n}\n\nexport function addLockedProperty(object, name, value) {\n    const propertyDescriptor = {\n        enumerable: true,\n        configurable: false,\n        writable: false,\n        value,\n    };\n    Object.defineProperty(object, name, propertyDescriptor);\n}\n\nexport function copyOwnProperties(to, from) {\n    let key;\n\n    for (key in from) {\n        if (from.hasOwnProperty(key)) {\n            to[key] = from[key]; // eslint-disable-line no-param-reassign\n        }\n    }\n\n    return to;\n}\n\nexport function pick(property) {\n    return item => {\n        if (item) {\n            return item[property];\n        }\n        return undefined;\n    };\n}\n\nexport class Deferred {\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n\n    static create() {\n        return new Deferred();\n    }\n}\n\nexport function updateAPIUrlWithBaseUrlVersionNumber(apiUrl, baseUrl) {\n    if (!baseUrl || !apiUrl) {\n        return apiUrl;\n    }\n\n    const apiUrlWithVersionRexExp = /api\\/(2[3-9])/;\n    const apiVersionMatch = baseUrl.match(apiUrlWithVersionRexExp);\n\n    const baseUrlHasVersion = apiVersionMatch && apiVersionMatch[1];\n    const apiUrlHasVersion = apiUrl && !apiUrlWithVersionRexExp.test(apiUrl);\n\n    if (baseUrlHasVersion && apiUrlHasVersion) {\n        const version = apiVersionMatch[1];\n\n        // Inject the current api version number into the endPoint urls\n        return apiUrl.replace(/api/, `api/${version}`);\n    }\n\n    return apiUrl;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/lib/utils.js\n **/","import { checkType, isType } from '../lib/check';\n\nclass Logger {\n    constructor(logging) {\n        checkType(logging, 'object', 'console');\n        this.logger = logging;\n    }\n\n    canLog(type) {\n        return !!(type && console && isType(this.logger[type], 'function'));\n    }\n\n    debug(...rest) {\n        if (this.canLog('debug')) {\n            this.logger.debug.apply(console, rest);\n            return true;\n        }\n        return false;\n    }\n\n    error(...rest) {\n        if (this.canLog('error')) {\n            this.logger.error.apply(console, rest);\n            return true;\n        }\n        return false;\n    }\n\n    log(...rest) {\n        if (this.canLog('log')) {\n            this.logger.log.apply(console, rest);\n            return true;\n        }\n        return false;\n    }\n\n    warn(...rest) {\n        if (this.canLog('warn')) {\n            this.logger.warn.apply(console, rest);\n            return true;\n        }\n        return false;\n    }\n\n    static getLogger() {\n        let logger;\n\n        // TODO: This is not very clean try to figure out a better way to do this.\n        try {\n            // Node version\n            logger = global.console;\n        } catch (e) {\n            // Browser version fallback\n            /* istanbul ignore next */\n            logger = window.console;\n        }\n\n        if (this.logger) {\n            return this.logger;\n        }\n        return (this.logger = new Logger(logger));\n    }\n}\n\nexport default Logger;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/logger/Logger.js\n **/","export function checkDefined(value, name) {\n    if (value !== undefined) {\n        return true;\n    }\n    throw new Error([name || 'Value', 'should be provided'].join(' '));\n}\n\n// TODO: Decide if checkType([], 'object') is a 'false' positive\nexport function checkType(value, type, name) {\n    checkDefined(value, name);\n    checkDefined(type, 'Type');\n\n    if ((typeof type === 'function' && value instanceof type) ||\n        (typeof type === 'string' && typeof value === type)) {\n        return true;\n    }\n    throw new Error(['Expected', name || value, 'to have type', type].join(' '));\n}\n\n// TODO: Log type error?\nexport function isType(value, type) {\n    function noop() {}\n\n    try {\n        checkType(value, type);\n        return true;\n    } catch (e) {\n        noop();\n    }\n\n    return false;\n}\n\nexport function isString(value) {\n    return isType(value, 'string');\n}\n\nexport function isArray(value) {\n    return Array.isArray(value);\n}\n\nexport function isObject(value) {\n    return isType(value, Object);\n}\n\nexport function isDefined(value) {\n    return value !== undefined;\n}\n\nexport function isInteger(nVal) {\n    return typeof nVal === 'number' &&\n        isFinite(nVal) &&\n        nVal > -9007199254740992 &&\n        nVal < 9007199254740992 &&\n        Math.floor(nVal) === nVal;\n}\n\n// Polyfill for the isInteger function that will be added in ES6\n// http://wiki.ecmascript.org/doku.php?id=harmony:number.isinteger\n/* istanbul ignore if  */\nif (!Number.isInteger) {\n    Number.isInteger = isInteger;\n}\n\nexport function isNumeric(nVal) {\n    return typeof nVal === 'number' &&\n        isFinite(nVal) &&\n        (nVal - parseFloat(nVal) + 1) >= 0;\n}\n\nexport function contains(item, list) {\n    const listToCheck = (isArray(list) && list) || [];\n\n    return listToCheck.indexOf(item) >= 0;\n}\n\nexport function isValidUid(value) {\n    return value && value.length === 11;\n}\n\nexport default {\n    checkType,\n    checkDefined,\n    isArray,\n    isDefined,\n    isInteger,\n    isNumeric,\n    isString,\n    isType,\n    contains,\n    isValidUid,\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/lib/check.js\n **/","import ModelBase from './ModelBase';\nimport Model from './Model';\nimport ModelDefinition from './ModelDefinition';\nimport ModelDefinitions from './ModelDefinitions';\nimport ModelValidation from './ModelValidation';\n\nexport default {\n    ModelBase,\n    Model,\n    ModelDefinition,\n    ModelDefinitions,\n    ModelValidation,\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/model/models.js\n **/","import ModelValidation from './ModelValidation';\nimport { isValidUid } from '../lib/check';\nimport { getJSONForProperties } from './helpers/json';\n\nconst modelValidator = ModelValidation.getModelValidation();\n\nexport const DIRTY_PROPERTY_LIST = Symbol('List to keep track of dirty properties');\n\nfunction hasModelValidationForProperty(model, property) {\n    return Boolean(model.modelDefinition &&\n        model.modelDefinition.modelValidations &&\n        model.modelDefinition.modelValidations[property] &&\n        Object.prototype.hasOwnProperty.call(model.modelDefinition.modelValidations, property));\n}\n\nfunction updateModelFromResponseStatus(result) {\n    if (result && result.httpStatus === 'Created' && result && isValidUid(result.response.uid)) {\n        this.dataValues.id = result.response.uid;\n        this.dataValues.href = [this.modelDefinition.apiEndpoint, this.dataValues.id].join('/');\n    }\n    this.dirty = false;\n    this.getDirtyChildren()\n        .forEach(value => {\n            if (value.resetDirtyState) {\n                value.resetDirtyState();\n            } else {\n                value.dirty = false; // eslint-disable-line no-param-reassign\n            }\n        });\n\n    this[DIRTY_PROPERTY_LIST].clear();\n    return result;\n}\n\n/**\n * @class ModelBase\n */\nclass ModelBase {\n    /**\n     * @method create\n     *\n     * @returns {Promise} Returns a promise that resolves when the model has been saved or rejected with the result from\n     * the `validate()` call.\n     *\n     * @definition\n     * Will save model as a new object to the server using a POST request. This method would generally be used if\n     * you're creating models with pre-specified IDs. Note that this does not check if the model is marked as dirty.\n     */\n    create() {\n        return this.validate()\n            .then(validationState => {\n                if (!validationState.status) {\n                    return Promise.reject(validationState);\n                }\n\n                return this.modelDefinition\n                    .saveNew(this)\n                    .then(updateModelFromResponseStatus.bind(this));\n            });\n    }\n\n    /**\n     * @method save\n     *\n     * @returns {Promise} Returns a promise that resolves when the model has been saved\n     * or rejects with the result from the `validate()` call.\n     *\n     * @description\n     * Checks if the model is dirty. When the model is dirty it will check if the values of the model are valid by calling\n     * `validate`. If this is correct it will attempt to save the [Model](#/model/Model) to the api.\n     *\n     * ```js\n     * myModel.save()\n     *   .then((message) => console.log(message));\n     * ```\n     */\n    save(includeChildren) {\n        if (!this.isDirty(includeChildren)) {\n            return Promise.reject('No changes to be saved');\n        }\n\n        return this.validate()\n            .then(validationState => {\n                if (!validationState.status) {\n                    return Promise.reject(validationState);\n                }\n\n                return this.modelDefinition\n                    .save(this)\n                    .then(updateModelFromResponseStatus.bind(this));\n            });\n    }\n\n    /**\n     * @method validate\n     *\n     * @returns {Promise} Promise that resolves with an object with a status property that represents if the model\n     * is valid or not the fields array will return the names of the fields that are invalid.\n     *\n     * @description\n     * This will run the validations on the properties which have validations set. Normally these validations are defined\n     * through the DHIS2 schema. It will check min/max for strings/numbers etc. Additionally it will\n     * run model validations against the schema.\n     *\n     * ```js\n     * myModel.validate()\n     *  .then(myModelStatus => {\n     *    if (myModelStatus.status === false) {\n     *      myModelStatus.fields.forEach((fieldName) => console.log(fieldName));\n     *    }\n     * });\n     * ```\n     */\n    validate() {\n        return new Promise((resolve, reject) => {\n            let validationMessages = [];\n\n            function unique(current, property) {\n                if (property && current.indexOf(property) === -1) {\n                    current.push(property);\n                }\n                return current;\n            }\n\n            function asyncRemoteValidation(model) {\n                return modelValidator.validateAgainstSchema(model);\n            }\n\n            // Run async validation against the api\n            asyncRemoteValidation(this)\n                .catch(remoteMessages => {\n                    // Errors are ok in this case\n                    if (Array.isArray(remoteMessages)) {\n                        return remoteMessages;\n                    }\n                    return Promise.reject(remoteMessages);\n                })\n                .then(remoteMessages => {\n                    validationMessages = validationMessages.concat(remoteMessages);\n\n                    const validationState = {\n                        status: remoteMessages.length === 0,\n                        fields: validationMessages\n                            .map(validationMessage => validationMessage.property)\n                            .reduce(unique, []),\n                        messages: validationMessages,\n                    };\n                    resolve(validationState);\n                })\n                .catch(message => reject(message));\n        });\n    }\n\n    clone() {\n        return this.modelDefinition.create(getJSONForProperties(this, Object.keys(this.modelDefinition.modelValidations)));\n    }\n\n    delete() {\n        return this.modelDefinition.delete(this);\n    }\n\n    isDirty(includeChildren = true) {\n        if (!(this.dirty || includeChildren === true && this.hasDirtyChildren())) {\n            return false;\n        }\n        return true;\n    }\n\n    getDirtyPropertyNames() {\n        return Array.from(this[DIRTY_PROPERTY_LIST].values());\n    }\n\n    getCollectionChildren() {\n        // TODO: Can't be sure that this has a `modelDefinition` property\n        return Object.keys(this)\n            .filter(\n                propertyName => this[propertyName] &&\n                hasModelValidationForProperty(this, propertyName) &&\n                this.modelDefinition.modelValidations[propertyName].owner\n            )\n            .map(propertyName => this[propertyName]);\n    }\n\n    getCollectionChildrenPropertyNames() {\n        return Object\n            .keys(this)\n            .filter((propertyName) =>\n                this.modelDefinition &&\n                this.modelDefinition.modelValidations &&\n                this.modelDefinition.modelValidations[propertyName] &&\n                this.modelDefinition.modelValidations[propertyName].type === 'COLLECTION'\n            );\n    }\n\n    getDirtyChildren() {\n        return this.getCollectionChildren()\n            .filter(property => property && (property.dirty === true));\n    }\n\n    hasDirtyChildren() {\n        return this.getDirtyChildren().length > 0;\n    }\n}\n\nexport default new ModelBase();\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/model/ModelBase.js\n **/","import { checkType } from '../lib/check';\nimport Logger from '../logger/Logger';\nimport Api from '../api/Api';\nimport { getOwnedPropertyJSON } from './helpers/json';\n\n/**\n * @class ModelValidation\n */\nclass ModelValidation {\n    constructor(providedLogger) {\n        checkType(providedLogger, 'object', 'logger (Logger)');\n        this.logger = providedLogger;\n    }\n\n    /**\n     * @deprecated\n     * @method validate\n     *\n     * @returns {{status: boolean, messages: Array}} Returns {status: true, messages: []}\n     */\n    validate() {\n        this.logger.warn('Client side model validation is deprecated');\n        throw new Error('Client side model validation is deprecated');\n    }\n\n    /**\n     * @method validateAgainstSchema\n     *\n     * @param {Model} model The model that should be validated.\n     * @returns {Array} Returns an array with validation messages if there are any.\n     *\n     * @description\n     * Sends a POST request against the `api/schemas` endpoint to check if the model is valid.\n     *\n     * @note {warn} Currently only checks\n     */\n    validateAgainstSchema(model) {\n        if (!(model && model.modelDefinition && model.modelDefinition.name)) {\n            return Promise.reject('model.modelDefinition.name can not be found');\n        }\n\n        function extractValidationViolations(webmessage) {\n            // Support both the 2.23+ version using `errorReports` and the 2.22 and lower using `validationViolations`\n            // for errorMessages from the schemas endpoint.\n            // TODO: Remove support for the older `validationViolations` when supporting 2.22 is no longer required\n            if (webmessage.response && (webmessage.response.validationViolations || webmessage.response.errorReports)) {\n                return (webmessage.response.validationViolations || webmessage.response.errorReports);\n            }\n            throw new Error('Response was not a WebMessage with the expected format');\n        }\n\n        const url = `schemas/${model.modelDefinition.name}`;\n\n        // TODO: The function getOwnedPropertyJSON should probably not be exposed, perhaps we could have a getJSONForModel(ownedPropertiesOnly=true) method.\n        return Api.getApi().post(url, getOwnedPropertyJSON(model))\n            .then((webMessage) => {\n                if (webMessage.status === 'OK') {\n                    return [];\n                }\n                return Promise.reject(webMessage);\n            })\n            .catch(extractValidationViolations);\n    }\n\n    /**\n     * @method getModelValidation\n     * @static\n     *\n     * @returns {ModelValidation} New or memoized instance of `ModelInstance`\n     *\n     * @description\n     * Returns the `ModelValidation` singleton. Creates a new one if it does not yet exist.\n     * Grabs a logger instance by calling `Logger.getLogger`\n     */\n    static getModelValidation() {\n        if (this.modelValidation) {\n            return this.modelValidation;\n        }\n        return (this.modelValidation = new ModelValidation(Logger.getLogger(console)));\n    }\n}\n\nexport default ModelValidation;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/model/ModelValidation.js\n **/","import { checkType } from '../lib/check';\nimport jQuery from '../external/jquery';\nimport System from '../system/System';\n\nfunction getMergeStrategyParam(mergeType = 'REPLACE') {\n    const system = System.getSystem();\n\n    if (system.version && (Number(system.version.minor) <= 22)) {\n        return `mergeStrategy=${mergeType}`;\n    }\n\n    return `mergeMode=${mergeType}`;\n}\n\nfunction processSuccess(resolve) {\n    return (data/* , textStatus, jqXHR */) => {\n        resolve(data);\n    };\n}\n\nfunction processFailure(reject) {\n    return (jqXHR/* , textStatus, errorThrown */) => {\n        if (jqXHR.responseJSON) {\n            return reject(jqXHR.responseJSON);\n        }\n\n        delete jqXHR.then; // eslint-disable-line no-param-reassign\n        return reject(jqXHR);\n    };\n}\n\nfunction getUrl(baseUrl, url) {\n    // If we are dealing with an absolute url use that instead\n    if (new RegExp('^(:?https?:)?//').test(url)) {\n        return url;\n    }\n\n    const urlParts = [];\n\n    if (baseUrl) {\n        urlParts.push(baseUrl);\n    }\n    urlParts.push(url);\n\n    return urlParts.join('/')\n        .replace(new RegExp('(.(?:[^:]))\\/\\/+', 'g'), '$1/')\n        .replace(new RegExp('\\/$'), '');\n}\n\nclass Api {\n    constructor(jquery) {\n        if (!jquery) {\n            throw new Error('D2 requires jQuery');\n        }\n\n        this.jquery = jquery;\n        this.baseUrl = '/api';\n        this.defaultRequestSettings = {\n            headers: {\n                // FIXME: Remove the 'Cache-Control: no-store' header when we figure out how to solve this xhr/jquery bug\n                // does not process consecutive requests for the same url properly due to the 304 response.\n                // It makes no sense to set a 'Cache-Control: no-store' on a request...\n                'Cache-Control': 'no-store',\n            },\n            data: {},\n            contentType: 'application/json',\n            type: undefined,\n            url: undefined,\n        };\n    }\n\n    get(url, data, options) {\n        return this.request('GET', getUrl(this.baseUrl, url), data, options);\n    }\n\n    post(url, data, options) {\n        // Pass data through JSON.stringify, unless options.contentType is 'text/plain' or false (meaning don't process)\n        const\n            payload = (\n                options &&\n                options.contentType !== undefined &&\n                (options.contentType === 'text/plain' || options.contentType === false)\n            ) ? data : JSON.stringify(data);\n        return this.request('POST', getUrl(this.baseUrl, url), payload, options);\n    }\n\n    delete(url, options) {\n        return this.request('DELETE', getUrl(this.baseUrl, url), undefined, options);\n    }\n\n    update(url, data, useMergeStrategy = false) {\n        // Since we are currently using PUT to save the full state back, we have to use mergeMode=REPLACE\n        // to clear out existing values\n        const urlForUpdate = useMergeStrategy === true ? `${url}?${getMergeStrategyParam()}` : url;\n\n        return this.request('PUT', getUrl(this.baseUrl, urlForUpdate), JSON.stringify(data));\n    }\n\n    request(type, url, data, options = {}) {\n        checkType(type, 'string', 'Request type');\n        checkType(url, 'string', 'Url');\n        let requestUrl = url;\n\n        if (data && data.filter) {\n            const urlQueryParams = data.filter\n                // `${str}${separator}${filter}`\n                .reduce((str, filter) => {\n                    const separator = str.length ? '&' : '';\n                    const filterQuery = `filter=${filter}`;\n\n                    return `${str}${separator}${filterQuery}`;\n                }, '');\n\n            delete data.filter; // eslint-disable-line no-param-reassign\n            requestUrl += `?${urlQueryParams}`;\n        }\n\n        const api = this;\n\n        function getOptions(mergeOptions, requestData) {\n            let payload = requestData;\n            if (payload === undefined) {\n                payload = {};\n            } else if (payload === true || payload === false) {\n                payload = payload.toString();\n            }\n\n            const resultOptions = Object.assign({}, api.defaultRequestSettings, mergeOptions);\n\n            resultOptions.type = type;\n            resultOptions.url = requestUrl;\n            resultOptions.data = payload;\n            resultOptions.dataType = options.dataType !== undefined ? options.dataType : 'json';\n            resultOptions.contentType = options.contentType !== undefined ? options.contentType : 'application/json';\n\n            // Only set content type when there is data to send\n            // GET requests and requests without data do not need a Content-Type header\n            // 0 and false are valid requestData values and therefore should have a content type\n            if (type === 'GET' || (!requestData && requestData !== 0 && requestData !== false)) {\n                resultOptions.contentType = undefined;\n            }\n\n            return resultOptions;\n        }\n\n        return new Promise((resolve, reject) => {\n            api.jquery\n                .ajax(getOptions(options, data))\n                .then(processSuccess(resolve), processFailure(reject));\n        });\n    }\n\n    setBaseUrl(baseUrl) {\n        checkType(baseUrl, 'string', 'Base url');\n\n        this.baseUrl = baseUrl;\n\n        return this;\n    }\n}\n\nfunction getApi() {\n    if (getApi.api) {\n        return getApi.api;\n    }\n    return (getApi.api = new Api(jQuery));\n}\n\nApi.getApi = getApi;\n\nexport default Api;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/api/Api.js\n **/","import log from '../logger/Logger';\n\nlet jquery;\n\ntry {\n    jquery = window.jQuery;\n} catch (e) {\n    log.getLogger().error('JQuery not found');\n    jquery = {};\n}\n\nexport default jquery;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/external/jquery.js\n **/","/**\n * @module System\n *\n * @requires d2/system/SystemSettings\n */\nimport Api from '../api/Api';\nimport SystemSettings from './SystemSettings';\nimport SystemConfiguration from './SystemConfiguration';\n\n/**\n * @class System\n *\n * @description\n * Represents the system that can be interacted with. There is a single instance of this pre-defined onto the d2\n * object after initialisation. This can be interacted with using its property objects to among other be used\n * to get and save systemSettings.\n */\nclass System {\n    constructor(settings, configuration) {\n        /**\n         * @property {SystemSettings} settings Contains a reference to a `SystemSettings` instance that can be used\n         * to retrieve and save system settings.\n         *\n         * @description\n         * ```js\n         * d2.system.settings.get('keyLastSuccessfulResourceTablesUpdate')\n         *  .then(systemSettingsValue => {\n         *    console.log('Analytics was last updated on: ' + systemSettingsValue);\n         *  });\n         * ```\n         */\n        this.settings = settings;\n\n        /**\n         * @property {SystemConfiguration} configuration\n         *\n         * @description A representation of the system configuration, that can be used to retreive and change system\n         * configuration options.\n         */\n        this.configuration = configuration;\n\n        /**\n         * @property {Object} systemInfo\n         *\n         * @description An object containing system information about the DHIS2 instance\n         */\n        this.systemInfo = undefined;\n\n        /**\n         * @property {Object} version\n         *\n         * @description An object containing version information about the DHIS2 instance\n         */\n        this.version = undefined;\n\n        /**\n         * @property {Array} installedApps\n         *\n         * @description An array of all the webapps that are installed on the current DHIS2 instance\n         */\n        this.installedApps = undefined;\n    }\n\n    /**\n     * Sets the systemInfo and version properties\n     *\n     * @param systemInfo\n     */\n    setSystemInfo(systemInfo) {\n        this.version = System.parseVersionString(systemInfo.version);\n        this.systemInfo = systemInfo;\n    }\n\n    /**\n     * Sets the list of currently installed webapps\n     *\n     * @param apps\n     */\n    setInstalledApps(apps) {\n        this.installedApps = apps;\n    }\n\n    /**\n     * Refreshes the list of currently installed webapps\n     *\n     * @returns {Promise} A promise that resolves to the list of installed apps\n     */\n    loadInstalledApps() {\n        const api = Api.getApi();\n\n        return api.get('apps')\n            .then(apps => {\n                this.setInstalledApps(apps);\n\n                return apps;\n            });\n    }\n\n    /**\n     * Upload and install a zip file containing a new webapp\n     *\n     * @param zipFile Zip file data from a file input form field\n     * @param onProgress An optional callback that will be called whenever file upload progress info is available\n     * @returns {Promise}\n     */\n    uploadApp(zipFile, onProgress) {\n        const api = Api.getApi();\n        const data = new FormData();\n        let xhr = undefined;\n        data.append('file', zipFile);\n\n        if (onProgress !== undefined) {\n            xhr = new XMLHttpRequest();\n            xhr.upload.onprogress = (progress) => {\n                if (progress.lengthComputable) {\n                    onProgress(progress.loaded / progress.total);\n                }\n            };\n        }\n\n        return api.post('apps', data, {\n            contentType: false,\n            processData: false,\n            xhr: xhr !== undefined ? () => xhr : undefined,\n        });\n    }\n\n    /**\n     * Load the list of apps available in the DHIS 2 app store\n     *\n     * @param compatibleOnly If true, apps that are incompatible with the current system will be filtered out\n     * @returns {Promise}\n     */\n    loadAppStore(compatibleOnly = true) {\n        return new Promise((resolve, reject) => {\n            const api = Api.getApi();\n            api.get('appStore').then(appStoreData => {\n                const appStore = Object.assign({}, appStoreData);\n\n                appStore.apps = appStore.apps\n                    .map(appData => {\n                        const app = Object.assign({}, appData);\n\n                        if (compatibleOnly) {\n                            app.versions = app.versions\n                                .filter(versionData => System.isVersionCompatible(this.version, versionData));\n                        }\n\n                        return app;\n                    })\n                    .filter(appData => appData.versions.length > 0);\n\n                resolve(appStore);\n            }).catch(err => {\n                reject(err);\n            });\n        });\n    }\n\n    /**\n     * Install the specified app version from the DHIS 2 app store\n     *\n     * @param uid The uid of the app version to install\n     * @returns {Promise}\n     */\n    installAppVersion(uid) {\n        const api = Api.getApi();\n        return new Promise((resolve, reject) => {\n            api.post(['appStore', uid].join('/'), '', { dataType: 'text' }).then(() => {\n                resolve();\n            }).catch((err) => {\n                reject(err);\n            });\n        });\n    }\n\n    /**\n     * Remove the specified app from the system\n     *\n     * @param appKey The key of the app to remove\n     * @returns {Promise}\n     */\n    uninstallApp(appKey) {\n        const api = Api.getApi();\n\n        return api.delete(['apps', appKey].join('/'))\n            // TODO: Stop jQuery from rejecting successful promises\n            .catch(() => undefined);\n    }\n\n    /**\n     * Refresh the list of apps that are installed on the server\n     *\n     * @returns {Promise} A promise that resolves to the updated list of installed apps\n     */\n    reloadApps() {\n        const api = Api.getApi();\n        return api.update('apps').then(() => this.loadInstalledApps());\n    }\n\n    // TODO: Document\n    // TODO: Validate string\n    // TODO: Handle valid version objects too\n    static parseVersionString(version) {\n        return {\n            major: Number.parseInt(version, 10),\n            minor: Number.parseInt(version.substring(version.indexOf('.') + 1), 10),\n            snapshot: version.indexOf('-SNAPSHOT') >= 0,\n        };\n    }\n\n    // TODO: Document\n    // Disable eslint complexity warning\n    /* eslint-disable */\n    static compareVersions(a, b) {\n        const from = (typeof a === 'string' || a instanceof String) ? System.parseVersionString(a) : a;\n        const to = (typeof b === 'string' || b instanceof String) ? System.parseVersionString(b) : b;\n\n        if (from.major !== to.major) {\n            return from.major - to.major;\n        } else if (from.minor !== to.minor) {\n            return from.minor - to.minor;\n        }\n\n        return (from.snapshot ? 0 : 1) - (to.snapshot ? 0 : 1);\n    }\n    /* eslint-enable */\n\n    static isVersionCompatible(systemVersion, appVersion) {\n        const isNewEnough = (\n            appVersion.min_platform_version ?\n            System.compareVersions(systemVersion, appVersion.min_platform_version) >= 0 :\n            true\n        );\n        const isNotTooOld = (\n            appVersion.max_platform_version ?\n            System.compareVersions(systemVersion, appVersion.max_platform_version) <= 0 :\n            true\n        );\n\n        return isNewEnough && isNotTooOld;\n    }\n\n    /**\n     * @method getSystem\n     * @static\n     *\n     * @returns {System} Object with the system interaction properties\n     *\n     * @description\n     * Get a new instance of the system object. This will function as a singleton, when a System object has been created\n     * when requesting getSystem again the original version will be returned.\n     */\n    static getSystem() {\n        if (!System.getSystem.system) {\n            System.getSystem.system = new System(new SystemSettings(), new SystemConfiguration());\n        }\n\n        return System.getSystem.system;\n    }\n}\n\nexport default System;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/system/System.js\n **/","/**\n * @module System\n *\n * @requires lib/check\n * @requires api/Api\n */\n\nimport { isString } from '../lib/check';\nimport Api from '../api/Api';\n\n\n/**\n * @class SystemSettings\n *\n * @description\n * Handles communication with the systemSettings endpoint. Can be used to get or save systemSettings.\n */\n// TODO: Return the values from the local cache if we have not updated it? We could\nclass SystemSettings {\n    constructor(api = Api.getApi()) {\n        this.api = api;\n    }\n\n    /**\n     * @method all\n     *\n     * @returns {Promise} Promise that resolves with the systemsettings object from the api.\n     *\n     * @description\n     * Loads all the system settings in the system and returns them as an object from the promise.\n     * ```js\n     * d2.system.settings.all()\n     *  .then(systemSettings => {\n     *    console.log('Analytics was last updated on: ' + systemSettings.keyLastSuccessfulResourceTablesUpdate);\n     *  });\n     * ```\n     */\n    all() {\n        return this.api.get('systemSettings');\n    }\n\n    /**\n     * @method get\n     *\n     * @param {String} systemSettingsKey The identifier of the system setting that should be retrieved.\n     * @returns {Promise} A promise that resolves with the value or will fail if the value is not available.\n     *\n     * @description\n     * ```js\n     * d2.system.settings.get('keyLastSuccessfulResourceTablesUpdate')\n     *  .then(systemSettingsValue => {\n     *    console.log('Analytics was last updated on: ' + systemSettingsValue);\n     *  });\n     * ```\n     */\n    get(systemSettingsKey) {\n        function processValue(value) {\n            // Attempt to parse the response as JSON. If this fails we return the value as is.\n            try {\n                return JSON.parse(value);\n            } catch (e) {\n                return value;\n            }\n        }\n\n        return new Promise((resolve, reject) => {\n            if (!isString(systemSettingsKey)) {\n                throw new TypeError('A \"key\" parameter should be specified when calling get() on systemSettings');\n            }\n\n            this.api.get(['systemSettings', systemSettingsKey].join('/'), undefined, { dataType: 'text' })\n                .then(response => {\n                    const systemSettingValue = processValue(response);\n                    if (systemSettingValue) {\n                        resolve(processValue(response));\n                    }\n                    reject(new Error('The requested systemSetting has no value or does not exist.'));\n                });\n        });\n    }\n\n    set(systemSettingsKey, value) {\n        const settingUrl = ['systemSettings', systemSettingsKey].join('/');\n        if (value === null || (`${value}`).length === 0) {\n            return this.api.delete(settingUrl, { dataType: 'text' });\n        }\n        return this.api.post(settingUrl, value, { dataType: 'text', contentType: 'text/plain' });\n    }\n}\n\nexport default SystemSettings;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/system/SystemSettings.js\n **/","/**\n * @module System\n *\n * @requires lib/check\n * @requires api/Api\n */\nimport Api from '../api/Api';\n\n/**\n * Handles communication with the configuration endpoint. Can be used to get or set configuration options.\n */\nclass SystemConfiguration {\n    constructor(api = Api.getApi()) {\n        this.api = api;\n\n        this._configuration = undefined;\n        this._configPromise = null;\n    }\n\n    /**\n     * Fetches all system configuration settings from the API and caches them so that future\n     * calls to this function won't call the API again.\n     *\n     * @param {boolean=false} ignoreCache If set to true, calls the API regardless of cache status\n     * @returns {Promise} Promise that resolves with all the individual configuration options from the api.\n     */\n    all(ignoreCache) {\n        if (this._configPromise === null || ignoreCache === true) {\n            this._configPromise = this.api.get('configuration')\n                .then(configuration => {\n                    this._configuration = configuration;\n                    return this._configuration;\n                });\n        }\n\n        return this._configPromise;\n    }\n\n    /**\n     * Returns the value of the specified configuration option.\n     *\n     * This is a convenience method that works exactly the same as calling `configuration.all()[name]`.\n     *\n     * @param key {String}\n     * @param {boolean=false} ignoreCache If set to true, calls the API regardless of cache status\n     * @returns {Promise}\n     */\n    get(key, ignoreCache) {\n        return this.all(ignoreCache).then(config => {\n            if (config.hasOwnProperty(key)) {\n                return Promise.resolve(config[key]);\n            }\n\n            return Promise.reject(`Unknown config option: ${key}`);\n        });\n    }\n\n\n    /**\n     * Send a query to the API to change the value of a configuration key to the specified value.\n     *\n     * @param key {String}\n     * @param value {String|null}\n     * @returns {Promise}\n     */\n    set(key, value) {\n        const that = this;\n        let req;\n\n        if (key === 'systemId') {\n            return Promise.reject('The system ID can\\'t be changed');\n        } else if (\n            (key === 'feedbackRecipients' || key === 'selfRegistrationOrgUnit' || key === 'selfRegistrationRole') &&\n            (value === 'null' || value === null)\n        ) {\n            // Only valid UIDs are accepted when POST'ing, so we have to use DELETE in stead of POST'ing a null value.\n            req = this.api.delete(['configuration', key].join('/'), { dataType: 'text' });\n        } else if (key === 'corsWhitelist') {\n            // The corsWhitelist endpoint expects an array of URL's, while here value is expected to be a string.\n            req = this.api.post(['configuration', key].join('/'), value.trim().split('\\n'), { dataType: 'text' });\n        } else {\n            req = this.api.post(['configuration', key].join('/'), value, {\n                dataType: 'text',\n                contentType: 'text/plain',\n            });\n        }\n\n        return req\n            .then(() => {\n                // Ideally we'd update the cache here, but doing so requires another trip to the server\n                // For now, just bust the cache to ensure it's not incorrect\n                that._configuration = undefined;\n                return Promise.resolve();\n            })\n            .catch(() => Promise.reject(`No configuration found for ${key}`));\n    }\n}\n\nexport default SystemConfiguration;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/system/SystemConfiguration.js\n **/","function isPlainValue(collection) {\n    return function isPlainValueInCollection(property) {\n        return collection.indexOf(property) === -1;\n    };\n}\n\nfunction isCollectionProperty(collection) {\n    return function (property) {\n        return !isPlainValue(collection)(property);\n    };\n}\n\nexport function getJSONForProperties(model, properties) {\n    const objectToSave = {};\n    const collectionProperties = model\n        .getCollectionChildrenPropertyNames()\n        // Even though attributeValues are considered collections, they are handled separately due to their\n        // difference in structure.\n        .filter(propertyName => propertyName !== 'attributeValues');\n\n    const propertyNames = Object.keys(model.modelDefinition.modelValidations)\n        .filter(propertyName => properties.indexOf(propertyName) >= 0)\n        .filter(propertyName => model.dataValues[propertyName] !== undefined && model.dataValues[propertyName] !== null);\n\n    // Handle plain values\n    propertyNames\n        .filter(isPlainValue(collectionProperties))\n        .forEach(propertyName => {\n            objectToSave[propertyName] = model.dataValues[propertyName];\n        });\n\n    // Handle Collection properties\n    propertyNames\n        .filter(isCollectionProperty(collectionProperties))\n        .forEach((propertyName) => {\n            // compulsoryDataElementOperands and greyedFields are not arrays of models.\n            // TODO: This is not the proper way to do this. We should check if the array contains Models\n            if (propertyName === 'compulsoryDataElementOperands' || propertyName === 'greyedFields') {\n                objectToSave[propertyName] = Array.from(model.dataValues[propertyName]);\n                return;\n            }\n\n            // Transform an object collection to an array of objects with id properties\n            objectToSave[propertyName] = Array\n                .from(model.dataValues[propertyName].values())\n                .filter(value => value.id)\n                .map((childModel) => {\n                    // Legends can be saved as part of the LegendSet object.\n                    // To make this work properly we will return all of the properties for the items in the collection\n                    // instead of just the `id` fields\n                    if (model.modelDefinition && model.modelDefinition.name === 'legendSet') {\n                        return getOwnedPropertyJSON.call(childModel.modelDefinition, childModel); // eslint-disable-line no-use-before-define\n                    }\n\n                    // For any other types we return an object with just an id\n                    return { id: childModel.id };\n                });\n        });\n\n    return objectToSave;\n}\n\nexport function getOwnedPropertyJSON(model) {\n    const ownedProperties = model.modelDefinition.getOwnedPropertyNames();\n\n    return getJSONForProperties(model, ownedProperties);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/model/helpers/json.js\n **/","/**\n * @module Model\n *\n * @requires lib/check\n * @requires model/ModelBase\n */\n\nimport { checkType } from '../lib/check';\nimport ModelBase from './ModelBase';\nimport { DIRTY_PROPERTY_LIST } from './ModelBase';\n\n// TODO: Perhaps we can generate model classes dynamically based on the schemas and inherit from this.\n/**\n * @class Model\n * @extends ModelBase\n *\n * @description\n * A Model represents an object from the DHIS2 Api. A model is created based of a ModelDefinition. The ModelDefinition\n * has the properties that the model should have.\n */\nclass Model {\n\n    /**\n     * @constructor\n     *\n     * @param {ModelDefinition} modelDefinition The model definition that corresponds with the model.\n     * This is essential defining what type the model is representing.\n     *\n     * @description\n     * Will create a new model instanced based on the model definition. When creating a new instance the model\n     * definition needs to have both the modelValidations and modelProperties.\n     *\n     * The model properties will depend on the ModelDefinition. A model definition is based on a DHIS2 Schema.\n     */\n    constructor(modelDefinition) {\n        checkType(modelDefinition, 'object', 'modelDefinition');\n        checkType(modelDefinition.modelProperties, 'object', 'modelProperties');\n\n        /**\n         * @property {ModelDefinition} modelDefinition Stores reference to the modelDefinition that was used when\n         * creating the model. This property is not enumerable or writable and will therefore not show up when looping\n         * over the object properties.\n         */\n        Object.defineProperty(this, 'modelDefinition', {\n            enumerable: false,\n            configurable: false,\n            writable: false,\n            value: modelDefinition,\n        });\n\n        /**\n         * @property {Boolean} dirty Represents the state of the model. When the model is concidered `dirty`\n         * there are pending changes.\n         * This property is not enumerable or writable and will therefore not show up when looping\n         * over the object properties.\n         */\n        Object.defineProperty(this, 'dirty', {\n            enumerable: false,\n            configurable: false,\n            writable: true,\n            value: false,\n        });\n\n        /**\n         * @property {Object} dataValues Values object used to store the actual model values. Normally access to the\n         * Model data will be done through accessor properties that are generated from the modelDefinition.\n         *\n         * @note {warning} This should not be accessed directly.\n         */\n        Object.defineProperty(this, 'dataValues', {\n            enumerable: false,\n            configurable: true,\n            writable: true,\n            value: {},\n        });\n\n        const hasKeys = (object) => object && !!Object.keys(object).length;\n        const attributes = {};\n        const attributeProperties = modelDefinition.attributeProperties;\n        if (hasKeys(attributeProperties)) {\n            Object.defineProperty(this, 'attributes', {\n                enumerable: false,\n                value: attributes,\n            });\n\n            Object\n                .keys(attributeProperties)\n                .forEach(attributeName => {\n                    Object.defineProperty(attributes, attributeName, {\n                        enumerable: true,\n                        get: () => {\n                            if (!Array.isArray(this.attributeValues)) {\n                                return undefined;\n                            }\n\n                            return this.attributeValues\n                                .filter(value => value.attribute.name === attributeName)\n                                .reduce((current, value) => value.value, undefined);\n                        },\n                        set: (value) => {\n                            if (!this.attributeValues) { this.attributeValues = []; }\n\n                            const attributeValue = this.attributeValues\n                                .filter(av => av.attribute.name === attributeName)\n                                .reduce((current, av) => av, undefined);\n\n                            if (attributeValue) {\n                                // Don't do anything if the value stayed the same\n                                if (attributeValue.value === value) {\n                                    return;\n                                }\n\n                                attributeValue.value = value;\n                            } else {\n                                // Add the new attribute value to the attributeValues collection\n                                this.attributeValues.push({\n                                    value,\n                                    attribute: {\n                                        id: attributeProperties[attributeName].id,\n                                        name: attributeProperties[attributeName].name,\n                                    },\n                                });\n                            }\n\n                            // Set the model to be dirty\n                            this.dirty = true;\n                        },\n                    });\n                });\n        }\n\n        Object.defineProperties(this, modelDefinition.modelProperties);\n\n        this[DIRTY_PROPERTY_LIST] = new Set([]);\n    }\n\n    /**\n     * @method create\n     * @static\n     *\n     * @param {ModelDefinition} modelDefinition ModelDefinition from which the model should be created\n     * @returns {Model} Returns an instance of the model.\n     *\n     * @description The static method is a factory method to create Model objects. It calls `new Model()` with the passed `ModelDefinition`.\n     *\n     * ```js\n     * let myModel = Model.create(modelDefinition);\n     * ```\n     */\n    static create(modelDefinition) {\n        return new Model(modelDefinition);\n    }\n}\n\nModel.prototype = ModelBase;\n\nexport default Model;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/model/Model.js\n **/","import { checkType, isObject, checkDefined, isDefined } from '../lib/check';\nimport { addLockedProperty, curry, copyOwnProperties, updateAPIUrlWithBaseUrlVersionNumber } from '../lib/utils';\nimport ModelDefinitions from './ModelDefinitions';\nimport Model from './Model';\nimport ModelCollection from './ModelCollection';\nimport ModelCollectionProperty from './ModelCollectionProperty';\nimport schemaTypes from '../lib/SchemaTypes';\nimport Filters from './Filters';\nimport { DIRTY_PROPERTY_LIST } from './ModelBase';\nimport { getDefaultValuesForModelType } from './config';\nimport { getOwnedPropertyJSON } from './helpers/json';\n\nfunction createModelPropertyDescriptor(propertiesObject, schemaProperty) {\n    const propertyName = schemaProperty.collection ? schemaProperty.collectionName : schemaProperty.name;\n    const propertyDetails = {\n        // Actual property descriptor properties\n        configurable: false,\n        enumerable: true,\n        get() {\n            return this.dataValues[propertyName];\n        },\n    };\n\n    // Only add a setter for writable properties\n    if (schemaProperty.writable) {\n        propertyDetails.set = function dynamicPropertySetter(value) {\n            // TODO: Objects and Arrays are considered unequal when their data is the same and therefore trigger a dirty\n            if ((!isObject(value) && (value !== this.dataValues[propertyName])) || isObject(value)) {\n                this.dirty = true;\n                this[DIRTY_PROPERTY_LIST].add(propertyName);\n                this.dataValues[propertyName] = value;\n            }\n        };\n    }\n\n    if (propertyName) {\n        propertiesObject[propertyName] = propertyDetails; // eslint-disable-line no-param-reassign\n    }\n}\n\nfunction createPropertiesObject(schemaProperties) {\n    const propertiesObject = {};\n    const createModelPropertyDescriptorOn = curry(createModelPropertyDescriptor, propertiesObject);\n\n    (schemaProperties || []).forEach(createModelPropertyDescriptorOn);\n\n    return propertiesObject;\n}\n\nfunction createValidationSetting(validationObject, schemaProperty) {\n    const propertyName = schemaProperty.collection ? schemaProperty.collectionName : schemaProperty.name;\n    const validationDetails = {\n        persisted: schemaProperty.persisted,\n        type: schemaTypes.typeLookup(schemaProperty.propertyType),\n        required: schemaProperty.required,\n        min: schemaProperty.min,\n        max: schemaProperty.max,\n        owner: schemaProperty.owner,\n        unique: schemaProperty.unique,\n        writable: schemaProperty.writable,\n        constants: schemaProperty.constants,\n        ordered: Boolean(schemaProperty.ordered),\n    };\n\n    function getReferenceTypeFrom(property) {\n        if (property.href) {\n            return property.href.split('/').pop();\n        }\n\n        return undefined;\n    }\n\n    // Add a referenceType to be able to get a hold of the reference objects model.\n    if (\n        validationDetails.type === 'REFERENCE' ||\n        (validationDetails.type === 'COLLECTION' &&\n        schemaProperty.itemPropertyType === 'REFERENCE')\n    ) {\n        validationDetails.referenceType = getReferenceTypeFrom(schemaProperty);\n    }\n\n    if (propertyName) {\n        validationObject[propertyName] = validationDetails; // eslint-disable-line no-param-reassign\n    }\n}\n\nfunction createValidations(schemaProperties) {\n    const validationsObject = {};\n    const createModelPropertyOn = curry(createValidationSetting, validationsObject);\n\n    (schemaProperties || []).forEach(createModelPropertyOn);\n\n    return validationsObject;\n}\n\n\nfunction shouldBeModelCollectionProperty(model, models) {\n    return function shouldBeModelCollectionPropertyIterator(modelProperty) {\n        return model &&\n            models &&\n            model.modelDefinition &&\n            model.modelDefinition.modelValidations &&\n            model.modelDefinition.modelValidations[modelProperty] &&\n            model.modelDefinition.modelValidations[modelProperty].type === 'COLLECTION' &&\n            models.hasOwnProperty(model.modelDefinition.modelValidations[modelProperty].referenceType);\n    };\n}\n\n\nfunction isAnUpdate(modelToCheck) {\n    return Boolean(modelToCheck.id);\n}\n\n/**\n * @class ModelDefinition\n *\n * @description\n * Definition of a Model. Basically this object contains the meta data related to the Model. Like `name`, `apiEndPoint`, `modelValidation`, etc.\n * It also has methods to create and load Models that are based on this definition. The Data element `ModelDefinition` would be used to create Data Element `Model`s\n *\n * Note: ModelDefinition has a property `api` that is used for the communication with the dhis2 api. The value of this\n * property is an instance of `Api`.\n */\nclass ModelDefinition {\n    constructor(modelName, modelNamePlural, modelOptions, properties, validations, attributes, authorities) {\n        checkType(modelName, 'string');\n        checkType(modelNamePlural, 'string', 'Plural');\n\n        addLockedProperty(this, 'name', modelName);\n        addLockedProperty(this, 'plural', modelNamePlural);\n        addLockedProperty(this, 'isShareable', (modelOptions && modelOptions.shareable) || false);\n        addLockedProperty(this, 'isMetaData', (modelOptions && modelOptions.metadata) || false);\n        addLockedProperty(this, 'apiEndpoint', modelOptions && modelOptions.apiEndpoint);\n        addLockedProperty(this, 'javaClass', modelOptions && modelOptions.klass);\n        addLockedProperty(this, 'identifiableObject', modelOptions && modelOptions.identifiableObject);\n        addLockedProperty(this, 'modelProperties', properties);\n        addLockedProperty(this, 'modelValidations', validations);\n        addLockedProperty(this, 'attributeProperties', attributes);\n        addLockedProperty(this, 'authorities', authorities);\n\n        this.filters = Filters.getFilters(this);\n    }\n\n    filter() {\n        return this.clone().filters;\n    }\n\n    /**\n     * @method create\n     *\n     * @param {Object} [data] Datavalues that should be loaded into the model.\n     *\n     * @returns {Model} Returns the newly created model instance.\n     *\n     * @description\n     * Creates a fresh Model instance based on the `ModelDefinition`. If data is passed into the method that\n     * data will be loaded into the matching properties of the model.\n     *\n     * ```js\n     * dataElement.create({name: 'ANC', id: 'd2sf33s3ssf'});\n     * ```\n     */\n    create(data) {\n        const model = Model.create(this);\n        const validations = model.modelDefinition.modelValidations;\n        const models = ModelDefinitions.getModelDefinitions();\n        const dataValues = Object.assign({}, data);\n\n        if (data) {\n            // Set the data values onto the model directly\n            Object\n                .keys(model)\n                .forEach((modelProperty) => {\n                    const referenceType =\n                        validations[modelProperty].hasOwnProperty('referenceType') &&\n                        validations[modelProperty].referenceType ||\n                        models.hasOwnProperty(modelProperty) && modelProperty;\n\n                    // For collections of objects, create ModelCollectionProperties rather than plain arrays\n                    if (\n                        referenceType &&\n                        models.hasOwnProperty(referenceType) &&\n                        Array.isArray(data[modelProperty])\n                    ) {\n                        // Object properties that are not themselves instances of models need special handling because\n                        // we can't turn them into ModelCollectionProperties\n                        // TODO: Proper generic handling of translations\n                        if (modelProperty === 'translations' || modelProperty === 'greyedFields') {\n                            dataValues[modelProperty] = data[modelProperty];\n                        } else {\n                            dataValues[modelProperty] = ModelCollectionProperty\n                                .create(\n                                    model,\n                                    models[referenceType],\n                                    data[modelProperty].map(d => models[referenceType].create(d))\n                                );\n                        }\n                    }\n                    model.dataValues[modelProperty] = dataValues[modelProperty];\n                });\n        } else {\n            // Create empty ModelCollectionProperties for models without data.\n            Object.keys(model)\n                .filter(shouldBeModelCollectionProperty(model, models))\n                .forEach((modelProperty) => {\n                    const referenceType = model.modelDefinition.modelValidations[modelProperty].referenceType;\n\n                    model.dataValues[modelProperty] = ModelCollectionProperty.create(model, models[referenceType], []);\n                });\n\n            // When no initial values are provided we are dealing with a new Model. For some properties there are\n            // implicit default values that should be set. DHIS2 has some default values for models that would implicitly\n            // be set when omitting sending a value on POST, we'll set these properties to their default values so they\n            // are reflected in read operations on the model and to make them more transparent.\n            const defaultValues = getDefaultValuesForModelType(model.modelDefinition.name);\n            const checkForModelProperty = shouldBeModelCollectionProperty(model, models);\n\n            Object\n                .keys(model)\n                .filter((modelProperty) => !checkForModelProperty(modelProperty))\n                .forEach((modelProperty) => {\n                    model.dataValues[modelProperty] = defaultValues[modelProperty];\n                });\n        }\n\n        return model;\n    }\n\n    clone() {\n        const ModelDefinitionPrototype = Object.getPrototypeOf(this);\n        const priorFilters = this.filters.filters;\n        let clonedDefinition = Object.create(ModelDefinitionPrototype);\n\n        clonedDefinition = copyOwnProperties(clonedDefinition, this);\n        clonedDefinition.filters = Filters.getFilters(clonedDefinition);\n        clonedDefinition.filters.filters = priorFilters.map(filter => filter);\n\n        return clonedDefinition;\n    }\n\n    /**\n     * @method get\n     *\n     * @param {String} identifier\n     * @param {Object} [queryParams={fields: ':all'}] Query parameters that should be passed to the GET query.\n     * @returns {Promise} Resolves with a `Model` instance or an error message.\n     *\n     * @description\n     * Get a `Model` instance from the api loaded with data that relates to `identifier`.\n     * This will do an API call and return a Promise that resolves with a `Model` or rejects with the api error message.\n     *\n     * ```js\n     * //Do a get request for the dataElement with given id (d2sf33s3ssf) and print it's name\n     * //when that request is complete and the model is loaded.\n     * dataElement.get('d2sf33s3ssf')\n     *   .then(model => console.log(model.name));\n     * ```\n     */\n    get(identifier, queryParams = { fields: ':all,attributeValues[:all,attribute[id,name,displayName]]' }) {\n        checkDefined(identifier, 'Identifier');\n\n        if (Array.isArray(identifier)) {\n            return this.list({ filter: [`id:in:[${identifier.join(',')}]`] });\n        }\n\n        // TODO: should throw error if API has not been defined\n        return this.api.get([this.apiEndpoint, identifier].join('/'), queryParams)\n            .then((data) => this.create(data))\n            .catch((response) => {\n                if (response.message) {\n                    return Promise.reject(response.message);\n                }\n\n                return Promise.reject(response);\n            });\n    }\n\n    /**\n     * @method list\n     *\n     * @param {Object} [queryParams={fields: ':all'}] Query parameters that should be passed to the GET query.\n     * @returns {Promise} ModelCollection collection of models objects of the `ModelDefinition` type.\n     *\n     * @description\n     * Loads a list of models.\n     *\n     * ```js\n     * // Loads a list of models and prints their name.\n     * dataElement.list()\n     *   .then(modelCollection => {\n     *     modelCollection.forEach(model => console.log(model.name));\n     *   });\n     * ```\n     */\n    list(queryParams = {}) {\n        const definedFilters = this.filters.getFilters();\n        // FIXME: Looks like when specific filters are defined the model.filter() filters are not applied (they should probably be merged)\n        if (!isDefined(queryParams.filter) && definedFilters.length) {\n            queryParams.filter = definedFilters; // eslint-disable-line no-param-reassign\n        }\n\n        return this.api.get(this.apiEndpoint, Object.assign({ fields: ':all' }, queryParams))\n            .then((responseData) => ModelCollection.create(\n                this,\n                responseData[this.plural].map((data) => this.create(data)),\n                responseData.pager\n            ));\n    }\n\n    /**\n     * @method save\n     *\n     * @param {Model} model The model that should be saved to the server.\n     * @returns {Promise} A promise which resolves when the save was successful\n     * or rejects when it failed. The promise will resolve with the data that is\n     * returned from the server.\n     *\n     * @description\n     * This method is used by the `Model` instances to save the model when calling `model.save()`.\n     *\n     * @note {warning} This should generally not be called directly.\n     */\n    // TODO: check the return status of the save to see if it was actually successful and not ignored\n    save(model) {\n        if (isAnUpdate(model)) {\n            const jsonPayload = getOwnedPropertyJSON.bind(this)(model);\n            const updateUrl = updateAPIUrlWithBaseUrlVersionNumber(model.dataValues.href, this.api.baseUrl);\n\n            // Save the existing model\n            return this.api.update(updateUrl, jsonPayload, true);\n        }\n\n        return this.saveNew(model);\n    }\n\n    saveNew(model) {\n        const jsonPayload = getOwnedPropertyJSON.bind(this)(model);\n\n        // Its a new object\n        return this.api.post(this.apiEndpoint, jsonPayload);\n    }\n\n    /**\n     * @method getOwnedPropertyNames\n     *\n     * @returns {String[]} Returns an array of property names.\n     *\n     * @description\n     * This method returns a list of property names that that are defined\n     * as \"owner\" properties on this schema. This means these properties are used\n     * when saving the model to the server.\n     *\n     * ```js\n     * dataElement.getOwnedPropertyNames()\n     * ```\n     */\n    getOwnedPropertyNames() {\n        return Object.keys(this.modelValidations)\n            .filter(propertyName => this.modelValidations[propertyName].owner);\n    }\n\n    /**\n     * @method delete\n     *\n     * @returns {Promise} Returns a promise to the deletion operation\n     *\n     * @description\n     * This method is used by the `Model` instances to delete the model when calling `model.delete()`.\n     *\n     * @note {warning} This should generally not be called directly.\n     */\n    delete(model) {\n        if (model.dataValues.href) {\n            return this.api.delete(model.dataValues.href);\n        }\n        return this.api.delete([model.modelDefinition.apiEndpoint, model.dataValues.id].join('/'));\n    }\n\n    /**\n     * @method createFromSchema\n     * @static\n     *\n     * @param {Object} schema A schema definition received from the web api (/api/schemas)\n     * @param {Object[]} attributes A list of attribute objects that describe custom attributes (/api/attributes)\n     *\n     * @returns {ModelDefinition} Frozen model definition object.\n     *\n     * @description\n     * This method creates a new `ModelDefinition` based on a JSON structure called\n     * a schema. A schema represents the structure of a domain model as it is\n     * required by DHIS. Since these schemas can not be altered on the server from\n     * the modelDefinition is frozen to prevent accidental changes to the definition.\n     *\n     * ```js\n     * ModelDefinition.createFromSchema(schemaDefinition, attributes);\n     * ```\n     *\n     * @note {info} An example of a schema definition can be found on\n     * https://apps.dhis2.org/demo/api/schemas/dataElement\n     */\n    static createFromSchema(schema, attributes = []) {\n        let ModelDefinitionClass;\n        checkType(schema, Object, 'Schema');\n\n        if (typeof ModelDefinition.specialClasses[schema.name] === 'function') {\n            ModelDefinitionClass = ModelDefinition.specialClasses[schema.name];\n        } else {\n            ModelDefinitionClass = ModelDefinition;\n        }\n\n        return Object.freeze(new ModelDefinitionClass(\n            schema.name,\n            schema.plural,\n            schema,\n            Object.freeze(createPropertiesObject(schema.properties)),\n            Object.freeze(createValidations(schema.properties)),\n            attributes\n                .reduce((current, attributeDefinition) => {\n                    current[attributeDefinition.name] = attributeDefinition; // eslint-disable-line no-param-reassign\n                    return current;\n                }, {}),\n            schema.authorities\n        ));\n    }\n}\n\nclass UserModelDefinition extends ModelDefinition {\n    // TODO: userCredentials should always be included, no matter what the query params, that is currently not the case\n    get(identifier, queryParams = { fields: ':all,userCredentials[:owner]' }) {\n        return super.get(identifier, queryParams);\n    }\n}\n\nclass DataSetModelDefinition extends ModelDefinition {\n    create(data = {}) {\n        const hasData = Boolean(Object.keys(data).length);\n\n        // Filter out the compulsoryDataElementOperands structure from the retrieved data\n        // This structure does not follow the convention of a typical reference. We can not create a proper\n        // ModelCollection for this collection.\n        const dataClone = Object\n            .keys(data)\n            .filter(key => key !== 'compulsoryDataElementOperands')\n            .reduce((obj, key) => {\n                obj[key] = data[key]; // eslint-disable-line no-param-reassign\n                return obj;\n            }, {});\n\n        // Create the model using the usual way of creating a model\n        // Only pass data when there is data in the object passed to the constructor. This will guarantee\n        // that the empty ModelCollections are created properly.\n        const model = super.create(hasData ? dataClone : undefined);\n\n        // Set the compulsoryDataElementOperands onto the dataValues so it will be included during the save operations\n        model.dataValues.compulsoryDataElementOperands = data.compulsoryDataElementOperands;\n\n        return model;\n    }\n}\n\nModelDefinition.specialClasses = {\n    user: UserModelDefinition,\n    dataSet: DataSetModelDefinition,\n};\n\nexport default ModelDefinition;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/model/ModelDefinition.js\n **/","import { checkType, isType } from '../lib/check';\n\n/**\n * @class ModelDefinitions\n *\n * @description\n * Contains all the `ModelDefinition`s that are available. The definitions are properties on the object.\n * This would be used as a main entry point to do any interaction.\n *\n * After calling the initialise function `d2({baseUrl: 'dhis/api'})` this object is the `models` property\n * that allows you to access\n *\n * ```js\n * models.dataElement.getList();\n * ```\n */\nclass ModelDefinitions {\n    // TODO: Elaborate this documentation\n    /**\n     * @method add\n     * @param {ModelDefinition} modelDefinition Add a model definition to the definitions collection\n     *\n     * @description\n     * This will allow you to add your own custom ModelDefinitions.\n     *\n     * The Definition object should have the following properties\n     * `modelName, modelNamePlural, modelOptions, properties, validations`\n     *\n     * ```js\n     * models.add({name: 'MyDefinition', plural: 'MyDefinitions', endPointname: '/myDefinition'});\n     * ```\n     */\n    add(modelDefinition) {\n        try {\n            checkType(modelDefinition.name, 'string');\n        } catch (e) {\n            throw new Error('Name should be set on the passed ModelDefinition to add one');\n        }\n\n        if (this[modelDefinition.name]) {\n            throw new Error(['Model', modelDefinition.name, 'already exists'].join(' '));\n        }\n        this[modelDefinition.name] = modelDefinition;\n\n        if (isType(modelDefinition.plural, 'string')) {\n            this[modelDefinition.plural] = modelDefinition;\n        }\n    }\n\n    /**\n     * @method mapThroughDefinitions\n     *\n     * @param {Function} transformer Transformer function that will be run for each `ModelDefinition`\n     * @returns {Array} Array with the `ModelDefinition` objects.\n     *\n     * @description\n     * Map through the modelDefinitions like you would with a simple `Array.map()`\n     *\n     * ```js\n     * models.mapThroughDefinitions(definition => console.log(definition.name);\n     * ```\n     *\n     * @note {info} When mapping through the definition list `transformer` is called with the just the definition\n     * Unlike other map functions, no index or the full object is being passed.\n     *\n     * @note {warn} The resulting array contains references to the actual objects. It does not work like immutable array functions.\n     *\n     */\n    mapThroughDefinitions(transformer) {\n        const result = [];\n        let modelDefinition;\n\n        checkType(transformer, 'function', 'transformer');\n\n        for (modelDefinition in this) {\n            if (this.hasOwnProperty(modelDefinition) && !(this[modelDefinition].plural === modelDefinition)) {\n                result.push(transformer(this[modelDefinition]));\n            }\n        }\n\n        return result;\n    }\n}\n\n// Model definitions singleton!\nfunction getModelDefinitions() {\n    if (getModelDefinitions.modelDefinitions) {\n        return getModelDefinitions.modelDefinitions;\n    }\n    return (getModelDefinitions.modelDefinitions = new ModelDefinitions());\n}\n\nModelDefinitions.getModelDefinitions = getModelDefinitions;\n\nexport default ModelDefinitions;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/model/ModelDefinitions.js\n **/","import { isValidUid, isArray, checkType } from '../lib/check';\nimport { throwError } from '../lib/utils';\nimport Model from './Model';\nimport ModelDefinition from './ModelDefinition';\nimport Pager from '../pager/Pager';\n\nfunction throwIfContainsOtherThanModelObjects(values) {\n    if (values && values[Symbol.iterator]) {\n        const toCheck = [...values];\n        toCheck.forEach((value) => {\n            if (!(value instanceof Model)) {\n                throwError('Values of a ModelCollection must be instances of Model');\n            }\n        });\n    }\n}\n\nfunction throwIfContainsModelWithoutUid(values) {\n    if (values && values[Symbol.iterator]) {\n        const toCheck = [...values];\n        toCheck.forEach((value) => {\n            if (!isValidUid(value.id)) {\n                throwError('Can not add a Model without id to a ModelCollection');\n            }\n        });\n    }\n}\n\n/**\n * @class ModelCollection\n *\n * @description\n * Collection of `Model` objects that can be interacted upon. Can contain a pager object to easily navigate\n * pages within the system.\n */\nclass ModelCollection {\n\n    /**\n     * @constructor\n     *\n     * @param {ModelDefinition} modelDefinition The `ModelDefinition` that this collection is for. This defines the type of models that\n     * are allowed to be added to the collection.\n     * @param {Model[]} values Initial values that should be added to the collection.\n     * @param {Object} pagerData Object with pager data. This object contains data that will be put into the `Pager` instance.\n     *\n     * @description\n     *\n     * Creates a new `ModelCollection` object based on the passed `modelDefinition`. Additionally values can be added by passing\n     * `Model` objects in the `values` parameter. The collection also exposes a pager object which can be used to navigate through\n     * the pages in the collection. For more information see the `Pager` class.\n     */\n    constructor(modelDefinition, values, pagerData) {\n        checkType(modelDefinition, ModelDefinition);\n        /**\n         * @property {ModelDefinition} modelDefinition The `ModelDefinition` that this collection is for. This defines the type of models that\n         * are allowed to be added to the collection.\n         */\n        this.modelDefinition = modelDefinition;\n\n        /**\n         * @property {Pager} pager Pager object that is created from the pagerData that was passed when the collection was constructed. If no pager data was present\n         * the pager will have default values.\n         */\n        this.pager = new Pager(pagerData, modelDefinition);\n\n        // We can not extend the Map object right away in v8 contexts.\n        this.valuesContainerMap = new Map();\n        this[Symbol.iterator] = this.valuesContainerMap[Symbol.iterator].bind(this.valuesContainerMap);\n\n        throwIfContainsOtherThanModelObjects(values);\n        throwIfContainsModelWithoutUid(values);\n\n        // Add the values separately as not all Iterators return the same values\n        if (isArray(values)) {\n            values.forEach((value) => this.valuesContainerMap.set(value.id, value));\n        }\n    }\n\n    /**\n     * @property {Number} size The number of Model objects that are in the collection.\n     *\n     * @description\n     * Contains the number of Model objects that are in this collection. If the collection is a collection with a pager. This\n     * does not take into account all the items in the database. Therefore when a pager is present on the collection\n     * the size will return the items on that page. To get the total number of items consult the pager.\n     */\n    get size() {\n        return this.valuesContainerMap.size;\n    }\n\n    /**\n     * @method add\n     *\n     * @param {Model} value Model instance to add to the collection.\n     * @returns {ModelCollection} Returns itself for chaining purposes.\n     *\n     * @throws {Error} When the passed value is not an instance of `Model`\n     * @throws {Error} Throws error when the passed value does not have a valid id.\n     *\n     * @description\n     * Adds a Model instance to the collection. The model is checked if it is a correct instance of `Model` and if it has\n     * a valid id. A valid id is a uid string of 11 alphanumeric characters.\n     */\n    add(value) {\n        throwIfContainsOtherThanModelObjects([value]);\n        throwIfContainsModelWithoutUid([value]);\n\n        this.set(value.id, value);\n        return this;\n    }\n\n    /**\n     * @method toArray\n     *\n     * @returns {Array} Returns the values of the collection as an array.\n     *\n     * @description\n     * If working with the Map type object is inconvenient this method can be used to return the values\n     * of the collection as an Array object.\n     */\n    toArray() {\n        const resultArray = [];\n\n        this.forEach((model) => {\n            resultArray.push(model);\n        });\n\n        return resultArray;\n    }\n\n    static create(modelDefinition, values, pagerData) {\n        return new ModelCollection(modelDefinition, values, pagerData);\n    }\n\n    static throwIfContainsOtherThanModelObjects(value) {\n        return throwIfContainsOtherThanModelObjects(value);\n    }\n\n    static throwIfContainsModelWithoutUid(value) {\n        return throwIfContainsModelWithoutUid(value);\n    }\n\n    /**\n     * @method clear\n     *\n     * @returns {this} Returns itself for chaining purposes;\n     *\n     * @description\n     * Clear the collection and remove all it's values.\n     */\n    // TODO: Reset the pager?\n    clear() {\n        return this.valuesContainerMap.clear.apply(this.valuesContainerMap);\n    }\n\n    delete(...args) {\n        return this.valuesContainerMap.delete.apply(this.valuesContainerMap, args);\n    }\n\n    entries() {\n        return this.valuesContainerMap.entries.apply(this.valuesContainerMap);\n    }\n\n    // FIXME: This calls the forEach function with the values Map and not with the ModelCollection as the third argument\n    forEach(...args) {\n        return this.valuesContainerMap.forEach.apply(this.valuesContainerMap, args);\n    }\n\n    get(...args) {\n        return this.valuesContainerMap.get.apply(this.valuesContainerMap, args);\n    }\n\n    has(...args) {\n        return this.valuesContainerMap.has.apply(this.valuesContainerMap, args);\n    }\n\n    keys() {\n        return this.valuesContainerMap.keys.apply(this.valuesContainerMap);\n    }\n\n    set(...args) {\n        return this.valuesContainerMap.set.apply(this.valuesContainerMap, args);\n    }\n\n    values() {\n        return this.valuesContainerMap.values.apply(this.valuesContainerMap);\n    }\n}\n\nexport default ModelCollection;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/model/ModelCollection.js\n **/","import { isDefined } from '../lib/check';\n\n/**\n * @class Pager\n *\n * @description\n * Pager object that can be used to navigate pages within a `Modelcollection`\n */\nclass Pager {\n\n    /**\n     * @constructor\n     *\n     * @param {Object} [pager={page: 1, pageCount: 1}] Paging information object.\n     * @param {Object} [pagingHandler={list: () => Promise.reject('No handler available')}] Paging handler object. The requirement for this object is that it has a list method.\n     *\n     * @description\n     * Returns a newly created pager object with methods to navigate pages.\n     */\n    constructor(\n        pager = { page: 1, pageCount: 1 },\n        pagingHandler = { list: () => Promise.reject('No handler available') }\n    ) {\n        /**\n         * @property {number} page Current page number\n         */\n        this.page = pager.page;\n\n        /**\n         * @property {number} pageCount The total number of pages available\n         */\n        this.pageCount = pager.pageCount;\n\n        /**\n         * @property {number} total The total number of items available.\n         *\n         * @description\n         * This represents the total number of items available in the system. Note it is not the number of items\n         * on the current page.\n         */\n        this.total = pager.total;\n\n        /**\n         * @property {string} nextPage The url to the next page.\n         *\n         * @description\n         * If there is no next page then this will be undefined.\n         */\n        this.nextPage = pager.nextPage;\n\n        /**\n         * @property {string} prevPage The url to the previous page\n         *\n         * @description\n         * If there is no previous page then this will be undefined.\n         */\n        this.prevPage = pager.prevPage;\n\n        this.pagingHandler = pagingHandler;\n    }\n\n    /**\n     * @method hasNextPage\n     *\n     * @returns {Boolean} Result is true when there is a next page, false when there is not.\n     *\n     * @description\n     * Check whether there is a next page.\n     */\n    hasNextPage() {\n        return isDefined(this.nextPage);\n    }\n\n    /**\n     * @method hasPreviousPage\n     *\n     * @returns {Boolean} Result is true when there is a previous page, false when there is not.\n     *\n     * @description\n     * Check whether there is a previous page.\n     */\n    hasPreviousPage() {\n        return isDefined(this.prevPage);\n    }\n\n    /**\n     * @method getNextPage\n     *\n     * @returns {Promise} Promise that resolves with a new `ModelCollection` containing the next page's data. Or rejects with\n     * a string when there is no next page for this collection or when the request for the next page failed.\n     */\n    getNextPage() {\n        if (this.hasNextPage()) {\n            return this.goToPage(this.page + 1);\n        }\n        return Promise.reject('There is no next page for this collection');\n    }\n\n    /**\n     * @method getPreviousPage\n     *\n     * @returns {Promise} Promise that resolves with a new `ModelCollection` containing the previous page's data. Or rejects with\n     * a string when there is no previous page for this collection or when the request for the previous page failed.\n     */\n    getPreviousPage() {\n        if (this.hasPreviousPage()) {\n            return this.goToPage(this.page - 1);\n        }\n        return Promise.reject('There is no previous page for this collection');\n    }\n\n    /**\n     * @method goToPage\n     *\n     * @param {Number} pageNr The number of the page you wish to navigate to.\n     * @returns {Promise} Promise that resolves with a new `ModelCollection` containing the data for the requested page.\n     */\n    // TODO: Throwing the errors here is not really consistent with the rejection of promises for the getNextPage and getPreviousPage\n    goToPage(pageNr) {\n        if (pageNr < 1) {\n            throw new Error('PageNr can not be less than 1');\n        }\n        if (pageNr > this.pageCount) {\n            throw new Error(`PageNr can not be larger than the total page count of ${this.pageCount}`);\n        }\n\n        return this.pagingHandler.list({ page: pageNr });\n    }\n}\n\nexport default Pager;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/pager/Pager.js\n **/","import ModelCollection from './ModelCollection';\n\n\n/**\n * @class ModelCollectionProperty\n *\n * @description\n * A ModelCollectionProperty instance is a ModelCollection that is a property of\n * a model instance. ModelCollectionProperties can be operated on independently of\n * the Model that owns them.\n */\nclass ModelCollectionProperty extends ModelCollection {\n\n    /**\n     * @constructor\n     *\n     * @param {Model} parentModel The `Model` of the parent of this `ModelCollectionProperty`\n     * @param {ModelDefinition} modelDefinition The `ModelDefinition` that this `ModelCollection` property is for\n     * @param {Model[]} values Initial values that should be added to the collection property\n     *\n     * @description\n     *\n     * Creates a new `ModelCollectionProperty` object. This is a subclass of `ModelCollection`, which adds logic\n     * for handling adding and removing elements to the collection and saving the changes to the API.\n     */\n    constructor(parentModel, modelDefinition, values) {\n        super(modelDefinition, values, undefined);\n\n        // Dirty bit\n        this.dirty = false;\n        // Keep track of added and removed elements\n        this.added = new Set();\n        this.removed = new Set();\n\n        // Store the parent model of this collection so we can construct the URI for API calls\n        this.parentModel = parentModel;\n    }\n\n    /**\n     * @method add\n     *\n     * @param {Model} value Model instance to add to the collection.\n     * @returns {ModelCollectionProperty} Returns itself for chaining purposes.\n     *\n     * @description\n     * Calls the `add` method on the parent `ModelCollection` class, and then performs checks to keep track of\n     * what, if any, changes that have been made to the collection.\n     */\n    add(value) {\n        // TODO: Allow adding plain ID's that aren't Model instances maybe?\n        if (this.valuesContainerMap.has(value.id)) {\n            return this;\n        }\n\n        super.add(value);\n\n        if (this.removed.has(value.id)) {\n            this.removed.delete(value.id);\n        } else {\n            this.added.add(value.id);\n        }\n\n        this.updateDirty();\n        return this;\n    }\n\n    /**\n     * @method remove\n     *\n     * @param {Model} value Model instance to remove from the collection.\n     * @returns {ModelCollectionProperty} Returns itself for chaining purposes.\n     *\n     * @description\n     * If the collection contains an object with the same id as the `value` parameter, that object is removed\n     * from the collection. Checks are then performed to keep track of what, if any, changes that have been\n     * made to the collection.\n     */\n    remove(value) {\n        // TODO: Allow removing plain ID's that aren't Model instances maybe?\n        ModelCollection.throwIfContainsOtherThanModelObjects([value]);\n        ModelCollection.throwIfContainsModelWithoutUid([value]);\n\n        if (this.delete(value.id)) {\n            if (this.added.has(value.id)) {\n                this.added.delete(value.id);\n            } else {\n                this.removed.add(value.id);\n            }\n        }\n\n        this.updateDirty();\n        return this;\n    }\n\n    /**\n     * @method updateDirty\n     *\n     * @returns {boolean} True if the collection has changed, false otherwise.\n     *\n     * @description\n     * Checks whether any changes have been made to the collection, and updates the dirty flag accordingly.\n     */\n    updateDirty() {\n        this.dirty = this.added.size > 0 || this.removed.size > 0;\n        return this.dirty;\n    }\n\n    /**\n     * @method resetDirtyState\n     *\n     * @description\n     * Sets dirty=false and resets the added and removed sets used for dirty state tracking.\n     */\n    resetDirtyState() {\n        this.dirty = false;\n        this.added = new Set();\n        this.removed = new Set();\n    }\n\n    /**\n     * @method save\n     *\n     * @returns {Promise} A `Promise`\n     *\n     * @description\n     * If any changes have been made to the collection, these changes will be submitted to the API. The returned\n     * promise will resolve successfully when the changes have been saved to the API, and will be rejected if\n     * either the changes weren't saved or if there were no changes to save.\n     */\n    save() {\n        // TODO: Use Promise constructor and call resolve/reject as appropriate\n        if (!this.dirty) {\n            return Promise.reject('Nothing to save!');\n        }\n\n        const api = this.modelDefinition.api;\n\n        const queries = [];\n\n        if (this.added.size) {\n            Array.from(this.added).forEach(id => {\n                queries.push(api.post([this.parentModel.href, this.modelDefinition.plural, id].join('/')));\n            });\n        }\n        if (this.removed.size) {\n            Array.from(this.removed).forEach(id => {\n                queries.push(api.delete([this.parentModel.href, this.modelDefinition.plural, id].join('/')));\n            });\n        }\n\n        return Promise.all(queries)\n            .then(() => {\n                this.added = new Set();\n                this.removed = new Set();\n                this.updateDirty();\n                return Promise.resolve();\n            })\n            .catch((err) => Promise.reject('Failed to alter collection:', err));\n    }\n\n    /**\n     * @method create\n     *\n     * @param {Model} parentModel\n     * @param {ModelDefinition} modelDefinition\n     * @param {Model[]} values\n     * @returns {ModelCollectionProperty}\n     *\n     * @description\n     * See `ModelCollectionProperty.constructor`.\n     */\n    static create(parentModel, modelDefinition, values) {\n        return new ModelCollectionProperty(parentModel, modelDefinition, values);\n    }\n}\n\n\nexport default ModelCollectionProperty;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/model/ModelCollectionProperty.js\n **/","import { throwError } from './utils';\nimport { isString } from './check';\n\nclass SchemaTypes {\n    getTypes() {\n        return [\n            'TEXT',\n            'NUMBER',\n            'INTEGER',\n            'BOOLEAN',\n            'EMAIL',\n            'PASSWORD',\n            'URL',\n            'PHONENUMBER',\n            'GEOLOCATION', // TODO: Geo location could be an advanced type of 2 numbers / strings?\n            'COLOR',\n            'COMPLEX',\n            'COLLECTION',\n            'REFERENCE',\n            'DATE',\n            'COMPLEX',\n            'IDENTIFIER',\n            'CONSTANT',\n        ];\n    }\n\n    typeLookup(propertyType) {\n        if (this.getTypes().indexOf(propertyType) >= 0 && isString(propertyType)) {\n            return propertyType;\n        }\n\n        return throwError(['Type from schema \"', propertyType, '\" not found available type list.'].join(''));\n    }\n}\n\nexport default new SchemaTypes();\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/lib/SchemaTypes.js\n **/","import { isType } from '../lib/check';\nimport Filter from '../model/Filter';\n\nclass Filters {\n    constructor(modelDefinition) {\n        this.filters = [];\n        this.modelDefinition = modelDefinition;\n    }\n\n    on(propertyName) {\n        return Filter.getFilter(this).on(propertyName);\n    }\n\n    add(filter) {\n        if (!isType(filter, Filter)) {\n            throw new TypeError('filter should be an instance of Filter');\n        }\n        this.filters.push(filter);\n    }\n\n    list() {\n        return this.modelDefinition.list();\n    }\n\n    getFilters() {\n        return this.filters.map(filter => filter.getQueryParamFormat());\n    }\n\n    getReturn() {\n        return this.modelDefinition;\n    }\n\n    static getFilters(modelDefinition) {\n        return new Filters(modelDefinition);\n    }\n}\n\nexport default Filters;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/model/Filters.js\n **/","import { checkDefined } from '../lib/check';\n\nconst FILTER_COMPARATORS = {\n    /**\n     * @method equals\n     * @returns {Filter} Returns the modified filter for chaining\n     *\n     * @description\n     * This method can be used to add a equals filter value\n     */\n    equals: 'eq',\n    /**\n     * @method like\n     * @returns {Filter} Returns the modified filter for chaining\n     *\n     * @description\n     * This method can be used to add a like filter value\n     */\n    like: 'like',\n    /**\n     * @method ilike\n     * @returns {Filter} Returns the modified filter for chaining\n     *\n     * @description\n     * This method can be used to add a ilike filter value\n     */\n    ilike: 'ilike',\n    notEqual: 'ne',\n};\n\n/**\n * @class Filter\n * @description\n * Filter class that can be used to build api endpoint filters using a semi-natural language style.\n */\nclass Filter {\n    /**\n     * @constructor\n     * @param {Filters} filters Filters list that this filter will be added to when it is completed.\n     */\n    constructor(filters) {\n        this.filters = filters;\n        this.propertyName = 'name';\n        this.comparator = 'like';\n        this.filterValue = undefined;\n    }\n\n    /**\n     * @method on\n     * @param {String} propertyName Property name that the filter should be applied on.\n     * @returns {Filter}\n     */\n    on(propertyName) {\n        checkDefined(propertyName, 'Property name to filter on');\n\n        this.propertyName = propertyName;\n        return this;\n    }\n\n    getQueryParamFormat() {\n        return [this.propertyName, this.comparator, this.filterValue].join(':');\n    }\n\n    /**\n     * @method getFilter\n     * @static\n     *\n     * @param {Filters} filters Filters list that this filter will be added to when it is completed.\n     *\n     * @returns A instance of the Filter class that can be used to create\n     * filters.\n     *\n     * @description\n     * Create a filter instance\n     */\n    static getFilter(filters) {\n        return new Filter(filters);\n    }\n}\n\n// Add the filters to the Filter prototype\n// TODO: Change to for..of. Currently would break e2e tests because of polyfill\nObject.keys(FILTER_COMPARATORS).forEach(filter => {\n    Object.defineProperty(Filter.prototype, filter, {\n        value: function filterGetter(filterValue) {\n            checkDefined(filterValue, 'filterValue');\n\n            this.comparator = FILTER_COMPARATORS[filter];\n            this.filterValue = filterValue;\n\n            this.filters.add(this);\n\n            return this.filters.getReturn();\n        },\n    });\n});\n\nexport default Filter;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/model/Filter.js\n **/","import organisationUnitGroupSetDefaults from './model-defaults/organisationUnitGroupSet';\nimport categoryDefaults from './model-defaults/category';\nimport categoryOptionGroupSetDefaults from './model-defaults/categoryOptionGroupSet';\nimport dataElementDefaults from './model-defaults/dataElement';\nimport dataElementGroupSetDefaults from './model-defaults/dataElementGroupSet';\nimport dataSetDefaults from './model-defaults/dataSet';\n\nexport const defaultValues = new Map([\n    ['organisationUnitGroupSet', organisationUnitGroupSetDefaults],\n    ['category', categoryDefaults],\n    ['categoryOptionGroupSet', categoryOptionGroupSetDefaults],\n    ['dataElement', dataElementDefaults],\n    ['dataElementGroupSet', dataElementGroupSetDefaults],\n    ['dataSet', dataSetDefaults],\n]);\n\nexport function getDefaultValuesForModelType(modelDefinitionName) {\n    if (defaultValues.has(modelDefinitionName)) {\n        return defaultValues.get(modelDefinitionName);\n    }\n    return {};\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/model/config/index.js\n **/","export default {\n    dataDimension: true,\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/model/config/model-defaults/organisationUnitGroupSet.js\n **/","export default {\n    aggregationType: 'SUM',\n    valueType: 'NUMBER',\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/model/config/model-defaults/dataElement.js\n **/","export default {\n    expiryDays: 0,\n    openFuturePeriods: 0,\n    timelyDays: 15,\n    periodType: 'Monthly',\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/model/config/model-defaults/dataSet.js\n **/","import Api from '../api/Api';\n\nclass I18n {\n    constructor(sources = [], api = Api.getApi()) {\n        this.sources = sources;\n        this.api = api;\n        this.strings = new Set();\n        this.translations = undefined;\n    }\n\n    /**\n     * Adds a .properties file to the list of sources to load translations from\n     *\n     * Files are loaded in the order they're added, and the first translation of each string that's encountered will be\n     * used.\n     *\n     * @param {String} path\n     */\n    addSource(path) {\n        this.sources.push(path);\n    }\n\n    /**\n     * Adds one or more strings to the list of strings to translate\n     *\n     * @param {(String[]|String)} strings\n     */\n    addStrings(strings) {\n        if (typeof strings === 'string' && strings.trim().length > 0) {\n            this.strings.add(strings.trim());\n        } else {\n            Array.from(strings)\n                .filter(string => string && (`${string}`).trim().length > 0)\n                .forEach(string => this.strings.add(string));\n        }\n    }\n\n    /**\n     * Load translations\n     *\n     * First, all properties files (specified with addSource) are loaded.\n     * Then, if any untranslated strings remain, these are POSTed to the i18n endpoint of the DHIS2 API.\n     *\n     * @returns {Promise}\n     */\n    load() {\n        const i18n = this;\n        i18n.translations = {};\n\n        function parseProperties(text) {\n            return text.split('\\n').reduce((props, line) => {\n                const [key, value] = line.split('=').map(out => out.trim());\n                if (key !== undefined && value !== undefined && !props.hasOwnProperty(key)) {\n                    props[key] = value // eslint-disable-line no-param-reassign\n                        .replace(/\\\\u([0-9a-f]{4})/gi, (match, grp) => String.fromCharCode(parseInt(grp, 16)));\n                }\n                return props;\n            }, {});\n        }\n\n        const propFiles = [];\n\n        this.sources.forEach(source => {\n            propFiles.push(\n                i18n.api.request('GET', source, undefined, { dataType: 'text' }).then(\n                    (data) => Promise.resolve(parseProperties(data)),\n\n                    // Resolve errors to an empty object, so that one missing file doesn't prevent\n                    // the rest from being loaded\n                    () => Promise.resolve({})\n                )\n            );\n        });\n\n        return Promise.all(propFiles).then((propFile) => {\n            propFile.forEach(props => {\n                Object.keys(props).forEach(str => {\n                    if (!i18n.translations.hasOwnProperty(str)) {\n                        i18n.translations[str] = props[str];\n                    }\n                    this.strings.delete(str);\n                });\n            });\n\n            if (this.strings.size > 0) {\n                return i18n.api.post('i18n', Array.from(i18n.strings)).then((res) => {\n                    Object.keys(res)\n                        .filter(str => str !== res[str])\n                        .forEach(str => {\n                            i18n.translations[str] = res[str];\n                            i18n.strings.delete(str);\n                        });\n\n                    return Promise.resolve(i18n.translations);\n                });\n            }\n\n            return Promise.resolve(i18n.translations);\n        });\n    }\n\n    /**\n     * Gets the translated version of the specified string\n     *\n     * If no translation exists for the specified string, the string is returned as is with two asterisks on each side,\n     * in order to easily identify missing translations in the UI\n     *\n     * @param string\n     * @returns {String}\n     */\n    getTranslation(string, variables = {}) {\n        if (this.translations === undefined) {\n            throw new Error('Tried to translate before loading translations!');\n        }\n        const translatedString = this.translations.hasOwnProperty(string) ? this.translations[string] : `** ${string} **`;\n\n        if (Object.keys(variables).length) {\n            return translatedString\n                .replace(/\\$\\$(.+?)\\$\\$/gi, (match, partial) => variables[partial] || '');\n        }\n\n        return translatedString;\n    }\n\n    /**\n     * Check if a translation exists for the specified string\n     *\n     * @param string\n     * @returns {boolean} True if a translation exists, false otherwise\n     */\n    isTranslated(string) {\n        if (this.translations === undefined) {\n            throw new Error('Tried to translate before loading translations!');\n        }\n        return this.translations.hasOwnProperty(string);\n    }\n\n\n    /**\n     * Get the list of strings that don't have translations\n     *\n     * If no translations have been loaded yet, `undefined` is returned in stead.\n     *\n     * @returns {Array|undefined} Array of untranslated strings, or undefined if translations haven't been loaded\n     */\n    getUntranslatedStrings() {\n        return this.translations ? Array.from(this.strings) : undefined;\n    }\n\n    /**\n     * Return a new instance of this class\n     *\n     * @returns {I18n}\n     */\n    static getI18n() {\n        return new I18n();\n    }\n}\n\nexport default I18n;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/i18n/I18n.js\n **/","import defaultConfig from './defaultConfig';\nimport { isType, isString } from './lib/check';\n\nconst DEFAULT_API_VERSION = 24;\n\nexport default class Config {\n    static create(...args) {\n        const configObjects = args\n            .filter(arg => arg);\n\n        if (!configObjects.every(configObject => isType(configObject, 'object'))) {\n            throw new Error('Expected Config parameter to have type object');\n        }\n\n        return Object.assign({}, defaultConfig, ...args);\n    }\n\n    static processConfigForD2(config, d2) {\n        const api = d2.Api.getApi();\n        d2.model.ModelDefinition.prototype.api = api; // eslint-disable-line no-param-reassign\n        d2.models = d2.model.ModelDefinitions.getModelDefinitions(); // eslint-disable-line no-param-reassign\n\n        if (isString(config.baseUrl)) {\n            api.setBaseUrl(config.baseUrl);\n        } else {\n            api.setBaseUrl(`/api/${DEFAULT_API_VERSION}`);\n        }\n\n        if (config.i18n && config.i18n.sources) {\n            Array.from(config.i18n.sources)\n                .forEach(source => d2.i18n.addSource(source));\n        }\n\n        if (config.i18n && config.i18n.strings) {\n            d2.i18n.addStrings(Array.from(config.i18n.strings));\n        }\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/config.js\n **/","export const noCreateAllowedFor = new Set([\n    'categoryOptionCombo',\n]);\n\nexport default {\n    baseUrl: '/api',\n    i18n: {\n        sources: new Set(),\n        strings: new Set(),\n    },\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/defaultConfig.js\n **/","import UserAuthorities from './UserAuthorities';\nimport UserSettings from './UserSettings';\nimport { noCreateAllowedFor } from '../defaultConfig';\n\nconst models = Symbol('models');\nconst propertiesToIgnore = new Set([\n    'userCredentials',\n    'userGroups',\n    'userRoles',\n    'organisationUnits',\n    'dataViewOrganisationUnits',\n]);\n\nconst authTypes = {\n    READ: ['READ'],\n    CREATE: ['CREATE', 'CREATE_PUBLIC', 'CREATE_PRIVATE'],\n    CREATE_PUBLIC: ['CREATE_PUBLIC'],\n    CREATE_PRIVATE: ['CREATE_PRIVATE'],\n    DELETE: ['DELETE'],\n    UPDATE: ['UPDATE'],\n    EXTERNALIZE: ['EXTERNALIZE'],\n};\n\nconst propertySymbols = Array\n    .from(propertiesToIgnore)\n    .reduce((result, property) => {\n        result[property] = Symbol(property); // eslint-disable-line no-param-reassign\n        return result;\n    }, {});\n\nfunction getUserPropertiesToCopy(currentUserObject) {\n    let properties;\n    // The user credentials object is confusing so we set the properties straight onto the current user\n    if (currentUserObject.userCredentials) {\n        properties = Object.assign({}, currentUserObject.userCredentials, currentUserObject);\n    } else {\n        properties = Object.assign({}, currentUserObject);\n    }\n\n    return Object.keys(properties)\n        .reduce((result, property) => {\n            if (propertiesToIgnore.has(property)) {\n                if (properties[property].map) {\n                    result[propertySymbols[property]] = properties[property] // eslint-disable-line no-param-reassign\n                        .map(value => value.id);\n                }\n            } else {\n                result[property] = properties[property]; // eslint-disable-line no-param-reassign\n            }\n            return result;\n        }, {});\n}\n\nfunction isInNoCreateAllowedForList(modelDefinition) {\n    return modelDefinition && noCreateAllowedFor.has(modelDefinition.name);\n}\n\nexport default class CurrentUser {\n    constructor(userData, userAuthorities, modelDefinitions, settings) {\n        Object.assign(this, getUserPropertiesToCopy(userData));\n\n        this.authorities = userAuthorities;\n        this[models] = modelDefinitions;\n\n        /**\n         * @property {UserSettings} settings Contains a reference to a `UserSettings` instance that can be used\n         * to retrieve and save system settings.\n         *\n         * @description\n         * ```js\n         * d2.currentUser.userSettings.get('keyUiLocale')\n         *  .then(userSettingsValue => {\n         *    console.log('UI Locale: ' + userSettingsValue);\n         *  });\n         * ```\n         */\n        this.userSettings = settings;\n    }\n\n    getUserGroups() {\n        const userGroupIds = this[propertySymbols.userGroups];\n\n        return this[models].userGroup.get({ filter: [`id:in:[${userGroupIds.join(',')}]`] });\n    }\n\n    getUserRoles() {\n        const userRoleIds = this[propertySymbols.userRoles];\n\n        return this[models].userRole.get({ filter: [`id:in:[${userRoleIds.join(',')}]`] });\n    }\n\n    getOrganisationUnits(listOptions = { fields: ':all,displayName,children[id,displayName,path,children::isNotEmpty]' }) {\n        const organisationUnitsIds = this[propertySymbols.organisationUnits];\n\n        return this[models].organisationUnit.list(\n            Object.assign({}, listOptions, { filter: [`id:in:[${organisationUnitsIds.join(',')}]`] })\n        );\n    }\n\n    getDataViewOrganisationUnits(listOptions = { fields: ':all,displayName,children[id,displayName,path,children::isNotEmpty]' }) {\n        const organisationUnitsIds = this[propertySymbols.dataViewOrganisationUnits];\n\n        return this[models].organisationUnit.list(\n            Object.assign({}, listOptions, { filter: [`id:in:[${organisationUnitsIds.join(',')}]`] })\n        );\n    }\n\n    checkAuthorityForType(authorityType, modelType) {\n        if (!modelType || !Array.isArray(modelType.authorities)) {\n            return false;\n        }\n\n        return modelType.authorities\n            // Filter the correct authority to check for from the model\n            .filter(authority => authorityType.some(authToHave => authToHave === authority.type))\n            // Check the left over schema authority types\n            .some(schemaAuthority => schemaAuthority.authorities\n                .some(authorityToCheckFor => this.authorities.has(authorityToCheckFor)) // Check if one of the schema authorities are available in the users authorities\n            );\n    }\n\n    checkCreateAuthorityForType(authType, modelType) {\n        // When the modelType is mentioned in the the list of modelTypes that are not\n        // allowed to be created we return false\n        if (isInNoCreateAllowedForList(modelType)) {\n            return false;\n        }\n\n        // Otherwise we check using the normal procedure for checking authorities\n        return this.checkAuthorityForType(authType, modelType);\n    }\n\n    canCreate(modelType) {\n        return this.checkCreateAuthorityForType(authTypes.CREATE, modelType);\n    }\n\n    canCreatePublic(modelType) {\n        return this.checkCreateAuthorityForType(authTypes.CREATE_PUBLIC, modelType);\n    }\n\n    canCreatePrivate(modelType) {\n        return this.checkCreateAuthorityForType(authTypes.CREATE_PRIVATE, modelType);\n    }\n\n    canDelete(modelType) {\n        return this.checkAuthorityForType(authTypes.DELETE, modelType);\n    }\n\n    canUpdate(modelType) {\n        if (this.checkAuthorityForType(authTypes.UPDATE, modelType)) {\n            return true;\n        }\n        return this.checkAuthorityForType(authTypes.CREATE, modelType);\n    }\n\n    get uiLocale() {\n        if (this.userSettings && this.userSettings.keyUiLocale) {\n            return this.userSettings.keyUiLocale;\n        }\n        return 'en';\n    }\n\n    static create(userData, authorities, modelDefinitions, userSettings) {\n        return new CurrentUser(\n            userData,\n            UserAuthorities.create(authorities),\n            modelDefinitions,\n            new UserSettings(userSettings)\n        );\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/current-user/CurrentUser.js\n **/","const auths = Symbol();\n\nexport default class UserAuthorities {\n    constructor(authorities = []) {\n        this[auths] = new Set(authorities);\n    }\n\n    has(authority) {\n        if (this[auths].has('ALL')) {\n            return true;\n        }\n        return this[auths].has(authority);\n    }\n\n    static create(authorities) {\n        return new UserAuthorities(authorities);\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/current-user/UserAuthorities.js\n **/","import Api from '../api/Api';\nimport { isString } from '../lib/check';\n\n\n/**\n * @class UserSettings\n *\n * @description\n * Handles communication with the userSettings endpoint. Can be used to get or save userSettings.\n */\n\nclass UserSettings {\n    constructor(userSettings, api = Api.getApi()) {\n        this.api = api;\n\n        if (userSettings) {\n            Object.assign(this, userSettings);\n        }\n    }\n\n    /**\n     * @method all\n     *\n     * @returns {Promise} Promise that resolves with the usersettings object from the api.\n     *\n     * @description\n     * Loads all the user settings of current user and returns them as an object from the promise.\n     * ```js\n     * d2.currentUser.userSettings.all()\n     *  .then(userSettings => {\n     *    console.log('UI Locale: ' + userSettings.keyUiLocale);\n     *  });\n     * ```\n     */\n    all() {\n        return this.api.get('userSettings');\n    }\n\n    /**\n     * @method get\n     *\n     * @param {String} key The identifier of the user setting that should be retrieved.\n     * @returns {Promise} A promise that resolves with the value or will fail if the value is not available.\n     *\n     * @description\n     * ```js\n     * d2.currentUser.userSettings.get('keyUiLocale')\n     *  .then(userSettingValue => {\n     *    console.log('UI Locale: ' + userSettingValue);\n     *  });\n     * ```\n     */\n    get(key) {\n        function processValue(value) {\n            // Attempt to parse the response as JSON. If this fails we return the value as is.\n            try {\n                return JSON.parse(value);\n            } catch (e) {\n                return value;\n            }\n        }\n\n        return new Promise((resolve, reject) => {\n            if (!isString(key)) {\n                throw new TypeError('A \"key\" parameter should be specified when calling get() on userSettings');\n            }\n\n            this.api.get(['userSettings', key].join('/'), undefined, { dataType: 'text' })\n                .then(response => {\n                    const value = processValue(response);\n                    // Store the value on the user settings object\n                    this[key] = value;\n                    if (value) {\n                        resolve(processValue(response));\n                    }\n                    reject(new Error('The requested userSetting has no value or does not exist.'));\n                });\n        });\n    }\n\n    /**\n     * @method set\n     *\n     * @param {String} key The identifier of the user setting that should be saved.\n     * @param {String} value The new value of the user setting.\n     * @returns {Promise} A promise that will resolve when the new value has been saved, or fail if saving fails.\n     *\n     * @description\n     * ```js\n     * d2.currentUser.userSettings.set('keyUiLocale', 'fr')\n     *  .then(() => {\n     *   console.log('UI Locale is now \"fr\");\n     *  });\n     * ```\n     */\n    set(key, value) {\n        const settingUrl = ['userSettings', key].join('/');\n        if (value === null || (`${value}`).length === 0) {\n            return this.api.delete(settingUrl, { dataType: 'text' })\n                .then(this[key] = undefined);\n        }\n        return this.api.post(settingUrl, value, { dataType: 'text', contentType: 'text/plain' })\n            .then(this[key] = value);\n    }\n}\n\nexport default UserSettings;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/current-user/UserSettings.js\n **/"],"sourceRoot":""}