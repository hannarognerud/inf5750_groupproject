'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports.checkDefined = checkDefined;
exports.checkType = checkType;
exports.isType = isType;
exports.isString = isString;
exports.isArray = isArray;
exports.isObject = isObject;
exports.isDefined = isDefined;
exports.isInteger = isInteger;
exports.isNumeric = isNumeric;
exports.contains = contains;
exports.isValidUid = isValidUid;

function checkDefined(value, name) {
    if (value !== undefined) {
        return true;
    }
    throw new Error([name || 'Value', 'should be provided'].join(' '));
}

// TODO: Decide if checkType([], 'object') is a 'false' positive

function checkType(value, type, name) {
    checkDefined(value, name);
    checkDefined(type, 'Type');

    if (typeof type === 'function' && value instanceof type || typeof type === 'string' && typeof value === type) {
        return true;
    }
    throw new Error(['Expected', name || value, 'to have type', type].join(' '));
}

// TODO: Log type error?

function isType(value, type) {
    function noop() {}

    try {
        checkType(value, type);
        return true;
    } catch (e) {
        noop();
    }

    return false;
}

function isString(value) {
    return isType(value, 'string');
}

function isArray(value) {
    return Array.isArray(value);
}

function isObject(value) {
    return isType(value, Object);
}

function isDefined(value) {
    return value !== undefined;
}

function isInteger(nVal) {
    return typeof nVal === 'number' && isFinite(nVal) && nVal > -9007199254740992 && nVal < 9007199254740992 && Math.floor(nVal) === nVal;
}

// Polyfill for the isInteger function that will be added in ES6
// http://wiki.ecmascript.org/doku.php?id=harmony:number.isinteger
/* istanbul ignore if  */
if (!Number.isInteger) {
    Number.isInteger = isInteger;
}

function isNumeric(nVal) {
    return typeof nVal === 'number' && isFinite(nVal) && nVal - parseFloat(nVal) + 1 >= 0;
}

function contains(item, list) {
    var listToCheck = isArray(list) && list || [];

    return listToCheck.indexOf(item) >= 0;
}

function isValidUid(value) {
    return value && value.length === 11;
}

exports['default'] = {
    checkType: checkType,
    checkDefined: checkDefined,
    isArray: isArray,
    isDefined: isDefined,
    isInteger: isInteger,
    isNumeric: isNumeric,
    isString: isString,
    isType: isType,
    contains: contains,
    isValidUid: isValidUid
};
//# sourceMappingURL=check.js.map