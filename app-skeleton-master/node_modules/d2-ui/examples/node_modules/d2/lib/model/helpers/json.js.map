{"version":3,"sources":["../../../src/model/helpers/json.js"],"names":[],"mappings":";;;;;;;AAAA,SAAS,YAAY,CAAC,UAAU,EAAE;AAC9B,WAAO,SAAS,wBAAwB,CAAC,QAAQ,EAAE;AAC/C,eAAO,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;KAC9C,CAAC;CACL;;AAED,SAAS,oBAAoB,CAAC,UAAU,EAAE;AACtC,WAAO,UAAU,QAAQ,EAAE;AACvB,eAAO,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,CAAC;KAC9C,CAAC;CACL;;AAEM,SAAS,oBAAoB,CAAC,KAAK,EAAE,UAAU,EAAE;AACpD,QAAM,YAAY,GAAG,EAAE,CAAC;AACxB,QAAM,oBAAoB,GAAG,KAAK,CAC7B,kCAAkC,EAAE;;;KAGpC,MAAM,CAAC,UAAA,YAAY;eAAI,YAAY,KAAK,iBAAiB;KAAA,CAAC,CAAC;;AAEhE,QAAM,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,gBAAgB,CAAC,CACpE,MAAM,CAAC,UAAA,YAAY;eAAI,UAAU,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC;KAAA,CAAC,CAC7D,MAAM,CAAC,UAAA,YAAY;eAAI,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC,KAAK,SAAS,IAAI,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC,KAAK,IAAI;KAAA,CAAC,CAAC;;;AAGrH,iBAAa,CACR,MAAM,CAAC,YAAY,CAAC,oBAAoB,CAAC,CAAC,CAC1C,OAAO,CAAC,UAAA,YAAY,EAAI;AACrB,oBAAY,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;KAC/D,CAAC,CAAC;;;AAGP,iBAAa,CACR,MAAM,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,CAAC,CAClD,OAAO,CAAC,UAAC,YAAY,EAAK;;;AAGvB,YAAI,YAAY,KAAK,+BAA+B,IAAI,YAAY,KAAK,cAAc,EAAE;AACrF,wBAAY,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC;AACxE,mBAAO;SACV;;;AAGD,oBAAY,CAAC,YAAY,CAAC,GAAG,KAAK,CAC7B,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,MAAM,EAAE,CAAC,CAC7C,MAAM,CAAC,UAAA,KAAK;mBAAI,KAAK,CAAC,EAAE;SAAA,CAAC,CACzB,GAAG,CAAC,UAAC,UAAU,EAAK;;;;AAIjB,gBAAI,KAAK,CAAC,eAAe,IAAI,KAAK,CAAC,eAAe,CAAC,IAAI,KAAK,WAAW,EAAE;AACrE,uBAAO,oBAAoB,CAAC,IAAI,CAAC,UAAU,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;aAC5E;;;AAGD,mBAAO,EAAE,EAAE,EAAE,UAAU,CAAC,EAAE,EAAE,CAAC;SAChC,CAAC,CAAC;KACV,CAAC,CAAC;;AAEP,WAAO,YAAY,CAAC;CACvB;;AAEM,SAAS,oBAAoB,CAAC,KAAK,EAAE;AACxC,QAAM,eAAe,GAAG,KAAK,CAAC,eAAe,CAAC,qBAAqB,EAAE,CAAC;;AAEtE,WAAO,oBAAoB,CAAC,KAAK,EAAE,eAAe,CAAC,CAAC;CACvD","file":"json.js","sourcesContent":["function isPlainValue(collection) {\n    return function isPlainValueInCollection(property) {\n        return collection.indexOf(property) === -1;\n    };\n}\n\nfunction isCollectionProperty(collection) {\n    return function (property) {\n        return !isPlainValue(collection)(property);\n    };\n}\n\nexport function getJSONForProperties(model, properties) {\n    const objectToSave = {};\n    const collectionProperties = model\n        .getCollectionChildrenPropertyNames()\n        // Even though attributeValues are considered collections, they are handled separately due to their\n        // difference in structure.\n        .filter(propertyName => propertyName !== 'attributeValues');\n\n    const propertyNames = Object.keys(model.modelDefinition.modelValidations)\n        .filter(propertyName => properties.indexOf(propertyName) >= 0)\n        .filter(propertyName => model.dataValues[propertyName] !== undefined && model.dataValues[propertyName] !== null);\n\n    // Handle plain values\n    propertyNames\n        .filter(isPlainValue(collectionProperties))\n        .forEach(propertyName => {\n            objectToSave[propertyName] = model.dataValues[propertyName];\n        });\n\n    // Handle Collection properties\n    propertyNames\n        .filter(isCollectionProperty(collectionProperties))\n        .forEach((propertyName) => {\n            // compulsoryDataElementOperands and greyedFields are not arrays of models.\n            // TODO: This is not the proper way to do this. We should check if the array contains Models\n            if (propertyName === 'compulsoryDataElementOperands' || propertyName === 'greyedFields') {\n                objectToSave[propertyName] = Array.from(model.dataValues[propertyName]);\n                return;\n            }\n\n            // Transform an object collection to an array of objects with id properties\n            objectToSave[propertyName] = Array\n                .from(model.dataValues[propertyName].values())\n                .filter(value => value.id)\n                .map((childModel) => {\n                    // Legends can be saved as part of the LegendSet object.\n                    // To make this work properly we will return all of the properties for the items in the collection\n                    // instead of just the `id` fields\n                    if (model.modelDefinition && model.modelDefinition.name === 'legendSet') {\n                        return getOwnedPropertyJSON.call(childModel.modelDefinition, childModel); // eslint-disable-line no-use-before-define\n                    }\n\n                    // For any other types we return an object with just an id\n                    return { id: childModel.id };\n                });\n        });\n\n    return objectToSave;\n}\n\nexport function getOwnedPropertyJSON(model) {\n    const ownedProperties = model.modelDefinition.getOwnedPropertyNames();\n\n    return getJSONForProperties(model, ownedProperties);\n}\n"]}