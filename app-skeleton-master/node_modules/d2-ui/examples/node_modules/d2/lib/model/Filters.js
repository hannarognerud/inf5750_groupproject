'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _libCheck = require('../lib/check');

var _modelFilter = require('../model/Filter');

var _modelFilter2 = _interopRequireDefault(_modelFilter);

var Filters = (function () {
    function Filters(modelDefinition) {
        _classCallCheck(this, Filters);

        this.filters = [];
        this.modelDefinition = modelDefinition;
    }

    _createClass(Filters, [{
        key: 'on',
        value: function on(propertyName) {
            return _modelFilter2['default'].getFilter(this).on(propertyName);
        }
    }, {
        key: 'add',
        value: function add(filter) {
            if (!(0, _libCheck.isType)(filter, _modelFilter2['default'])) {
                throw new TypeError('filter should be an instance of Filter');
            }
            this.filters.push(filter);
        }
    }, {
        key: 'list',
        value: function list() {
            return this.modelDefinition.list();
        }
    }, {
        key: 'getFilters',
        value: function getFilters() {
            return this.filters.map(function (filter) {
                return filter.getQueryParamFormat();
            });
        }
    }, {
        key: 'getReturn',
        value: function getReturn() {
            return this.modelDefinition;
        }
    }], [{
        key: 'getFilters',
        value: function getFilters(modelDefinition) {
            return new Filters(modelDefinition);
        }
    }]);

    return Filters;
})();

exports['default'] = Filters;
module.exports = exports['default'];
//# sourceMappingURL=Filters.js.map