{"version":3,"sources":["../../src/i18n/I18n.js"],"names":[],"mappings":"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","file":"I18n.js","sourcesContent":["import Api from '../api/Api';\n\nclass I18n {\n    constructor(sources = [], api = Api.getApi()) {\n        this.sources = sources;\n        this.api = api;\n        this.strings = new Set();\n        this.translations = undefined;\n    }\n\n    /**\n     * Adds a .properties file to the list of sources to load translations from\n     *\n     * Files are loaded in the order they're added, and the first translation of each string that's encountered will be\n     * used.\n     *\n     * @param {String} path\n     */\n    addSource(path) {\n        this.sources.push(path);\n    }\n\n    /**\n     * Adds one or more strings to the list of strings to translate\n     *\n     * @param {(String[]|String)} strings\n     */\n    addStrings(strings) {\n        if (typeof strings === 'string' && strings.trim().length > 0) {\n            this.strings.add(strings.trim());\n        } else {\n            Array.from(strings)\n                .filter(string => string && (`${string}`).trim().length > 0)\n                .forEach(string => this.strings.add(string));\n        }\n    }\n\n    /**\n     * Load translations\n     *\n     * First, all properties files (specified with addSource) are loaded.\n     * Then, if any untranslated strings remain, these are POSTed to the i18n endpoint of the DHIS2 API.\n     *\n     * @returns {Promise}\n     */\n    load() {\n        const i18n = this;\n        i18n.translations = {};\n\n        function parseProperties(text) {\n            return text.split('\\n').reduce((props, line) => {\n                const [key, value] = line.split('=').map(out => out.trim());\n                if (key !== undefined && value !== undefined && !props.hasOwnProperty(key)) {\n                    props[key] = value // eslint-disable-line no-param-reassign\n                        .replace(/\\\\u([0-9a-f]{4})/gi, (match, grp) => String.fromCharCode(parseInt(grp, 16)));\n                }\n                return props;\n            }, {});\n        }\n\n        const propFiles = [];\n\n        this.sources.forEach(source => {\n            propFiles.push(\n                i18n.api.request('GET', source, undefined, { dataType: 'text' }).then(\n                    (data) => Promise.resolve(parseProperties(data)),\n\n                    // Resolve errors to an empty object, so that one missing file doesn't prevent\n                    // the rest from being loaded\n                    () => Promise.resolve({})\n                )\n            );\n        });\n\n        return Promise.all(propFiles).then((propFile) => {\n            propFile.forEach(props => {\n                Object.keys(props).forEach(str => {\n                    if (!i18n.translations.hasOwnProperty(str)) {\n                        i18n.translations[str] = props[str];\n                    }\n                    this.strings.delete(str);\n                });\n            });\n\n            if (this.strings.size > 0) {\n                return i18n.api.post('i18n', Array.from(i18n.strings)).then((res) => {\n                    Object.keys(res)\n                        .filter(str => str !== res[str])\n                        .forEach(str => {\n                            i18n.translations[str] = res[str];\n                            i18n.strings.delete(str);\n                        });\n\n                    return Promise.resolve(i18n.translations);\n                });\n            }\n\n            return Promise.resolve(i18n.translations);\n        });\n    }\n\n    /**\n     * Gets the translated version of the specified string\n     *\n     * If no translation exists for the specified string, the string is returned as is with two asterisks on each side,\n     * in order to easily identify missing translations in the UI\n     *\n     * @param string\n     * @returns {String}\n     */\n    getTranslation(string, variables = {}) {\n        if (this.translations === undefined) {\n            throw new Error('Tried to translate before loading translations!');\n        }\n        const translatedString = this.translations.hasOwnProperty(string) ? this.translations[string] : `** ${string} **`;\n\n        if (Object.keys(variables).length) {\n            return translatedString\n                .replace(/\\$\\$(.+?)\\$\\$/gi, (match, partial) => variables[partial] || '');\n        }\n\n        return translatedString;\n    }\n\n    /**\n     * Check if a translation exists for the specified string\n     *\n     * @param string\n     * @returns {boolean} True if a translation exists, false otherwise\n     */\n    isTranslated(string) {\n        if (this.translations === undefined) {\n            throw new Error('Tried to translate before loading translations!');\n        }\n        return this.translations.hasOwnProperty(string);\n    }\n\n\n    /**\n     * Get the list of strings that don't have translations\n     *\n     * If no translations have been loaded yet, `undefined` is returned in stead.\n     *\n     * @returns {Array|undefined} Array of untranslated strings, or undefined if translations haven't been loaded\n     */\n    getUntranslatedStrings() {\n        return this.translations ? Array.from(this.strings) : undefined;\n    }\n\n    /**\n     * Return a new instance of this class\n     *\n     * @returns {I18n}\n     */\n    static getI18n() {\n        return new I18n();\n    }\n}\n\nexport default I18n;\n"]}