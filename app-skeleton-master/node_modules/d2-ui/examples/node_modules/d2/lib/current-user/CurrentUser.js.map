{"version":3,"sources":["../../src/current-user/CurrentUser.js"],"names":[],"mappings":";;;;;;;;;;;;+BAA4B,mBAAmB;;;;4BACtB,gBAAgB;;;;6BACN,kBAAkB;;AAErD,IAAM,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;AAChC,IAAM,kBAAkB,GAAG,IAAI,GAAG,CAAC,CAC/B,iBAAiB,EACjB,YAAY,EACZ,WAAW,EACX,mBAAmB,EACnB,2BAA2B,CAC9B,CAAC,CAAC;;AAEH,IAAM,SAAS,GAAG;AACd,QAAI,EAAE,CAAC,MAAM,CAAC;AACd,UAAM,EAAE,CAAC,QAAQ,EAAE,eAAe,EAAE,gBAAgB,CAAC;AACrD,iBAAa,EAAE,CAAC,eAAe,CAAC;AAChC,kBAAc,EAAE,CAAC,gBAAgB,CAAC;AAClC,UAAM,EAAE,CAAC,QAAQ,CAAC;AAClB,UAAM,EAAE,CAAC,QAAQ,CAAC;AAClB,eAAW,EAAE,CAAC,aAAa,CAAC;CAC/B,CAAC;;AAEF,IAAM,eAAe,GAAG,KAAK,CACxB,IAAI,CAAC,kBAAkB,CAAC,CACxB,MAAM,CAAC,UAAC,MAAM,EAAE,QAAQ,EAAK;AAC1B,UAAM,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;AACpC,WAAO,MAAM,CAAC;CACjB,EAAE,EAAE,CAAC,CAAC;;AAEX,SAAS,uBAAuB,CAAC,iBAAiB,EAAE;AAChD,QAAI,UAAU,YAAA,CAAC;;AAEf,QAAI,iBAAiB,CAAC,eAAe,EAAE;AACnC,kBAAU,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,iBAAiB,CAAC,eAAe,EAAE,iBAAiB,CAAC,CAAC;KACxF,MAAM;AACH,kBAAU,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,iBAAiB,CAAC,CAAC;KACrD;;AAED,WAAO,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CACzB,MAAM,CAAC,UAAC,MAAM,EAAE,QAAQ,EAAK;AAC1B,YAAI,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;AAClC,gBAAI,UAAU,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE;AAC1B,sBAAM,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,GAAG,UAAU,CAAC,QAAQ,CAAC;iBACnD,GAAG,CAAC,UAAA,KAAK;2BAAI,KAAK,CAAC,EAAE;iBAAA,CAAC,CAAC;aAC/B;SACJ,MAAM;AACH,kBAAM,CAAC,QAAQ,CAAC,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC;SAC3C;AACD,eAAO,MAAM,CAAC;KACjB,EAAE,EAAE,CAAC,CAAC;CACd;;AAED,SAAS,0BAA0B,CAAC,eAAe,EAAE;AACjD,WAAO,eAAe,IAAI,kCAAmB,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;CAC1E;;IAEoB,WAAW;AACjB,aADM,WAAW,CAChB,QAAQ,EAAE,eAAe,EAAE,gBAAgB,EAAE,QAAQ,EAAE;8BADlD,WAAW;;AAExB,cAAM,CAAC,MAAM,CAAC,IAAI,EAAE,uBAAuB,CAAC,QAAQ,CAAC,CAAC,CAAC;;AAEvD,YAAI,CAAC,WAAW,GAAG,eAAe,CAAC;AACnC,YAAI,CAAC,MAAM,CAAC,GAAG,gBAAgB,CAAC;;;;;;;;;;;;;;AAchC,YAAI,CAAC,YAAY,GAAG,QAAQ,CAAC;KAChC;;iBApBgB,WAAW;;eAsBf,yBAAG;AACZ,gBAAM,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;;AAEtD,mBAAO,IAAI,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,aAAW,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,OAAI,EAAE,CAAC,CAAC;SACxF;;;eAEW,wBAAG;AACX,gBAAM,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;;AAEpD,mBAAO,IAAI,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,aAAW,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,OAAI,EAAE,CAAC,CAAC;SACtF;;;eAEmB,gCAAkG;gBAAjG,WAAW,yDAAG,EAAE,MAAM,EAAE,qEAAqE,EAAE;;AAChH,gBAAM,oBAAoB,GAAG,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC;;AAErE,mBAAO,IAAI,CAAC,MAAM,CAAC,CAAC,gBAAgB,CAAC,IAAI,CACrC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,WAAW,EAAE,EAAE,MAAM,EAAE,aAAW,oBAAoB,CAAC,IAAI,CAAC,GAAG,CAAC,OAAI,EAAE,CAAC,CAC5F,CAAC;SACL;;;eAE2B,wCAAkG;gBAAjG,WAAW,yDAAG,EAAE,MAAM,EAAE,qEAAqE,EAAE;;AACxH,gBAAM,oBAAoB,GAAG,IAAI,CAAC,eAAe,CAAC,yBAAyB,CAAC,CAAC;;AAE7E,mBAAO,IAAI,CAAC,MAAM,CAAC,CAAC,gBAAgB,CAAC,IAAI,CACrC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,WAAW,EAAE,EAAE,MAAM,EAAE,aAAW,oBAAoB,CAAC,IAAI,CAAC,GAAG,CAAC,OAAI,EAAE,CAAC,CAC5F,CAAC;SACL;;;eAEoB,+BAAC,aAAa,EAAE,SAAS,EAAE;;;AAC5C,gBAAI,CAAC,SAAS,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE;AACrD,uBAAO,KAAK,CAAC;aAChB;;AAED,mBAAO,SAAS,CAAC,WAAW;;aAEvB,MAAM,CAAC,UAAA,SAAS;uBAAI,aAAa,CAAC,IAAI,CAAC,UAAA,UAAU;2BAAI,UAAU,KAAK,SAAS,CAAC,IAAI;iBAAA,CAAC;aAAA,CAAC;;aAEpF,IAAI,CAAC,UAAA,eAAe;uBAAI,eAAe,CAAC,WAAW,CAC/C,IAAI,CAAC,UAAA,mBAAmB;2BAAI,MAAK,WAAW,CAAC,GAAG,CAAC,mBAAmB,CAAC;iBAAA,CAAC;aAAA;aAC1E,CAAC;SACT;;;eAE0B,qCAAC,QAAQ,EAAE,SAAS,EAAE;;;AAG7C,gBAAI,0BAA0B,CAAC,SAAS,CAAC,EAAE;AACvC,uBAAO,KAAK,CAAC;aAChB;;;AAGD,mBAAO,IAAI,CAAC,qBAAqB,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;SAC1D;;;eAEQ,mBAAC,SAAS,EAAE;AACjB,mBAAO,IAAI,CAAC,2BAA2B,CAAC,SAAS,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;SACxE;;;eAEc,yBAAC,SAAS,EAAE;AACvB,mBAAO,IAAI,CAAC,2BAA2B,CAAC,SAAS,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;SAC/E;;;eAEe,0BAAC,SAAS,EAAE;AACxB,mBAAO,IAAI,CAAC,2BAA2B,CAAC,SAAS,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;SAChF;;;eAEQ,mBAAC,SAAS,EAAE;AACjB,mBAAO,IAAI,CAAC,qBAAqB,CAAC,SAAS,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;SAClE;;;eAEQ,mBAAC,SAAS,EAAE;AACjB,gBAAI,IAAI,CAAC,qBAAqB,CAAC,SAAS,CAAC,MAAM,EAAE,SAAS,CAAC,EAAE;AACzD,uBAAO,IAAI,CAAC;aACf;AACD,mBAAO,IAAI,CAAC,qBAAqB,CAAC,SAAS,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;SAClE;;;aAEW,eAAG;AACX,gBAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE;AACpD,uBAAO,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC;aACxC;AACD,mBAAO,IAAI,CAAC;SACf;;;eAEY,gBAAC,QAAQ,EAAE,WAAW,EAAE,gBAAgB,EAAE,YAAY,EAAE;AACjE,mBAAO,IAAI,WAAW,CAClB,QAAQ,EACR,6BAAgB,MAAM,CAAC,WAAW,CAAC,EACnC,gBAAgB,EAChB,8BAAiB,YAAY,CAAC,CACjC,CAAC;SACL;;;WAhHgB,WAAW;;;qBAAX,WAAW","file":"CurrentUser.js","sourcesContent":["import UserAuthorities from './UserAuthorities';\nimport UserSettings from './UserSettings';\nimport { noCreateAllowedFor } from '../defaultConfig';\n\nconst models = Symbol('models');\nconst propertiesToIgnore = new Set([\n    'userCredentials',\n    'userGroups',\n    'userRoles',\n    'organisationUnits',\n    'dataViewOrganisationUnits',\n]);\n\nconst authTypes = {\n    READ: ['READ'],\n    CREATE: ['CREATE', 'CREATE_PUBLIC', 'CREATE_PRIVATE'],\n    CREATE_PUBLIC: ['CREATE_PUBLIC'],\n    CREATE_PRIVATE: ['CREATE_PRIVATE'],\n    DELETE: ['DELETE'],\n    UPDATE: ['UPDATE'],\n    EXTERNALIZE: ['EXTERNALIZE'],\n};\n\nconst propertySymbols = Array\n    .from(propertiesToIgnore)\n    .reduce((result, property) => {\n        result[property] = Symbol(property); // eslint-disable-line no-param-reassign\n        return result;\n    }, {});\n\nfunction getUserPropertiesToCopy(currentUserObject) {\n    let properties;\n    // The user credentials object is confusing so we set the properties straight onto the current user\n    if (currentUserObject.userCredentials) {\n        properties = Object.assign({}, currentUserObject.userCredentials, currentUserObject);\n    } else {\n        properties = Object.assign({}, currentUserObject);\n    }\n\n    return Object.keys(properties)\n        .reduce((result, property) => {\n            if (propertiesToIgnore.has(property)) {\n                if (properties[property].map) {\n                    result[propertySymbols[property]] = properties[property] // eslint-disable-line no-param-reassign\n                        .map(value => value.id);\n                }\n            } else {\n                result[property] = properties[property]; // eslint-disable-line no-param-reassign\n            }\n            return result;\n        }, {});\n}\n\nfunction isInNoCreateAllowedForList(modelDefinition) {\n    return modelDefinition && noCreateAllowedFor.has(modelDefinition.name);\n}\n\nexport default class CurrentUser {\n    constructor(userData, userAuthorities, modelDefinitions, settings) {\n        Object.assign(this, getUserPropertiesToCopy(userData));\n\n        this.authorities = userAuthorities;\n        this[models] = modelDefinitions;\n\n        /**\n         * @property {UserSettings} settings Contains a reference to a `UserSettings` instance that can be used\n         * to retrieve and save system settings.\n         *\n         * @description\n         * ```js\n         * d2.currentUser.userSettings.get('keyUiLocale')\n         *  .then(userSettingsValue => {\n         *    console.log('UI Locale: ' + userSettingsValue);\n         *  });\n         * ```\n         */\n        this.userSettings = settings;\n    }\n\n    getUserGroups() {\n        const userGroupIds = this[propertySymbols.userGroups];\n\n        return this[models].userGroup.get({ filter: [`id:in:[${userGroupIds.join(',')}]`] });\n    }\n\n    getUserRoles() {\n        const userRoleIds = this[propertySymbols.userRoles];\n\n        return this[models].userRole.get({ filter: [`id:in:[${userRoleIds.join(',')}]`] });\n    }\n\n    getOrganisationUnits(listOptions = { fields: ':all,displayName,children[id,displayName,path,children::isNotEmpty]' }) {\n        const organisationUnitsIds = this[propertySymbols.organisationUnits];\n\n        return this[models].organisationUnit.list(\n            Object.assign({}, listOptions, { filter: [`id:in:[${organisationUnitsIds.join(',')}]`] })\n        );\n    }\n\n    getDataViewOrganisationUnits(listOptions = { fields: ':all,displayName,children[id,displayName,path,children::isNotEmpty]' }) {\n        const organisationUnitsIds = this[propertySymbols.dataViewOrganisationUnits];\n\n        return this[models].organisationUnit.list(\n            Object.assign({}, listOptions, { filter: [`id:in:[${organisationUnitsIds.join(',')}]`] })\n        );\n    }\n\n    checkAuthorityForType(authorityType, modelType) {\n        if (!modelType || !Array.isArray(modelType.authorities)) {\n            return false;\n        }\n\n        return modelType.authorities\n            // Filter the correct authority to check for from the model\n            .filter(authority => authorityType.some(authToHave => authToHave === authority.type))\n            // Check the left over schema authority types\n            .some(schemaAuthority => schemaAuthority.authorities\n                .some(authorityToCheckFor => this.authorities.has(authorityToCheckFor)) // Check if one of the schema authorities are available in the users authorities\n            );\n    }\n\n    checkCreateAuthorityForType(authType, modelType) {\n        // When the modelType is mentioned in the the list of modelTypes that are not\n        // allowed to be created we return false\n        if (isInNoCreateAllowedForList(modelType)) {\n            return false;\n        }\n\n        // Otherwise we check using the normal procedure for checking authorities\n        return this.checkAuthorityForType(authType, modelType);\n    }\n\n    canCreate(modelType) {\n        return this.checkCreateAuthorityForType(authTypes.CREATE, modelType);\n    }\n\n    canCreatePublic(modelType) {\n        return this.checkCreateAuthorityForType(authTypes.CREATE_PUBLIC, modelType);\n    }\n\n    canCreatePrivate(modelType) {\n        return this.checkCreateAuthorityForType(authTypes.CREATE_PRIVATE, modelType);\n    }\n\n    canDelete(modelType) {\n        return this.checkAuthorityForType(authTypes.DELETE, modelType);\n    }\n\n    canUpdate(modelType) {\n        if (this.checkAuthorityForType(authTypes.UPDATE, modelType)) {\n            return true;\n        }\n        return this.checkAuthorityForType(authTypes.CREATE, modelType);\n    }\n\n    get uiLocale() {\n        if (this.userSettings && this.userSettings.keyUiLocale) {\n            return this.userSettings.keyUiLocale;\n        }\n        return 'en';\n    }\n\n    static create(userData, authorities, modelDefinitions, userSettings) {\n        return new CurrentUser(\n            userData,\n            UserAuthorities.create(authorities),\n            modelDefinitions,\n            new UserSettings(userSettings)\n        );\n    }\n}\n"]}