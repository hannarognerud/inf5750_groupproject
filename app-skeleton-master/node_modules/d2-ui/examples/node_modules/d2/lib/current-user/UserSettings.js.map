{"version":3,"sources":["../../src/current-user/UserSettings.js"],"names":[],"mappings":";;;;;;;;;;;;sBAAgB,YAAY;;;;wBACH,cAAc;;;;;;;;;IAUjC,YAAY;AACH,aADT,YAAY,CACF,YAAY,EAAsB;YAApB,GAAG,yDAAG,oBAAI,MAAM,EAAE;;8BAD1C,YAAY;;AAEV,YAAI,CAAC,GAAG,GAAG,GAAG,CAAC;;AAEf,YAAI,YAAY,EAAE;AACd,kBAAM,CAAC,MAAM,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;SACrC;KACJ;;;;;;;;;;;;;;;;;iBAPC,YAAY;;eAuBX,eAAG;AACF,mBAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;SACvC;;;;;;;;;;;;;;;;;;eAgBE,aAAC,GAAG,EAAE;;;AACL,qBAAS,YAAY,CAAC,KAAK,EAAE;;AAEzB,oBAAI;AACA,2BAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;iBAC5B,CAAC,OAAO,CAAC,EAAE;AACR,2BAAO,KAAK,CAAC;iBAChB;aACJ;;AAED,mBAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AACpC,oBAAI,CAAC,wBAAS,GAAG,CAAC,EAAE;AAChB,0BAAM,IAAI,SAAS,CAAC,0EAA0E,CAAC,CAAC;iBACnG;;AAED,sBAAK,GAAG,CAAC,GAAG,CAAC,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,SAAS,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CACzE,IAAI,CAAC,UAAA,QAAQ,EAAI;AACd,wBAAM,KAAK,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;;AAErC,0BAAK,GAAG,CAAC,GAAG,KAAK,CAAC;AAClB,wBAAI,KAAK,EAAE;AACP,+BAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC;qBACnC;AACD,0BAAM,CAAC,IAAI,KAAK,CAAC,2DAA2D,CAAC,CAAC,CAAC;iBAClF,CAAC,CAAC;aACV,CAAC,CAAC;SACN;;;;;;;;;;;;;;;;;;;eAiBE,aAAC,GAAG,EAAE,KAAK,EAAE;AACZ,gBAAM,UAAU,GAAG,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACnD,gBAAI,KAAK,KAAK,IAAI,IAAI,MAAI,KAAK,EAAI,MAAM,KAAK,CAAC,EAAE;AAC7C,uBAAO,IAAI,CAAC,GAAG,UAAO,CAAC,UAAU,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CACnD,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,CAAC;aACpC;AACD,mBAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC,CACnF,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC;SAChC;;;WA5FC,YAAY;;;qBA+FH,YAAY","file":"UserSettings.js","sourcesContent":["import Api from '../api/Api';\nimport { isString } from '../lib/check';\n\n\n/**\n * @class UserSettings\n *\n * @description\n * Handles communication with the userSettings endpoint. Can be used to get or save userSettings.\n */\n\nclass UserSettings {\n    constructor(userSettings, api = Api.getApi()) {\n        this.api = api;\n\n        if (userSettings) {\n            Object.assign(this, userSettings);\n        }\n    }\n\n    /**\n     * @method all\n     *\n     * @returns {Promise} Promise that resolves with the usersettings object from the api.\n     *\n     * @description\n     * Loads all the user settings of current user and returns them as an object from the promise.\n     * ```js\n     * d2.currentUser.userSettings.all()\n     *  .then(userSettings => {\n     *    console.log('UI Locale: ' + userSettings.keyUiLocale);\n     *  });\n     * ```\n     */\n    all() {\n        return this.api.get('userSettings');\n    }\n\n    /**\n     * @method get\n     *\n     * @param {String} key The identifier of the user setting that should be retrieved.\n     * @returns {Promise} A promise that resolves with the value or will fail if the value is not available.\n     *\n     * @description\n     * ```js\n     * d2.currentUser.userSettings.get('keyUiLocale')\n     *  .then(userSettingValue => {\n     *    console.log('UI Locale: ' + userSettingValue);\n     *  });\n     * ```\n     */\n    get(key) {\n        function processValue(value) {\n            // Attempt to parse the response as JSON. If this fails we return the value as is.\n            try {\n                return JSON.parse(value);\n            } catch (e) {\n                return value;\n            }\n        }\n\n        return new Promise((resolve, reject) => {\n            if (!isString(key)) {\n                throw new TypeError('A \"key\" parameter should be specified when calling get() on userSettings');\n            }\n\n            this.api.get(['userSettings', key].join('/'), undefined, { dataType: 'text' })\n                .then(response => {\n                    const value = processValue(response);\n                    // Store the value on the user settings object\n                    this[key] = value;\n                    if (value) {\n                        resolve(processValue(response));\n                    }\n                    reject(new Error('The requested userSetting has no value or does not exist.'));\n                });\n        });\n    }\n\n    /**\n     * @method set\n     *\n     * @param {String} key The identifier of the user setting that should be saved.\n     * @param {String} value The new value of the user setting.\n     * @returns {Promise} A promise that will resolve when the new value has been saved, or fail if saving fails.\n     *\n     * @description\n     * ```js\n     * d2.currentUser.userSettings.set('keyUiLocale', 'fr')\n     *  .then(() => {\n     *   console.log('UI Locale is now \"fr\");\n     *  });\n     * ```\n     */\n    set(key, value) {\n        const settingUrl = ['userSettings', key].join('/');\n        if (value === null || (`${value}`).length === 0) {\n            return this.api.delete(settingUrl, { dataType: 'text' })\n                .then(this[key] = undefined);\n        }\n        return this.api.post(settingUrl, value, { dataType: 'text', contentType: 'text/plain' })\n            .then(this[key] = value);\n    }\n}\n\nexport default UserSettings;\n"]}