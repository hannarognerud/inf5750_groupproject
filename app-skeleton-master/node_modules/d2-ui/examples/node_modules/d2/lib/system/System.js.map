{"version":3,"sources":["../../src/system/System.js"],"names":[],"mappings":"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","file":"System.js","sourcesContent":["/**\n * @module System\n *\n * @requires d2/system/SystemSettings\n */\nimport Api from '../api/Api';\nimport SystemSettings from './SystemSettings';\nimport SystemConfiguration from './SystemConfiguration';\n\n/**\n * @class System\n *\n * @description\n * Represents the system that can be interacted with. There is a single instance of this pre-defined onto the d2\n * object after initialisation. This can be interacted with using its property objects to among other be used\n * to get and save systemSettings.\n */\nclass System {\n    constructor(settings, configuration) {\n        /**\n         * @property {SystemSettings} settings Contains a reference to a `SystemSettings` instance that can be used\n         * to retrieve and save system settings.\n         *\n         * @description\n         * ```js\n         * d2.system.settings.get('keyLastSuccessfulResourceTablesUpdate')\n         *  .then(systemSettingsValue => {\n         *    console.log('Analytics was last updated on: ' + systemSettingsValue);\n         *  });\n         * ```\n         */\n        this.settings = settings;\n\n        /**\n         * @property {SystemConfiguration} configuration\n         *\n         * @description A representation of the system configuration, that can be used to retreive and change system\n         * configuration options.\n         */\n        this.configuration = configuration;\n\n        /**\n         * @property {Object} systemInfo\n         *\n         * @description An object containing system information about the DHIS2 instance\n         */\n        this.systemInfo = undefined;\n\n        /**\n         * @property {Object} version\n         *\n         * @description An object containing version information about the DHIS2 instance\n         */\n        this.version = undefined;\n\n        /**\n         * @property {Array} installedApps\n         *\n         * @description An array of all the webapps that are installed on the current DHIS2 instance\n         */\n        this.installedApps = undefined;\n    }\n\n    /**\n     * Sets the systemInfo and version properties\n     *\n     * @param systemInfo\n     */\n    setSystemInfo(systemInfo) {\n        this.version = System.parseVersionString(systemInfo.version);\n        this.systemInfo = systemInfo;\n    }\n\n    /**\n     * Sets the list of currently installed webapps\n     *\n     * @param apps\n     */\n    setInstalledApps(apps) {\n        this.installedApps = apps;\n    }\n\n    /**\n     * Refreshes the list of currently installed webapps\n     *\n     * @returns {Promise} A promise that resolves to the list of installed apps\n     */\n    loadInstalledApps() {\n        const api = Api.getApi();\n\n        return api.get('apps')\n            .then(apps => {\n                this.setInstalledApps(apps);\n\n                return apps;\n            });\n    }\n\n    /**\n     * Upload and install a zip file containing a new webapp\n     *\n     * @param zipFile Zip file data from a file input form field\n     * @param onProgress An optional callback that will be called whenever file upload progress info is available\n     * @returns {Promise}\n     */\n    uploadApp(zipFile, onProgress) {\n        const api = Api.getApi();\n        const data = new FormData();\n        let xhr = undefined;\n        data.append('file', zipFile);\n\n        if (onProgress !== undefined) {\n            xhr = new XMLHttpRequest();\n            xhr.upload.onprogress = (progress) => {\n                if (progress.lengthComputable) {\n                    onProgress(progress.loaded / progress.total);\n                }\n            };\n        }\n\n        return api.post('apps', data, {\n            contentType: false,\n            processData: false,\n            xhr: xhr !== undefined ? () => xhr : undefined,\n        });\n    }\n\n    /**\n     * Load the list of apps available in the DHIS 2 app store\n     *\n     * @param compatibleOnly If true, apps that are incompatible with the current system will be filtered out\n     * @returns {Promise}\n     */\n    loadAppStore(compatibleOnly = true) {\n        return new Promise((resolve, reject) => {\n            const api = Api.getApi();\n            api.get('appStore').then(appStoreData => {\n                const appStore = Object.assign({}, appStoreData);\n\n                appStore.apps = appStore.apps\n                    .map(appData => {\n                        const app = Object.assign({}, appData);\n\n                        if (compatibleOnly) {\n                            app.versions = app.versions\n                                .filter(versionData => System.isVersionCompatible(this.version, versionData));\n                        }\n\n                        return app;\n                    })\n                    .filter(appData => appData.versions.length > 0);\n\n                resolve(appStore);\n            }).catch(err => {\n                reject(err);\n            });\n        });\n    }\n\n    /**\n     * Install the specified app version from the DHIS 2 app store\n     *\n     * @param uid The uid of the app version to install\n     * @returns {Promise}\n     */\n    installAppVersion(uid) {\n        const api = Api.getApi();\n        return new Promise((resolve, reject) => {\n            api.post(['appStore', uid].join('/'), '', { dataType: 'text' }).then(() => {\n                resolve();\n            }).catch((err) => {\n                reject(err);\n            });\n        });\n    }\n\n    /**\n     * Remove the specified app from the system\n     *\n     * @param appKey The key of the app to remove\n     * @returns {Promise}\n     */\n    uninstallApp(appKey) {\n        const api = Api.getApi();\n\n        return api.delete(['apps', appKey].join('/'))\n            // TODO: Stop jQuery from rejecting successful promises\n            .catch(() => undefined);\n    }\n\n    /**\n     * Refresh the list of apps that are installed on the server\n     *\n     * @returns {Promise} A promise that resolves to the updated list of installed apps\n     */\n    reloadApps() {\n        const api = Api.getApi();\n        return api.update('apps').then(() => this.loadInstalledApps());\n    }\n\n    // TODO: Document\n    // TODO: Validate string\n    // TODO: Handle valid version objects too\n    static parseVersionString(version) {\n        return {\n            major: Number.parseInt(version, 10),\n            minor: Number.parseInt(version.substring(version.indexOf('.') + 1), 10),\n            snapshot: version.indexOf('-SNAPSHOT') >= 0,\n        };\n    }\n\n    // TODO: Document\n    // Disable eslint complexity warning\n    /* eslint-disable */\n    static compareVersions(a, b) {\n        const from = (typeof a === 'string' || a instanceof String) ? System.parseVersionString(a) : a;\n        const to = (typeof b === 'string' || b instanceof String) ? System.parseVersionString(b) : b;\n\n        if (from.major !== to.major) {\n            return from.major - to.major;\n        } else if (from.minor !== to.minor) {\n            return from.minor - to.minor;\n        }\n\n        return (from.snapshot ? 0 : 1) - (to.snapshot ? 0 : 1);\n    }\n    /* eslint-enable */\n\n    static isVersionCompatible(systemVersion, appVersion) {\n        const isNewEnough = (\n            appVersion.min_platform_version ?\n            System.compareVersions(systemVersion, appVersion.min_platform_version) >= 0 :\n            true\n        );\n        const isNotTooOld = (\n            appVersion.max_platform_version ?\n            System.compareVersions(systemVersion, appVersion.max_platform_version) <= 0 :\n            true\n        );\n\n        return isNewEnough && isNotTooOld;\n    }\n\n    /**\n     * @method getSystem\n     * @static\n     *\n     * @returns {System} Object with the system interaction properties\n     *\n     * @description\n     * Get a new instance of the system object. This will function as a singleton, when a System object has been created\n     * when requesting getSystem again the original version will be returned.\n     */\n    static getSystem() {\n        if (!System.getSystem.system) {\n            System.getSystem.system = new System(new SystemSettings(), new SystemConfiguration());\n        }\n\n        return System.getSystem.system;\n    }\n}\n\nexport default System;\n"]}