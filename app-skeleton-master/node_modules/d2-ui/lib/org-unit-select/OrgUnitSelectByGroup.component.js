'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _loglevel = require('loglevel');

var _loglevel2 = _interopRequireDefault(_loglevel);

var _DropDown = require('../form-fields/DropDown.component');

var _DropDown2 = _interopRequireDefault(_DropDown);

var _raisedButton = require('material-ui/lib/raised-button');

var _raisedButton2 = _interopRequireDefault(_raisedButton);

var _linearProgress = require('material-ui/lib/linear-progress');

var _linearProgress2 = _interopRequireDefault(_linearProgress);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var style = {
    button: {
        position: 'relative',
        top: 3,
        marginLeft: 16
    },
    progress: {
        height: 2,
        backgroundColor: 'rgba(0,0,0,0)',
        top: 46
    }
};
style.button1 = Object.assign({}, style.button, { marginLeft: 0 });

var OrgUnitSelectByLevel = function (_React$Component) {
    _inherits(OrgUnitSelectByLevel, _React$Component);

    function OrgUnitSelectByLevel(props, context) {
        _classCallCheck(this, OrgUnitSelectByLevel);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(OrgUnitSelectByLevel).call(this, props, context));

        _this.state = {
            loading: false,
            groupId: ''
        };
        _this.groupCache = {};

        _this.addToSelection = _this.addToSelection.bind(_this);
        _this.removeFromSelection = _this.removeFromSelection.bind(_this);
        _this.getOrgUnitsForGroup = _this.getOrgUnitsForGroup.bind(_this);

        _this.handleChangeGroup = _this.handleChangeGroup.bind(_this);
        _this.handleSelectAll = _this.handleSelectAll.bind(_this);
        _this.handleDeselectAll = _this.handleDeselectAll.bind(_this);

        _this.getTranslation = context.d2.i18n.getTranslation.bind(context.d2.i18n);
        return _this;
    }

    _createClass(OrgUnitSelectByLevel, [{
        key: 'addToSelection',
        value: function addToSelection(orgUnits) {
            var res = orgUnits;
            this.props.selected.forEach(function (orgUnitId) {
                if (res.indexOf(orgUnitId) === -1) {
                    res.push(orgUnitId);
                }
            });
            this.props.onUpdateSelection(res);
        }
    }, {
        key: 'removeFromSelection',
        value: function removeFromSelection(orgUnits) {
            this.props.onUpdateSelection(this.props.selected.filter(function (orgUnit) {
                return orgUnits.indexOf(orgUnit) === -1;
            }));
        }
    }, {
        key: 'getOrgUnitsForGroup',
        value: function getOrgUnitsForGroup(groupId) {
            var _this2 = this;

            var ignoreCache = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

            return new Promise(function (resolve) {
                if (!ignoreCache && _this2.groupCache.hasOwnProperty(groupId)) {
                    resolve(_this2.groupCache[groupId].slice());
                } else {
                    _loglevel2.default.debug('Loading org units for group ' + groupId);
                    _this2.setState({ loading: true });

                    var d2 = _this2.context.d2;
                    d2.models.organisationUnitGroups.get(groupId, { fields: 'organisationUnits[id]' }).then(function (orgUnitGroups) {
                        return orgUnitGroups.organisationUnits.toArray().map(function (orgUnit) {
                            return orgUnit.id;
                        });
                    }).then(function (orgUnitIds) {
                        _loglevel2.default.debug('Loaded ' + orgUnitIds.length + ' org units for group ' + groupId);
                        _this2.setState({ loading: false });
                        _this2.groupCache[groupId] = orgUnitIds;

                        // Make a copy of the returned array to ensure that the cache won't be modified from elsewhere
                        resolve(orgUnitIds.slice());
                    }).catch(function (err) {
                        _this2.setState({ loading: false });
                        _loglevel2.default.error('Failed to load org units in group ' + groupId + ':', err);
                    });
                }
            });
        }
    }, {
        key: 'handleChangeGroup',
        value: function handleChangeGroup(event) {
            this.setState({ groupId: event.target.value });
        }
    }, {
        key: 'handleSelectAll',
        value: function handleSelectAll() {
            var _this3 = this;

            this.getOrgUnitsForGroup(this.state.groupId).then(function (orgUnits) {
                _this3.addToSelection(orgUnits);
            });
        }
    }, {
        key: 'handleDeselectAll',
        value: function handleDeselectAll() {
            var _this4 = this;

            this.getOrgUnitsForGroup(this.state.groupId).then(function (orgUnits) {
                _this4.removeFromSelection(orgUnits);
            });
        }
    }, {
        key: 'renderControls',
        value: function renderControls() {
            return _react2.default.createElement(
                'div',
                { style: { position: 'absolute', display: 'inline-block', top: 24, marginLeft: 16 } },
                this.state.loading && _react2.default.createElement(_linearProgress2.default, { size: 0.5, style: style.progress }),
                _react2.default.createElement(_raisedButton2.default, {
                    label: this.getTranslation('select'),
                    style: style.button1,
                    onClick: this.handleSelectAll,
                    disabled: this.state.loading
                }),
                _react2.default.createElement(_raisedButton2.default, {
                    label: this.getTranslation('deselect'),
                    style: style.button,
                    onClick: this.handleDeselectAll,
                    disabled: this.state.loading
                })
            );
        }
    }, {
        key: 'render',
        value: function render() {
            var menuItems = Array.isArray(this.props.groups) && this.props.groups || this.props.groups.toArray();

            // The minHeight on the wrapping div below is there to compensate for the fact that a
            // Material-UI SelectField will change height depending on whether or not it has a value
            return _react2.default.createElement(
                'div',
                { style: { position: 'relative', minHeight: 89 } },
                _react2.default.createElement(_DropDown2.default, {
                    value: this.state.groupId,
                    menuItems: menuItems,
                    onChange: this.handleChangeGroup,
                    floatingLabelText: 'Organisation Unit Group',
                    disabled: this.state.loading
                }),
                (this.state.groupId.length > 0 || this.state.loading) && this.renderControls()
            );
        }
    }]);

    return OrgUnitSelectByLevel;
}(_react2.default.Component);

OrgUnitSelectByLevel.propTypes = {
    // groups is an array of either ModelCollection objects or plain objects,
    // where each object should contain `id` and `displayName` properties
    groups: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.object, _react2.default.PropTypes.array]).isRequired,

    // selected is an array of selected organisation unit IDs
    selected: _react2.default.PropTypes.array.isRequired,

    // Whenever the selection changes, onUpdateSelection will be called with
    // one argument: The new array of selected organisation units
    onUpdateSelection: _react2.default.PropTypes.func.isRequired

};

OrgUnitSelectByLevel.contextTypes = { d2: _react2.default.PropTypes.any.isRequired };

exports.default = OrgUnitSelectByLevel;