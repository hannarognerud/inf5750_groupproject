'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.default = addDeepLinksForMaintenance;

var _map = require('lodash/fp/map');

var _map2 = _interopRequireDefault(_map);

var _curry = require('lodash/fp/curry');

var _curry2 = _interopRequireDefault(_curry);

var _compose = require('lodash/fp/compose');

var _compose2 = _interopRequireDefault(_compose);

var _rx = require('rx');

var _flatten = require('lodash/fp/flatten');

var _flatten2 = _interopRequireDefault(_flatten);

var _filter = require('lodash/fp/filter');

var _filter2 = _interopRequireDefault(_filter);

var _mapValues = require('lodash/fp/mapValues');

var _mapValues2 = _interopRequireDefault(_mapValues);

var _headerBar = require('../../headerBar.store');

var _d2 = require('d2/lib/d2');

var _camelCaseToUnderscores = require('d2-utilizr/lib/camelCaseToUnderscores');

var _camelCaseToUnderscores2 = _interopRequireDefault(_camelCaseToUnderscores);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// TODO: This is duplicate code from the maintenance-app
var maintenanceSections = {
    all: {
        items: []
    },
    dataElementSection: {
        items: ['categoryOption', 'category', 'categoryCombo', 'categoryOptionCombo', 'categoryOptionGroup', 'categoryOptionGroupSet', 'dataElement', 'dataElementGroup', 'dataElementGroupSet']
    },
    dataSetSection: {
        items: ['dataSet']
    },
    indicatorSection: {
        items: ['indicator', 'indicatorType', 'indicatorGroup', 'indicatorGroupSet']
    },

    organisationUnitSection: {
        items: ['organisationUnit', 'organisationUnitGroup', 'organisationUnitGroupSet', 'organisationUnitLevel']
    },

    otherSection: {
        items: ['constant', 'attribute', 'optionSet']
    }
};

function addToTranslationConfig(modelName) {
    _d2.config.i18n.strings.add(modelName);
}

(0, _map2.default)(addToTranslationConfig, (0, _map2.default)(_camelCaseToUnderscores2.default, (0, _flatten2.default)((0, _map2.default)('items', maintenanceSections))));

var getMenuItemsFromModelName = (0, _curry2.default)(function (section, modelName) {
    return {
        name: (0, _camelCaseToUnderscores2.default)(modelName),
        defaultAction: '/dhis-web-maintenance/#/list/' + section + '/' + modelName,
        icon: '/icons/dhis-web-maintenance.png',
        description: '',
        parentApp: 'dhis-web-maintenance'
    };
});

var toKeyValueArray = function toKeyValueArray(obj) {
    return Object.keys(obj).map(function (key) {
        return [key, obj[key]];
    });
};

var filterOutEmptyValueLists = function filterOutEmptyValueLists(_ref) {
    var _ref2 = _slicedToArray(_ref, 2);

    var key = _ref2[0];
    var value = _ref2[1];
    return value.length;
};
var getMapOfModelsPerSection = (0, _mapValues2.default)('items', maintenanceSections);
var sectionsWithModels = (0, _filter2.default)(filterOutEmptyValueLists, toKeyValueArray(getMapOfModelsPerSection));
var getMenuItemConfigsForSection = function getMenuItemConfigsForSection(_ref3) {
    var _ref4 = _slicedToArray(_ref3, 2);

    var section = _ref4[0];
    var models = _ref4[1];
    return (0, _map2.default)(getMenuItemsFromModelName(section), models);
};
var createAppsListForMenu = (0, _compose2.default)(_flatten2.default, (0, _map2.default)(getMenuItemConfigsForSection));

// Replace this with a proper source for there values
function addDeepLinksForMaintenance(apps) {
    var maintenanceDeepLinks$ = _rx.Observable.just(createAppsListForMenu(sectionsWithModels));

    return _rx.Observable.combineLatest(_headerBar.translate$, maintenanceDeepLinks$, _headerBar.translateMenuItemNames).flatMap(function (items) {
        return _rx.Observable.fromPromise((0, _d2.getInstance)().then(function (d2) {
            return (0, _headerBar.prepareMenuItems)((0, _headerBar.getBaseUrlFromD2)(d2), items);
        }));
    }).map(function (maintenanceItems) {
        return [].concat(apps, maintenanceItems);
    });
}