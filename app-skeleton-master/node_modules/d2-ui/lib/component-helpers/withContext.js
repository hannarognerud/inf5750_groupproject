'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = withContext;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function withContext(Component, contextTypes) {
    //let WithContext;
    //
    //if (React.Component.isPrototypeOf(Component)) {
    //    // Class components
    //    WithContext = class extends Component {
    //        render() {
    //            return super.render();
    //        }
    //    };
    //} else {
    //    // Function components
    //    WithContext = (props, context) => {
    //        return Component(props, context);
    //    };
    //}
    //WithContext.contextTypes = contextTypes;

    var WithContext = function (_Component) {
        _inherits(WithContext, _Component);

        function WithContext() {
            _classCallCheck(this, WithContext);

            return _possibleConstructorReturn(this, Object.getPrototypeOf(WithContext).apply(this, arguments));
        }

        _createClass(WithContext, [{
            key: 'render',
            value: function render() {
                var ComponentWithContext = Object.create(Component, {
                    contextTypes: contextTypes
                });

                return _react2.default.createElement(ComponentWithContext, this.props, this.props.children);
            }
        }]);

        return WithContext;
    }(Component);

    return WithContext;
}