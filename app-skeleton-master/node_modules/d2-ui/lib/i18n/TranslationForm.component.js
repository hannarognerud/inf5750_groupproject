'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _circularProgress = require('material-ui/lib/circular-progress');

var _circularProgress2 = _interopRequireDefault(_circularProgress);

var _textField = require('material-ui/lib/text-field');

var _textField2 = _interopRequireDefault(_textField);

var _Translate = require('../i18n/Translate.mixin');

var _Translate2 = _interopRequireDefault(_Translate);

var _LocaleSelector = require('../i18n/LocaleSelector.component');

var _LocaleSelector2 = _interopRequireDefault(_LocaleSelector);

var _translationForm = require('./translationForm.actions');

var _translationForm2 = _interopRequireDefault(_translationForm);

var _translation = require('./translation.store');

var _translation2 = _interopRequireDefault(_translation);

var _camelCaseToUnderscores = require('d2-utilizr/lib/camelCaseToUnderscores');

var _camelCaseToUnderscores2 = _interopRequireDefault(_camelCaseToUnderscores);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _react2.default.createClass({
    displayName: 'TranslationForm.component',

    propTypes: {
        onTranslationSaved: _react2.default.PropTypes.func.isRequired,
        onTranslationError: _react2.default.PropTypes.func.isRequired,
        objectTypeToTranslate: _react2.default.PropTypes.object.isRequired,
        objectToTranslate: _react2.default.PropTypes.shape({
            id: _react2.default.PropTypes.string.isRequired
        }).isRequired,
        fieldsToTranslate: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.string)
    },

    mixins: [_Translate2.default],

    getInitialState: function getInitialState() {
        return {
            loading: true,
            translations: {},
            translationValues: {},
            currentSelectedLocale: ''
        };
    },
    getDefaultProps: function getDefaultProps() {
        return {
            fieldsToTranslate: ['name', 'shortName', 'description']
        };
    },
    componentDidMount: function componentDidMount() {
        var _this = this;

        _translationForm2.default.loadLocales();

        this.disposable = _translation2.default.subscribe(function (storeState) {
            _this.setState(_extends({}, storeState, {
                translationValues: (storeState.translations || []).reduce(function (acc, translation) {
                    acc[translation.property] = translation.value;
                    return acc;
                }, {}),
                loading: false
            }));
        });
    },
    componentWillUnmount: function componentWillUnmount() {
        this.disposable && this.disposable.dispose && this.disposable.dispose();
    },
    getLoadingdataElement: function getLoadingdataElement() {
        return _react2.default.createElement(
            'div',
            { style: { textAlign: 'center' } },
            _react2.default.createElement(_circularProgress2.default, { mode: 'indeterminate' })
        );
    },
    renderFieldsToTranslate: function renderFieldsToTranslate() {
        var _this2 = this;

        return this.props.fieldsToTranslate.filter(function (fieldName) {
            return fieldName;
        }).map(function (fieldName) {
            return _react2.default.createElement(
                'div',
                { key: fieldName },
                _react2.default.createElement(_textField2.default, { floatingLabelText: _this2.getTranslation((0, _camelCaseToUnderscores2.default)(fieldName)),
                    value: _this2.state.translationValues[fieldName],
                    fullWidth: true,
                    onChange: _this2._setValue.bind(_this2, fieldName),
                    onBlur: _this2._saveValue.bind(_this2, fieldName)
                }),
                _react2.default.createElement(
                    'div',
                    null,
                    _this2.props.objectToTranslate[fieldName]
                )
            );
        });
    },
    renderForm: function renderForm() {
        return _react2.default.createElement(
            'div',
            null,
            this.renderFieldsToTranslate()
        );
    },
    renderHelpText: function renderHelpText() {
        return _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(
                'p',
                null,
                this.getTranslation('select_a_locale_to_enter_translations_for_that_language')
            )
        );
    },
    render: function render() {
        if (this.state.loading) {
            return this.getLoadingdataElement();
        }

        return _react2.default.createElement(
            'div',
            { style: { minHeight: 250 } },
            _react2.default.createElement(_LocaleSelector2.default, { locales: this.state.availableLocales, onChange: this._reloadTranslations }),
            Boolean(this.state.currentSelectedLocale) ? this.renderForm() : this.renderHelpText()
        );
    },
    _reloadTranslations: function _reloadTranslations(locale) {
        _translationForm2.default.loadTranslationsForObject(this.props.objectToTranslate.id, locale);
        this.setState({
            currentSelectedLocale: locale
        });
    },
    _setValue: function _setValue(property, event) {
        var newTranslations = this.state.translationValues;

        newTranslations[property] = event.target.value;

        this.setState({
            translationValues: newTranslations
        });
    },
    _saveValue: function _saveValue(property, event) {
        _translationForm2.default.saveTranslation(property, event.target.value, this.props.objectToTranslate.id, this.props.objectTypeToTranslate, this.state.currentSelectedLocale).subscribe(this.props.onTranslationSaved, this.props.onTranslationError);
    }
});