'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _Action = require('../action/Action');

var _Action2 = _interopRequireDefault(_Action);

var _d2 = require('d2/lib/d2');

var _translation = require('./translation.store');

var _translation2 = _interopRequireDefault(_translation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function loadAvailableLocales() {
    if (!loadAvailableLocales.localePromise) {
        loadAvailableLocales.localePromise = (0, _d2.getInstance)().then(function (d2) {
            var api = d2.Api.getApi();

            return api.get('locales/db');
        });
    }

    return loadAvailableLocales.localePromise;
}

function getClassName(modelDefinition) {
    return modelDefinition.javaClass.split('.').pop();
}

var actions = _Action2.default.createActionsFromNames(['loadTranslationsForObject', 'loadLocales', 'saveTranslation']);

actions.loadLocales.subscribe(function () {
    loadAvailableLocales().then(function (availableLocales) {
        _translation2.default.setState(_extends({}, _translation2.default.state, {
            availableLocales: availableLocales
        }));
    });
});

actions.loadTranslationsForObject.subscribe(function (_ref) {
    var _ref$data = _slicedToArray(_ref.data, 2);

    var objectId = _ref$data[0];
    var locale = _ref$data[1];
    var complete = _ref.complete;
    var error = _ref.error;

    (0, _d2.getInstance)().then(function (d2) {
        return d2.models.translation.filter().on('objectId').equals(objectId).filter().on('locale').equals(locale).list({ fields: 'href,id,property,value,className,locale', paging: false }).then(function (translationCollection) {
            return translationCollection.toArray();
        });
    }).then(function (translations) {
        _translation2.default.setState(_extends({}, _translation2.default.state, {
            translations: translations
        }));
    }).then(complete).catch(error);
});

actions.saveTranslation.subscribe(function (_ref2) {
    var _ref2$data = _slicedToArray(_ref2.data, 5);

    var property = _ref2$data[0];
    var value = _ref2$data[1];
    var objectId = _ref2$data[2];
    var modelDefinition = _ref2$data[3];
    var locale = _ref2$data[4];
    var complete = _ref2.complete;
    var error = _ref2.error;

    var model = _translation2.default.state.translations.find(function (translation) {
        return translation.property === property;
    });

    if (model) {
        // Update existing translation
        if (model.value !== value) {
            model.value = value;

            model.save().then(complete).catch(error);
        }
    } else {
        if (!value) {
            return;
        }

        // Create new translation
        (0, _d2.getInstance)().then(function (d2) {
            return d2.models.translation;
        }).then(function (translation) {
            return translation.create();
        }).then(function (translationModel) {
            translationModel.className = getClassName(modelDefinition);
            translationModel.locale = locale;
            translationModel.value = value;
            translationModel.property = property;
            translationModel.objectId = objectId;

            return translationModel.save();
        }).then(complete).catch(error);
    }
});

exports.default = actions;