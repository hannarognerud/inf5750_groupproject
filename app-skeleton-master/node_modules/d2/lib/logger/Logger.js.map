{"version":3,"sources":["../../src/logger/Logger.js"],"names":[],"mappings":";;;;;;;;;;wBAAkC,cAAc;;IAE1C,MAAM;AACG,aADT,MAAM,CACI,OAAO,EAAE;8BADnB,MAAM;;AAEJ,iCAAU,OAAO,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;AACxC,YAAI,CAAC,MAAM,GAAG,OAAO,CAAC;KACzB;;iBAJC,MAAM;;eAMF,gBAAC,IAAI,EAAE;AACT,mBAAO,CAAC,EAAE,IAAI,IAAI,OAAO,IAAI,sBAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,UAAU,CAAC,CAAA,AAAC,CAAC;SACvE;;;eAEI,iBAAU;AACX,gBAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;kDADrB,IAAI;AAAJ,wBAAI;;;AAEL,oBAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AACvC,uBAAO,IAAI,CAAC;aACf;AACD,mBAAO,KAAK,CAAC;SAChB;;;eAEI,iBAAU;AACX,gBAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;mDADrB,IAAI;AAAJ,wBAAI;;;AAEL,oBAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AACvC,uBAAO,IAAI,CAAC;aACf;AACD,mBAAO,KAAK,CAAC;SAChB;;;eAEE,eAAU;AACT,gBAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;mDADrB,IAAI;AAAJ,wBAAI;;;AAEH,oBAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AACrC,uBAAO,IAAI,CAAC;aACf;AACD,mBAAO,KAAK,CAAC;SAChB;;;eAEG,gBAAU;AACV,gBAAI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;mDADrB,IAAI;AAAJ,wBAAI;;;AAEJ,oBAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AACtC,uBAAO,IAAI,CAAC;aACf;AACD,mBAAO,KAAK,CAAC;SAChB;;;eAEe,qBAAG;AACf,gBAAI,MAAM,YAAA,CAAC;;;AAGX,gBAAI;;AAEA,sBAAM,GAAG,MAAM,CAAC,OAAO,CAAC;aAC3B,CAAC,OAAO,CAAC,EAAE;;;AAGR,sBAAM,GAAG,MAAM,CAAC,OAAO,CAAC;aAC3B;;AAED,gBAAI,IAAI,CAAC,MAAM,EAAE;AACb,uBAAO,IAAI,CAAC,MAAM,CAAC;aACtB;AACD,mBAAQ,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,CAAE;SAC7C;;;WA3DC,MAAM;;;qBA8DG,MAAM","file":"Logger.js","sourcesContent":["import { checkType, isType } from '../lib/check';\n\nclass Logger {\n    constructor(logging) {\n        checkType(logging, 'object', 'console');\n        this.logger = logging;\n    }\n\n    canLog(type) {\n        return !!(type && console && isType(this.logger[type], 'function'));\n    }\n\n    debug(...rest) {\n        if (this.canLog('debug')) {\n            this.logger.debug.apply(console, rest);\n            return true;\n        }\n        return false;\n    }\n\n    error(...rest) {\n        if (this.canLog('error')) {\n            this.logger.error.apply(console, rest);\n            return true;\n        }\n        return false;\n    }\n\n    log(...rest) {\n        if (this.canLog('log')) {\n            this.logger.log.apply(console, rest);\n            return true;\n        }\n        return false;\n    }\n\n    warn(...rest) {\n        if (this.canLog('warn')) {\n            this.logger.warn.apply(console, rest);\n            return true;\n        }\n        return false;\n    }\n\n    static getLogger() {\n        let logger;\n\n        // TODO: This is not very clean try to figure out a better way to do this.\n        try {\n            // Node version\n            logger = global.console;\n        } catch (e) {\n            // Browser version fallback\n            /* istanbul ignore next */\n            logger = window.console;\n        }\n\n        if (this.logger) {\n            return this.logger;\n        }\n        return (this.logger = new Logger(logger));\n    }\n}\n\nexport default Logger;\n"]}