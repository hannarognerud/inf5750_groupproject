{"version":3,"sources":["../../src/model/ModelCollectionProperty.js"],"names":[],"mappings":"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","file":"ModelCollectionProperty.js","sourcesContent":["import ModelCollection from './ModelCollection';\n\n\n/**\n * @class ModelCollectionProperty\n *\n * @description\n * A ModelCollectionProperty instance is a ModelCollection that is a property of\n * a model instance. ModelCollectionProperties can be operated on independently of\n * the Model that owns them.\n */\nclass ModelCollectionProperty extends ModelCollection {\n\n    /**\n     * @constructor\n     *\n     * @param {Model} parentModel The `Model` of the parent of this `ModelCollectionProperty`\n     * @param {ModelDefinition} modelDefinition The `ModelDefinition` that this `ModelCollection` property is for\n     * @param {Model[]} values Initial values that should be added to the collection property\n     *\n     * @description\n     *\n     * Creates a new `ModelCollectionProperty` object. This is a subclass of `ModelCollection`, which adds logic\n     * for handling adding and removing elements to the collection and saving the changes to the API.\n     */\n    constructor(parentModel, modelDefinition, values) {\n        super(modelDefinition, values, undefined);\n\n        // Dirty bit\n        this.dirty = false;\n        // Keep track of added and removed elements\n        this.added = new Set();\n        this.removed = new Set();\n\n        // Store the parent model of this collection so we can construct the URI for API calls\n        this.parentModel = parentModel;\n    }\n\n    /**\n     * @method add\n     *\n     * @param {Model} value Model instance to add to the collection.\n     * @returns {ModelCollectionProperty} Returns itself for chaining purposes.\n     *\n     * @description\n     * Calls the `add` method on the parent `ModelCollection` class, and then performs checks to keep track of\n     * what, if any, changes that have been made to the collection.\n     */\n    add(value) {\n        // TODO: Allow adding plain ID's that aren't Model instances maybe?\n        if (this.valuesContainerMap.has(value.id)) {\n            return this;\n        }\n\n        super.add(value);\n\n        if (this.removed.has(value.id)) {\n            this.removed.delete(value.id);\n        } else {\n            this.added.add(value.id);\n        }\n\n        this.updateDirty();\n        return this;\n    }\n\n    /**\n     * @method remove\n     *\n     * @param {Model} value Model instance to remove from the collection.\n     * @returns {ModelCollectionProperty} Returns itself for chaining purposes.\n     *\n     * @description\n     * If the collection contains an object with the same id as the `value` parameter, that object is removed\n     * from the collection. Checks are then performed to keep track of what, if any, changes that have been\n     * made to the collection.\n     */\n    remove(value) {\n        // TODO: Allow removing plain ID's that aren't Model instances maybe?\n        ModelCollection.throwIfContainsOtherThanModelObjects([value]);\n        ModelCollection.throwIfContainsModelWithoutUid([value]);\n\n        if (this.delete(value.id)) {\n            if (this.added.has(value.id)) {\n                this.added.delete(value.id);\n            } else {\n                this.removed.add(value.id);\n            }\n        }\n\n        this.updateDirty();\n        return this;\n    }\n\n    /**\n     * @method updateDirty\n     *\n     * @returns {boolean} True if the collection has changed, false otherwise.\n     *\n     * @description\n     * Checks whether any changes have been made to the collection, and updates the dirty flag accordingly.\n     */\n    updateDirty() {\n        this.dirty = this.added.size > 0 || this.removed.size > 0;\n        return this.dirty;\n    }\n\n    /**\n     * @method save\n     *\n     * @returns {Promise} A `Promise`\n     *\n     * @description\n     * If any changes have been made to the collection, these changes will be submitted to the API. The returned\n     * promise will resolve successfully when the changes have been saved to the API, and will be rejected if\n     * either the changes weren't saved or if there were no changes to save.\n     */\n    save() {\n        // TODO: Use Promise constructor and call resolve/reject as appropriate\n        if (!this.dirty) {\n            return Promise.reject('Nothing to save!');\n        }\n\n        const api = this.modelDefinition.api;\n\n        const queries = [];\n\n        if (this.added.size) {\n            Array.from(this.added).forEach(id => {\n                queries.push(api.post([this.parentModel.href, this.modelDefinition.plural, id].join('/')));\n            });\n        }\n        if (this.removed.size) {\n            Array.from(this.removed).forEach(id => {\n                queries.push(api.delete([this.parentModel.href, this.modelDefinition.plural, id].join('/')));\n            });\n        }\n\n        return Promise.all(queries)\n            .then(() => {\n                this.added = new Set();\n                this.removed = new Set();\n                this.updateDirty();\n                return Promise.resolve();\n            })\n            .catch((err) => Promise.reject('Failed to alter collection:', err));\n    }\n\n    /**\n     * @method create\n     *\n     * @param {Model} parentModel\n     * @param {ModelDefinition} modelDefinition\n     * @param {Model[]} values\n     * @returns {ModelCollectionProperty}\n     *\n     * @description\n     * See `ModelCollectionProperty.constructor`.\n     */\n    static create(parentModel, modelDefinition, values) {\n        return new ModelCollectionProperty(parentModel, modelDefinition, values);\n    }\n}\n\n\nexport default ModelCollectionProperty;\n"]}