{"version":3,"sources":["../../src/model/ModelValidation.js"],"names":[],"mappings":";;;;;;;;;;;;wBAA0B,cAAc;;4BACrB,kBAAkB;;;;sBACrB,YAAY;;;;;;;;IAMtB,eAAe;AACN,aADT,eAAe,CACL,cAAc,EAAE;8BAD1B,eAAe;;AAEb,iCAAU,cAAc,EAAE,QAAQ,EAAE,iBAAiB,CAAC,CAAC;AACvD,YAAI,CAAC,MAAM,GAAG,cAAc,CAAC;KAChC;;;;;;;;;iBAJC,eAAe;;eAYT,oBAAG;AACP,gBAAI,CAAC,MAAM,CAAC,IAAI,CAAC,4CAA4C,CAAC,CAAC;AAC/D,kBAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;SACjE;;;;;;;;;;;;;;;eAaoB,+BAAC,KAAK,EAAE;AACzB,gBAAI,EAAE,KAAK,IAAI,KAAK,CAAC,eAAe,IAAI,KAAK,CAAC,eAAe,CAAC,IAAI,CAAA,AAAC,EAAE;AACjE,uBAAO,OAAO,CAAC,MAAM,CAAC,6CAA6C,CAAC,CAAC;aACxE;;AAED,qBAAS,2BAA2B,CAAC,UAAU,EAAE;;;;AAI7C,oBAAI,UAAU,CAAC,QAAQ,KAAK,UAAU,CAAC,QAAQ,CAAC,oBAAoB,IAAI,UAAU,CAAC,QAAQ,CAAC,YAAY,CAAA,AAAC,EAAE;AACvG,2BAAQ,UAAU,CAAC,QAAQ,CAAC,oBAAoB,IAAI,UAAU,CAAC,QAAQ,CAAC,YAAY,CAAE;iBACzF;AACD,sBAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC;aAC7E;;AAED,gBAAM,GAAG,gBAAc,KAAK,CAAC,eAAe,CAAC,IAAI,AAAE,CAAC;;;AAGpD,mBAAO,oBAAI,MAAM,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,eAAe,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC,CAC3E,IAAI,CAAC,UAAC,UAAU,EAAK;AAClB,oBAAI,UAAU,CAAC,MAAM,KAAK,IAAI,EAAE;AAC5B,2BAAO,EAAE,CAAC;iBACb;AACD,uBAAO,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;aACrC,CAAC,SACI,CAAC,2BAA2B,CAAC,CAAC;SAC3C;;;;;;;;;;;;;;eAYwB,8BAAG;AACxB,gBAAI,IAAI,CAAC,eAAe,EAAE;AACtB,uBAAO,IAAI,CAAC,eAAe,CAAC;aAC/B;AACD,mBAAQ,IAAI,CAAC,eAAe,GAAG,IAAI,eAAe,CAAC,0BAAO,SAAS,CAAC,OAAO,CAAC,CAAC,CAAE;SAClF;;;WAvEC,eAAe;;;qBA0EN,eAAe","file":"ModelValidation.js","sourcesContent":["import { checkType } from '../lib/check';\nimport Logger from '../logger/Logger';\nimport Api from '../api/Api';\n\n\n/**\n * @class ModelValidation\n */\nclass ModelValidation {\n    constructor(providedLogger) {\n        checkType(providedLogger, 'object', 'logger (Logger)');\n        this.logger = providedLogger;\n    }\n\n    /**\n     * @deprecated\n     * @method validate\n     *\n     * @returns {{status: boolean, messages: Array}} Returns {status: true, messages: []}\n     */\n    validate() {\n        this.logger.warn('Client side model validation is deprecated');\n        throw new Error('Client side model validation is deprecated');\n    }\n\n    /**\n     * @method validateAgainstSchema\n     *\n     * @param {Model} model The model that should be validated.\n     * @returns {Array} Returns an array with validation messages if there are any.\n     *\n     * @description\n     * Sends a POST request against the `api/schemas` endpoint to check if the model is valid.\n     *\n     * @note {warn} Currently only checks\n     */\n    validateAgainstSchema(model) {\n        if (!(model && model.modelDefinition && model.modelDefinition.name)) {\n            return Promise.reject('model.modelDefinition.name can not be found');\n        }\n\n        function extractValidationViolations(webmessage) {\n            // Support both the 2.23+ version using `errorReports` and the 2.22 and lower using `validationViolations`\n            // for errorMessages from the schemas endpoint.\n            // TODO: Remove support for the older `validationViolations` when supporting 2.22 is no longer required\n            if (webmessage.response && (webmessage.response.validationViolations || webmessage.response.errorReports)) {\n                return (webmessage.response.validationViolations || webmessage.response.errorReports);\n            }\n            throw new Error('Response was not a WebMessage with the expected format');\n        }\n\n        const url = `schemas/${model.modelDefinition.name}`;\n\n        // TODO: The function getOwnedPropertyJSON should probably not be exposed, perhaps we could have a getJSONForModel(ownedPropertiesOnly=true) method.\n        return Api.getApi().post(url, model.modelDefinition.getOwnedPropertyJSON(model))\n            .then((webMessage) => {\n                if (webMessage.status === 'OK') {\n                    return [];\n                }\n                return Promise.reject(webMessage);\n            })\n            .catch(extractValidationViolations);\n    }\n\n    /**\n     * @method getModelValidation\n     * @static\n     *\n     * @returns {ModelValidation} New or memoized instance of `ModelInstance`\n     *\n     * @description\n     * Returns the `ModelValidation` singleton. Creates a new one if it does not yet exist.\n     * Grabs a logger instance by calling `Logger.getLogger`\n     */\n    static getModelValidation() {\n        if (this.modelValidation) {\n            return this.modelValidation;\n        }\n        return (this.modelValidation = new ModelValidation(Logger.getLogger(console)));\n    }\n}\n\nexport default ModelValidation;\n"]}