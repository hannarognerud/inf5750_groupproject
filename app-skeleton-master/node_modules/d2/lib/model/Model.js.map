{"version":3,"sources":["../../src/model/Model.js"],"names":[],"mappings":"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","file":"Model.js","sourcesContent":["/**\n * @module Model\n *\n * @requires lib/check\n * @requires model/ModelBase\n */\n\nimport { checkType } from '../lib/check';\nimport ModelBase from './ModelBase';\nimport { DIRTY_PROPERTY_LIST } from './ModelBase';\n\n// TODO: Perhaps we can generate model classes dynamically based on the schemas and inherit from this.\n/**\n * @class Model\n * @extends ModelBase\n *\n * @description\n * A Model represents an object from the DHIS2 Api. A model is created based of a ModelDefinition. The ModelDefinition\n * has the properties that the model should have.\n */\nclass Model {\n\n    /**\n     * @constructor\n     *\n     * @param {ModelDefinition} modelDefinition The model definition that corresponds with the model.\n     * This is essential defining what type the model is representing.\n     *\n     * @description\n     * Will create a new model instanced based on the model definition. When creating a new instance the model\n     * definition needs to have both the modelValidations and modelProperties.\n     *\n     * The model properties will depend on the ModelDefinition. A model definition is based on a DHIS2 Schema.\n     */\n    constructor(modelDefinition) {\n        checkType(modelDefinition, 'object', 'modelDefinition');\n        checkType(modelDefinition.modelProperties, 'object', 'modelProperties');\n\n        /**\n         * @property {ModelDefinition} modelDefinition Stores reference to the modelDefinition that was used when\n         * creating the model. This property is not enumerable or writable and will therefore not show up when looping\n         * over the object properties.\n         */\n        Object.defineProperty(this, 'modelDefinition', {\n            enumerable: false,\n            configurable: false,\n            writable: false,\n            value: modelDefinition,\n        });\n\n        /**\n         * @property {Boolean} dirty Represents the state of the model. When the model is concidered `dirty`\n         * there are pending changes.\n         * This property is not enumerable or writable and will therefore not show up when looping\n         * over the object properties.\n         */\n        Object.defineProperty(this, 'dirty', {\n            enumerable: false,\n            configurable: false,\n            writable: true,\n            value: false,\n        });\n\n        /**\n         * @property {Object} dataValues Values object used to store the actual model values. Normally access to the\n         * Model data will be done through accessor properties that are generated from the modelDefinition.\n         *\n         * @note {warning} This should not be accessed directly.\n         */\n        Object.defineProperty(this, 'dataValues', {\n            enumerable: false,\n            configurable: true,\n            writable: true,\n            value: {},\n        });\n\n        const hasKeys = (object) => object && !!Object.keys(object).length;\n        const attributes = {};\n        const attributeProperties = modelDefinition.attributeProperties;\n        if (hasKeys(attributeProperties)) {\n            Object.defineProperty(this, 'attributes', {\n                enumerable: false,\n                value: attributes,\n            });\n\n            Object\n                .keys(attributeProperties)\n                .forEach(attributeName => {\n                    Object.defineProperty(attributes, attributeName, {\n                        enumerable: true,\n                        get: () => {\n                            if (!Array.isArray(this.attributeValues)) {\n                                return undefined;\n                            }\n\n                            return this.attributeValues\n                                .filter(value => value.attribute.name === attributeName)\n                                .reduce((current, value) => value.value, undefined);\n                        },\n                        set: (value) => {\n                            if (!this.attributeValues) { this.attributeValues = []; }\n\n                            const attributeValue = this.attributeValues\n                                .filter(av => av.attribute.name === attributeName)\n                                .reduce((current, av) => av, undefined);\n\n                            if (attributeValue) {\n                                // Don't do anything if the value stayed the same\n                                if (attributeValue.value === value) {\n                                    return;\n                                }\n\n                                attributeValue.value = value;\n                            } else {\n                                // Add the new attribute value to the attributeValues collection\n                                this.attributeValues.push({\n                                    value,\n                                    attribute: {\n                                        id: attributeProperties[attributeName].id,\n                                        name: attributeProperties[attributeName].name,\n                                    },\n                                });\n                            }\n\n                            // Set the model to be dirty\n                            this.dirty = true;\n                        },\n                    });\n                });\n        }\n\n        Object.defineProperties(this, modelDefinition.modelProperties);\n\n        this[DIRTY_PROPERTY_LIST] = new Set([]);\n    }\n\n    /**\n     * @method create\n     * @static\n     *\n     * @param {ModelDefinition} modelDefinition ModelDefinition from which the model should be created\n     * @returns {Model} Returns an instance of the model.\n     *\n     * @description The static method is a factory method to create Model objects. It calls `new Model()` with the passed `ModelDefinition`.\n     *\n     * ```js\n     * let myModel = Model.create(modelDefinition);\n     * ```\n     */\n    static create(modelDefinition) {\n        return new Model(modelDefinition);\n    }\n}\n\nModel.prototype = ModelBase;\n\nexport default Model;\n"]}