{"version":3,"sources":["../../src/model/ModelDefinition.js"],"names":[],"mappings":"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","file":"ModelDefinition.js","sourcesContent":["import { checkType, isObject, checkDefined, isDefined } from '../lib/check';\nimport { addLockedProperty, curry, copyOwnProperties } from '../lib/utils';\nimport ModelDefinitions from './ModelDefinitions';\nimport Model from './Model';\nimport ModelCollection from './ModelCollection';\nimport ModelCollectionProperty from './ModelCollectionProperty';\nimport schemaTypes from '../lib/SchemaTypes';\nimport Filters from './Filters';\nimport { DIRTY_PROPERTY_LIST } from './ModelBase';\nimport { getDefaultValuesForModelType } from './config';\n\nfunction createModelPropertyDescriptor(propertiesObject, schemaProperty) {\n    const propertyName = schemaProperty.collection ? schemaProperty.collectionName : schemaProperty.name;\n    const propertyDetails = {\n        // Actual property descriptor properties\n        configurable: false,\n        enumerable: true,\n        get() {\n            return this.dataValues[propertyName];\n        },\n    };\n\n    // Only add a setter for writable properties\n    if (schemaProperty.writable) {\n        propertyDetails.set = function dynamicPropertySetter(value) {\n            // TODO: Objects and Arrays are considered unequal when their data is the same and therefore trigger a dirty\n            if ((!isObject(value) && (value !== this.dataValues[propertyName])) || isObject(value)) {\n                this.dirty = true;\n                this[DIRTY_PROPERTY_LIST].add(propertyName);\n                this.dataValues[propertyName] = value;\n            }\n        };\n    }\n\n    if (propertyName) {\n        propertiesObject[propertyName] = propertyDetails; // eslint-disable-line no-param-reassign\n    }\n}\n\nfunction createPropertiesObject(schemaProperties) {\n    const propertiesObject = {};\n    const createModelPropertyDescriptorOn = curry(createModelPropertyDescriptor, propertiesObject);\n\n    (schemaProperties || []).forEach(createModelPropertyDescriptorOn);\n\n    return propertiesObject;\n}\n\nfunction createValidationSetting(validationObject, schemaProperty) {\n    const propertyName = schemaProperty.collection ? schemaProperty.collectionName : schemaProperty.name;\n    const validationDetails = {\n        persisted: schemaProperty.persisted,\n        type: schemaTypes.typeLookup(schemaProperty.propertyType),\n        required: schemaProperty.required,\n        min: schemaProperty.min,\n        max: schemaProperty.max,\n        owner: schemaProperty.owner,\n        unique: schemaProperty.unique,\n        writable: schemaProperty.writable,\n        constants: schemaProperty.constants,\n        ordered: Boolean(schemaProperty.ordered),\n    };\n\n    function getReferenceTypeFrom(property) {\n        if (property.href) {\n            return property.href.split('/').pop();\n        }\n\n        return undefined;\n    }\n\n    // Add a referenceType to be able to get a hold of the reference objects model.\n    if (\n        validationDetails.type === 'REFERENCE' ||\n        (validationDetails.type === 'COLLECTION' &&\n        schemaProperty.itemPropertyType === 'REFERENCE')\n    ) {\n        validationDetails.referenceType = getReferenceTypeFrom(schemaProperty);\n    }\n\n    if (propertyName) {\n        validationObject[propertyName] = validationDetails; // eslint-disable-line no-param-reassign\n    }\n}\n\nfunction createValidations(schemaProperties) {\n    const validationsObject = {};\n    const createModelPropertyOn = curry(createValidationSetting, validationsObject);\n\n    (schemaProperties || []).forEach(createModelPropertyOn);\n\n    return validationsObject;\n}\n\n\nfunction shouldBeModelCollectionProperty(model, models) {\n    return function shouldBeModelCollectionPropertyIterator(modelProperty) {\n        return model &&\n            models &&\n            model.modelDefinition &&\n            model.modelDefinition.modelValidations &&\n            model.modelDefinition.modelValidations[modelProperty] &&\n            model.modelDefinition.modelValidations[modelProperty].type === 'COLLECTION' &&\n            models.hasOwnProperty(model.modelDefinition.modelValidations[modelProperty].referenceType);\n    };\n}\n\nfunction getOwnedPropertyJSON(model) {\n    const objectToSave = {};\n    const ownedProperties = this.getOwnedPropertyNames();\n    const collectionProperties = model\n        .getCollectionChildrenPropertyNames()\n        // Even though attributeValues are considered collections, they are handled separately due to their\n        // difference in structure.\n        .filter(propertyName => propertyName !== 'attributeValues');\n\n    Object.keys(this.modelValidations).forEach((propertyName) => {\n        if (ownedProperties.indexOf(propertyName) >= 0) {\n            if (model.dataValues[propertyName] !== undefined && model.dataValues[propertyName] !== null) {\n                // Handle collections and plain values different\n                if (collectionProperties.indexOf(propertyName) === -1) {\n                    objectToSave[propertyName] = model.dataValues[propertyName];\n                } else {\n                    // compulsoryDataElementOperands is not an array of models.\n                    // TODO: This is not the proper way to do this. We should check if the array contains Models\n                    if (propertyName === 'compulsoryDataElementOperands') {\n                        objectToSave[propertyName] = model.dataValues[propertyName];\n                        return;\n                    }\n\n                    // Transform an object collection to an array of objects with id properties\n                    objectToSave[propertyName] = Array\n                        .from(model.dataValues[propertyName].values())\n                        .filter(value => value.id)\n                        .map((childModel) => {\n                            // Legends can be saved as part of the LegendSet object.\n                            // To make this work properly we will return all of the properties for the items in the collection\n                            // instead of just the `id` fields\n                            if (model.modelDefinition && model.modelDefinition.name === 'legendSet') {\n                                return getOwnedPropertyJSON.call(childModel.modelDefinition, childModel);\n                            }\n\n                            // For any other types we return an object with just an id\n                            return { id: childModel.id };\n                        });\n                }\n            }\n        }\n    });\n\n    return objectToSave;\n}\n\nfunction isAnUpdate(modelToCheck) {\n    return Boolean(modelToCheck.id);\n}\n\n/**\n * @class ModelDefinition\n *\n * @description\n * Definition of a Model. Basically this object contains the meta data related to the Model. Like `name`, `apiEndPoint`, `modelValidation`, etc.\n * It also has methods to create and load Models that are based on this definition. The Data element `ModelDefinition` would be used to create Data Element `Model`s\n *\n * Note: ModelDefinition has a property `api` that is used for the communication with the dhis2 api. The value of this\n * property is an instance of `Api`.\n */\nclass ModelDefinition {\n    constructor(modelName, modelNamePlural, modelOptions, properties, validations, attributes, authorities) {\n        checkType(modelName, 'string');\n        checkType(modelNamePlural, 'string', 'Plural');\n\n        addLockedProperty(this, 'name', modelName);\n        addLockedProperty(this, 'plural', modelNamePlural);\n        addLockedProperty(this, 'isSharable', (modelOptions && modelOptions.shareable) || false);\n        addLockedProperty(this, 'isMetaData', (modelOptions && modelOptions.metadata) || false);\n        addLockedProperty(this, 'apiEndpoint', modelOptions && modelOptions.apiEndpoint);\n        addLockedProperty(this, 'javaClass', modelOptions && modelOptions.klass);\n        addLockedProperty(this, 'identifiableObject', modelOptions && modelOptions.identifiableObject);\n        addLockedProperty(this, 'modelProperties', properties);\n        addLockedProperty(this, 'modelValidations', validations);\n        addLockedProperty(this, 'attributeProperties', attributes);\n        addLockedProperty(this, 'authorities', authorities);\n\n        this.filters = Filters.getFilters(this);\n\n        // TODO: The function getOwnedPropertyJSON should probably not be exposed, perhaps we could have a getJSONForModel(ownedPropertiesOnly=true) method.\n        this.getOwnedPropertyJSON = getOwnedPropertyJSON.bind(this);\n    }\n\n    filter() {\n        return this.clone().filters;\n    }\n\n    /**\n     * @method create\n     *\n     * @param {Object} [data] Datavalues that should be loaded into the model.\n     *\n     * @returns {Model} Returns the newly created model instance.\n     *\n     * @description\n     * Creates a fresh Model instance based on the `ModelDefinition`. If data is passed into the method that\n     * data will be loaded into the matching properties of the model.\n     *\n     * ```js\n     * dataElement.create({name: 'ANC', id: 'd2sf33s3ssf'});\n     * ```\n     */\n    create(data) {\n        const model = Model.create(this);\n        const validations = model.modelDefinition.modelValidations;\n        const models = ModelDefinitions.getModelDefinitions();\n        const dataValues = Object.assign({}, data);\n\n        if (data) {\n            // Set the data values onto the model directly\n            Object\n                .keys(model)\n                .forEach((modelProperty) => {\n                    const referenceType =\n                        validations[modelProperty].hasOwnProperty('referenceType') &&\n                        validations[modelProperty].referenceType ||\n                        models.hasOwnProperty(modelProperty) && modelProperty;\n\n                    // For collections of objects, create ModelCollectionProperties rather than plain arrays\n                    if (\n                        referenceType &&\n                        models.hasOwnProperty(referenceType) &&\n                        Array.isArray(data[modelProperty])\n                    ) {\n                        // Object properties that are not themselves instances of models need special handling because\n                        // we can't turn them into ModelCollectionProperties\n                        // TODO: Proper generic handling of translations\n                        if (modelProperty === 'translations' || modelProperty === 'greyedFields') {\n                            dataValues[modelProperty] = data[modelProperty];\n                        } else {\n                            dataValues[modelProperty] = ModelCollectionProperty\n                                .create(\n                                    model,\n                                    models[referenceType],\n                                    data[modelProperty].map(d => models[referenceType].create(d))\n                                );\n                        }\n                    }\n                    model.dataValues[modelProperty] = dataValues[modelProperty];\n                });\n        } else {\n            // Create empty ModelCollectionProperties for models without data.\n            Object.keys(model)\n                .filter(shouldBeModelCollectionProperty(model, models))\n                .forEach((modelProperty) => {\n                    const referenceType = model.modelDefinition.modelValidations[modelProperty].referenceType;\n\n                    model.dataValues[modelProperty] = ModelCollectionProperty.create(model, models[referenceType], []);\n                });\n\n            // When no initial values are provided we are dealing with a new Model. For some properties there are\n            // implicit default values that should be set. DHIS2 has some default values for models that would implicitly\n            // be set when omitting sending a value on POST, we'll set these properties to their default values so they\n            // are reflected in read operations on the model and to make them more transparent.\n            const defaultValues = getDefaultValuesForModelType(model.modelDefinition.name);\n            const checkForModelProperty = shouldBeModelCollectionProperty(model, models);\n\n            Object\n                .keys(model)\n                .filter((modelProperty) => !checkForModelProperty(modelProperty))\n                .forEach((modelProperty) => {\n                    model.dataValues[modelProperty] = defaultValues[modelProperty];\n                });\n        }\n\n        return model;\n    }\n\n    clone() {\n        const ModelDefinitionPrototype = Object.getPrototypeOf(this);\n        const priorFilters = this.filters.filters;\n        let clonedDefinition = Object.create(ModelDefinitionPrototype);\n\n        clonedDefinition = copyOwnProperties(clonedDefinition, this);\n        clonedDefinition.filters = Filters.getFilters(clonedDefinition);\n        clonedDefinition.filters.filters = priorFilters.map(filter => filter);\n\n        return clonedDefinition;\n    }\n\n    /**\n     * @method get\n     *\n     * @param {String} identifier\n     * @param {Object} [queryParams={fields: ':all'}] Query parameters that should be passed to the GET query.\n     * @returns {Promise} Resolves with a `Model` instance or an error message.\n     *\n     * @description\n     * Get a `Model` instance from the api loaded with data that relates to `identifier`.\n     * This will do an API call and return a Promise that resolves with a `Model` or rejects with the api error message.\n     *\n     * ```js\n     * //Do a get request for the dataElement with given id (d2sf33s3ssf) and print it's name\n     * //when that request is complete and the model is loaded.\n     * dataElement.get('d2sf33s3ssf')\n     *   .then(model => console.log(model.name));\n     * ```\n     */\n    get(identifier, queryParams = { fields: ':all,attributeValues[:all,attribute[id,name,displayName]]' }) {\n        checkDefined(identifier, 'Identifier');\n\n        if (Array.isArray(identifier)) {\n            return this.list({ filter: [`id:in:[${identifier.join(',')}]`] });\n        }\n\n        // TODO: should throw error if API has not been defined\n        return this.api.get([this.apiEndpoint, identifier].join('/'), queryParams)\n            .then((data) => this.create(data))\n            .catch((response) => {\n                if (response.message) {\n                    return Promise.reject(response.message);\n                }\n\n                return Promise.reject(response);\n            });\n    }\n\n    /**\n     * @method list\n     *\n     * @param {Object} [queryParams={fields: ':all'}] Query parameters that should be passed to the GET query.\n     * @returns {Promise} ModelCollection collection of models objects of the `ModelDefinition` type.\n     *\n     * @description\n     * Loads a list of models.\n     *\n     * ```js\n     * // Loads a list of models and prints their name.\n     * dataElement.list()\n     *   .then(modelCollection => {\n     *     modelCollection.forEach(model => console.log(model.name));\n     *   });\n     * ```\n     */\n    list(queryParams = {}) {\n        const definedFilters = this.filters.getFilters();\n        // FIXME: Looks like when specific filters are defined the model.filter() filters are not applied (they should probably be merged)\n        if (!isDefined(queryParams.filter) && definedFilters.length) {\n            queryParams.filter = definedFilters; // eslint-disable-line no-param-reassign\n        }\n\n        return this.api.get(this.apiEndpoint, Object.assign({ fields: ':all' }, queryParams))\n            .then((responseData) => ModelCollection.create(\n                this,\n                responseData[this.plural].map((data) => this.create(data)),\n                responseData.pager\n            ));\n    }\n\n    /**\n     * @method save\n     *\n     * @param {Model} model The model that should be saved to the server.\n     * @returns {Promise} A promise which resolves when the save was successful\n     * or rejects when it failed. The promise will resolve with the data that is\n     * returned from the server.\n     *\n     * @description\n     * This method is used by the `Model` instances to save the model when calling `model.save()`.\n     *\n     * @note {warning} This should generally not be called directly.\n     */\n    // TODO: check the return status of the save to see if it was actually successful and not ignored\n    save(model) {\n        if (isAnUpdate(model)) {\n            const updateUrl = model.dataValues.href;\n            const jsonPayload = getOwnedPropertyJSON.bind(this)(model);\n\n            // Save the existing model\n            return this.api.update(updateUrl, jsonPayload, true);\n        }\n\n        return this.saveNew(model);\n    }\n\n    saveNew(model) {\n        const jsonPayload = getOwnedPropertyJSON.bind(this)(model);\n\n        // Its a new object\n        return this.api.post(this.apiEndpoint, jsonPayload);\n    }\n\n    /**\n     * @method getOwnedPropertyNames\n     *\n     * @returns {String[]} Returns an array of property names.\n     *\n     * @description\n     * This method returns a list of property names that that are defined\n     * as \"owner\" properties on this schema. This means these properties are used\n     * when saving the model to the server.\n     *\n     * ```js\n     * dataElement.getOwnedPropertyNames()\n     * ```\n     */\n    getOwnedPropertyNames() {\n        return Object.keys(this.modelValidations)\n            .filter(propertyName => this.modelValidations[propertyName].owner);\n    }\n\n    /**\n     * @method delete\n     *\n     * @returns {Promise} Returns a promise to the deletion operation\n     *\n     * @description\n     * This method is used by the `Model` instances to delete the model when calling `model.delete()`.\n     *\n     * @note {warning} This should generally not be called directly.\n     */\n    delete(model) {\n        if (model.dataValues.href) {\n            return this.api.delete(model.dataValues.href);\n        }\n        return this.api.delete([model.modelDefinition.apiEndpoint, model.dataValues.id].join('/'));\n    }\n\n    /**\n     * @method createFromSchema\n     * @static\n     *\n     * @param {Object} schema A schema definition received from the web api (/api/schemas)\n     * @param {Object[]} attributes A list of attribute objects that describe custom attributes (/api/attributes)\n     *\n     * @returns {ModelDefinition} Frozen model definition object.\n     *\n     * @description\n     * This method creates a new `ModelDefinition` based on a JSON structure called\n     * a schema. A schema represents the structure of a domain model as it is\n     * required by DHIS. Since these schemas can not be altered on the server from\n     * the modelDefinition is frozen to prevent accidental changes to the definition.\n     *\n     * ```js\n     * ModelDefinition.createFromSchema(schemaDefinition, attributes);\n     * ```\n     *\n     * @note {info} An example of a schema definition can be found on\n     * https://apps.dhis2.org/demo/api/schemas/dataElement\n     */\n    static createFromSchema(schema, attributes = []) {\n        let ModelDefinitionClass;\n        checkType(schema, Object, 'Schema');\n\n        if (typeof ModelDefinition.specialClasses[schema.name] === 'function') {\n            ModelDefinitionClass = ModelDefinition.specialClasses[schema.name];\n        } else {\n            ModelDefinitionClass = ModelDefinition;\n        }\n\n        return Object.freeze(new ModelDefinitionClass(\n            schema.name,\n            schema.plural,\n            schema,\n            Object.freeze(createPropertiesObject(schema.properties)),\n            Object.freeze(createValidations(schema.properties)),\n            attributes\n                .reduce((current, attributeDefinition) => {\n                    current[attributeDefinition.name] = attributeDefinition; // eslint-disable-line no-param-reassign\n                    return current;\n                }, {}),\n            schema.authorities\n        ));\n    }\n}\n\nclass UserModelDefinition extends ModelDefinition {\n    // TODO: userCredentials should always be included, no matter what the query params, that is currently not the case\n    get(identifier, queryParams = { fields: ':all,userCredentials[:owner]' }) {\n        return super.get(identifier, queryParams);\n    }\n}\n\nclass DataSetModelDefinition extends ModelDefinition {\n    create(data = {}) {\n        const hasData = Boolean(Object.keys(data).length);\n\n        // Filter out the compulsoryDataElementOperands structure from the retrieved data\n        // This structure does not follow the convention of a typical reference. We can not create a proper\n        // ModelCollection for this collection.\n        const dataClone = Object\n            .keys(data)\n            .filter(key => key !== 'compulsoryDataElementOperands')\n            .reduce((obj, key) => {\n                obj[key] = data[key]; // eslint-disable-line no-param-reassign\n                return obj;\n            }, {});\n\n        // Create the model using the usual way of creating a model\n        // Only pass data when there is data in the object passed to the constructor. This will guarantee\n        // that the empty ModelCollections are created properly.\n        const model = super.create(hasData ? dataClone : undefined);\n\n        // Set the compulsoryDataElementOperands onto the dataValues so it will be included during the save operations\n        model.dataValues.compulsoryDataElementOperands = data.compulsoryDataElementOperands;\n\n        return model;\n    }\n}\n\nModelDefinition.specialClasses = {\n    user: UserModelDefinition,\n    dataSet: DataSetModelDefinition,\n};\n\nexport default ModelDefinition;\n"]}