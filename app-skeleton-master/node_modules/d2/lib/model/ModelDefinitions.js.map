{"version":3,"sources":["../../src/model/ModelDefinitions.js"],"names":[],"mappings":";;;;;;;;;;wBAAkC,cAAc;;;;;;;;;;;;;;;;;IAgB1C,gBAAgB;aAAhB,gBAAgB;8BAAhB,gBAAgB;;;;;iBAAhB,gBAAgB;;;;;;;;;;;;;;;;;;eAgBf,aAAC,eAAe,EAAE;AACjB,gBAAI;AACA,yCAAU,eAAe,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;aAC7C,CAAC,OAAO,CAAC,EAAE;AACR,sBAAM,IAAI,KAAK,CAAC,6DAA6D,CAAC,CAAC;aAClF;;AAED,gBAAI,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE;AAC5B,sBAAM,IAAI,KAAK,CAAC,CAAC,OAAO,EAAE,eAAe,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;aAChF;AACD,gBAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,eAAe,CAAC;;AAE7C,gBAAI,sBAAO,eAAe,CAAC,MAAM,EAAE,QAAQ,CAAC,EAAE;AAC1C,oBAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,eAAe,CAAC;aAClD;SACJ;;;;;;;;;;;;;;;;;;;;;;;eAqBoB,+BAAC,WAAW,EAAE;AAC/B,gBAAM,MAAM,GAAG,EAAE,CAAC;AAClB,gBAAI,eAAe,YAAA,CAAC;;AAEpB,qCAAU,WAAW,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC;;AAElD,iBAAK,eAAe,IAAI,IAAI,EAAE;AAC1B,oBAAI,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC,MAAM,KAAK,eAAe,CAAA,AAAC,EAAE;AAC7F,0BAAM,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;iBACnD;aACJ;;AAED,mBAAO,MAAM,CAAC;SACjB;;;WAjEC,gBAAgB;;;AAqEtB,SAAS,mBAAmB,GAAG;AAC3B,QAAI,mBAAmB,CAAC,gBAAgB,EAAE;AACtC,eAAO,mBAAmB,CAAC,gBAAgB,CAAC;KAC/C;AACD,WAAQ,mBAAmB,CAAC,gBAAgB,GAAG,IAAI,gBAAgB,EAAE,CAAE;CAC1E;;AAED,gBAAgB,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;;qBAE5C,gBAAgB","file":"ModelDefinitions.js","sourcesContent":["import { checkType, isType } from '../lib/check';\n\n/**\n * @class ModelDefinitions\n *\n * @description\n * Contains all the `ModelDefinition`s that are available. The definitions are properties on the object.\n * This would be used as a main entry point to do any interaction.\n *\n * After calling the initialise function `d2({baseUrl: 'dhis/api'})` this object is the `models` property\n * that allows you to access\n *\n * ```js\n * models.dataElement.getList();\n * ```\n */\nclass ModelDefinitions {\n    // TODO: Elaborate this documentation\n    /**\n     * @method add\n     * @param {ModelDefinition} modelDefinition Add a model definition to the definitions collection\n     *\n     * @description\n     * This will allow you to add your own custom ModelDefinitions.\n     *\n     * The Definition object should have the following properties\n     * `modelName, modelNamePlural, modelOptions, properties, validations`\n     *\n     * ```js\n     * models.add({name: 'MyDefinition', plural: 'MyDefinitions', endPointname: '/myDefinition'});\n     * ```\n     */\n    add(modelDefinition) {\n        try {\n            checkType(modelDefinition.name, 'string');\n        } catch (e) {\n            throw new Error('Name should be set on the passed ModelDefinition to add one');\n        }\n\n        if (this[modelDefinition.name]) {\n            throw new Error(['Model', modelDefinition.name, 'already exists'].join(' '));\n        }\n        this[modelDefinition.name] = modelDefinition;\n\n        if (isType(modelDefinition.plural, 'string')) {\n            this[modelDefinition.plural] = modelDefinition;\n        }\n    }\n\n    /**\n     * @method mapThroughDefinitions\n     *\n     * @param {Function} transformer Transformer function that will be run for each `ModelDefinition`\n     * @returns {Array} Array with the `ModelDefinition` objects.\n     *\n     * @description\n     * Map through the modelDefinitions like you would with a simple `Array.map()`\n     *\n     * ```js\n     * models.mapThroughDefinitions(definition => console.log(definition.name);\n     * ```\n     *\n     * @note {info} When mapping through the definition list `transformer` is called with the just the definition\n     * Unlike other map functions, no index or the full object is being passed.\n     *\n     * @note {warn} The resulting array contains references to the actual objects. It does not work like immutable array functions.\n     *\n     */\n    mapThroughDefinitions(transformer) {\n        const result = [];\n        let modelDefinition;\n\n        checkType(transformer, 'function', 'transformer');\n\n        for (modelDefinition in this) {\n            if (this.hasOwnProperty(modelDefinition) && !(this[modelDefinition].plural === modelDefinition)) {\n                result.push(transformer(this[modelDefinition]));\n            }\n        }\n\n        return result;\n    }\n}\n\n// Model definitions singleton!\nfunction getModelDefinitions() {\n    if (getModelDefinitions.modelDefinitions) {\n        return getModelDefinitions.modelDefinitions;\n    }\n    return (getModelDefinitions.modelDefinitions = new ModelDefinitions());\n}\n\nModelDefinitions.getModelDefinitions = getModelDefinitions;\n\nexport default ModelDefinitions;\n"]}