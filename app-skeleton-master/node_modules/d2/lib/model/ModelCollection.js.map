{"version":3,"sources":["../../src/model/ModelCollection.js"],"names":[],"mappings":"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","file":"ModelCollection.js","sourcesContent":["import { isValidUid, isArray, checkType } from '../lib/check';\nimport { throwError } from '../lib/utils';\nimport Model from './Model';\nimport ModelDefinition from './ModelDefinition';\nimport Pager from '../pager/Pager';\n\nfunction throwIfContainsOtherThanModelObjects(values) {\n    if (values && values[Symbol.iterator]) {\n        const toCheck = [...values];\n        toCheck.forEach((value) => {\n            if (!(value instanceof Model)) {\n                throwError('Values of a ModelCollection must be instances of Model');\n            }\n        });\n    }\n}\n\nfunction throwIfContainsModelWithoutUid(values) {\n    if (values && values[Symbol.iterator]) {\n        const toCheck = [...values];\n        toCheck.forEach((value) => {\n            if (!isValidUid(value.id)) {\n                throwError('Can not add a Model without id to a ModelCollection');\n            }\n        });\n    }\n}\n\n/**\n * @class ModelCollection\n *\n * @description\n * Collection of `Model` objects that can be interacted upon. Can contain a pager object to easily navigate\n * pages within the system.\n */\nclass ModelCollection {\n\n    /**\n     * @constructor\n     *\n     * @param {ModelDefinition} modelDefinition The `ModelDefinition` that this collection is for. This defines the type of models that\n     * are allowed to be added to the collection.\n     * @param {Model[]} values Initial values that should be added to the collection.\n     * @param {Object} pagerData Object with pager data. This object contains data that will be put into the `Pager` instance.\n     *\n     * @description\n     *\n     * Creates a new `ModelCollection` object based on the passed `modelDefinition`. Additionally values can be added by passing\n     * `Model` objects in the `values` parameter. The collection also exposes a pager object which can be used to navigate through\n     * the pages in the collection. For more information see the `Pager` class.\n     */\n    constructor(modelDefinition, values, pagerData) {\n        checkType(modelDefinition, ModelDefinition);\n        /**\n         * @property {ModelDefinition} modelDefinition The `ModelDefinition` that this collection is for. This defines the type of models that\n         * are allowed to be added to the collection.\n         */\n        this.modelDefinition = modelDefinition;\n\n        /**\n         * @property {Pager} pager Pager object that is created from the pagerData that was passed when the collection was constructed. If no pager data was present\n         * the pager will have default values.\n         */\n        this.pager = new Pager(pagerData, modelDefinition);\n\n        // We can not extend the Map object right away in v8 contexts.\n        this.valuesContainerMap = new Map();\n        this[Symbol.iterator] = this.valuesContainerMap[Symbol.iterator].bind(this.valuesContainerMap);\n\n        throwIfContainsOtherThanModelObjects(values);\n        throwIfContainsModelWithoutUid(values);\n\n        // Add the values separately as not all Iterators return the same values\n        if (isArray(values)) {\n            values.forEach((value) => this.valuesContainerMap.set(value.id, value));\n        }\n    }\n\n    /**\n     * @property {Number} size The number of Model objects that are in the collection.\n     *\n     * @description\n     * Contains the number of Model objects that are in this collection. If the collection is a collection with a pager. This\n     * does not take into account all the items in the database. Therefore when a pager is present on the collection\n     * the size will return the items on that page. To get the total number of items consult the pager.\n     */\n    get size() {\n        return this.valuesContainerMap.size;\n    }\n\n    /**\n     * @method add\n     *\n     * @param {Model} value Model instance to add to the collection.\n     * @returns {ModelCollection} Returns itself for chaining purposes.\n     *\n     * @throws {Error} When the passed value is not an instance of `Model`\n     * @throws {Error} Throws error when the passed value does not have a valid id.\n     *\n     * @description\n     * Adds a Model instance to the collection. The model is checked if it is a correct instance of `Model` and if it has\n     * a valid id. A valid id is a uid string of 11 alphanumeric characters.\n     */\n    add(value) {\n        throwIfContainsOtherThanModelObjects([value]);\n        throwIfContainsModelWithoutUid([value]);\n\n        this.set(value.id, value);\n        return this;\n    }\n\n    /**\n     * @method toArray\n     *\n     * @returns {Array} Returns the values of the collection as an array.\n     *\n     * @description\n     * If working with the Map type object is inconvenient this method can be used to return the values\n     * of the collection as an Array object.\n     */\n    toArray() {\n        const resultArray = [];\n\n        this.forEach((model) => {\n            resultArray.push(model);\n        });\n\n        return resultArray;\n    }\n\n    static create(modelDefinition, values, pagerData) {\n        return new ModelCollection(modelDefinition, values, pagerData);\n    }\n\n    static throwIfContainsOtherThanModelObjects(value) {\n        return throwIfContainsOtherThanModelObjects(value);\n    }\n\n    static throwIfContainsModelWithoutUid(value) {\n        return throwIfContainsModelWithoutUid(value);\n    }\n\n    /**\n     * @method clear\n     *\n     * @returns {this} Returns itself for chaining purposes;\n     *\n     * @description\n     * Clear the collection and remove all it's values.\n     */\n    // TODO: Reset the pager?\n    clear() {\n        return this.valuesContainerMap.clear.apply(this.valuesContainerMap);\n    }\n\n    delete(...args) {\n        return this.valuesContainerMap.delete.apply(this.valuesContainerMap, args);\n    }\n\n    entries() {\n        return this.valuesContainerMap.entries.apply(this.valuesContainerMap);\n    }\n\n    // FIXME: This calls the forEach function with the values Map and not with the ModelCollection as the third argument\n    forEach(...args) {\n        return this.valuesContainerMap.forEach.apply(this.valuesContainerMap, args);\n    }\n\n    get(...args) {\n        return this.valuesContainerMap.get.apply(this.valuesContainerMap, args);\n    }\n\n    has(...args) {\n        return this.valuesContainerMap.has.apply(this.valuesContainerMap, args);\n    }\n\n    keys() {\n        return this.valuesContainerMap.keys.apply(this.valuesContainerMap);\n    }\n\n    set(...args) {\n        return this.valuesContainerMap.set.apply(this.valuesContainerMap, args);\n    }\n\n    values() {\n        return this.valuesContainerMap.values.apply(this.valuesContainerMap);\n    }\n}\n\nexport default ModelCollection;\n"]}