{"version":3,"sources":["../../src/model/Filter.js"],"names":[],"mappings":";;;;;;;;;;wBAA6B,cAAc;;AAE3C,IAAM,kBAAkB,GAAG;;;;;;;;AAQvB,UAAM,EAAE,IAAI;;;;;;;;AAQZ,QAAI,EAAE,MAAM;;;;;;;;AAQZ,SAAK,EAAE,OAAO;AACd,YAAQ,EAAE,IAAI;CACjB,CAAC;;;;;;;;IAOI,MAAM;;;;;;AAKG,aALT,MAAM,CAKI,OAAO,EAAE;8BALnB,MAAM;;AAMJ,YAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,YAAI,CAAC,YAAY,GAAG,MAAM,CAAC;AAC3B,YAAI,CAAC,UAAU,GAAG,MAAM,CAAC;AACzB,YAAI,CAAC,WAAW,GAAG,SAAS,CAAC;KAChC;;;;;;;;;;;iBAVC,MAAM;;eAiBN,YAAC,YAAY,EAAE;AACb,wCAAa,YAAY,EAAE,4BAA4B,CAAC,CAAC;;AAEzD,gBAAI,CAAC,YAAY,GAAG,YAAY,CAAC;AACjC,mBAAO,IAAI,CAAC;SACf;;;eAEkB,+BAAG;AAClB,mBAAO,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAC3E;;;;;;;;;;;;;;;;eAce,mBAAC,OAAO,EAAE;AACtB,mBAAO,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC;SAC9B;;;WA1CC,MAAM;;;AA+CZ,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC,UAAA,MAAM,EAAI;AAC9C,UAAM,CAAC,cAAc,CAAC,MAAM,CAAC,SAAS,EAAE,MAAM,EAAE;AAC5C,aAAK,EAAE,SAAS,YAAY,CAAC,WAAW,EAAE;AACtC,wCAAa,WAAW,EAAE,aAAa,CAAC,CAAC;;AAEzC,gBAAI,CAAC,UAAU,GAAG,kBAAkB,CAAC,MAAM,CAAC,CAAC;AAC7C,gBAAI,CAAC,WAAW,GAAG,WAAW,CAAC;;AAE/B,gBAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;;AAEvB,mBAAO,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC;SACnC;KACJ,CAAC,CAAC;CACN,CAAC,CAAC;;qBAEY,MAAM","file":"Filter.js","sourcesContent":["import { checkDefined } from '../lib/check';\n\nconst FILTER_COMPARATORS = {\n    /**\n     * @method equals\n     * @returns {Filter} Returns the modified filter for chaining\n     *\n     * @description\n     * This method can be used to add a equals filter value\n     */\n    equals: 'eq',\n    /**\n     * @method like\n     * @returns {Filter} Returns the modified filter for chaining\n     *\n     * @description\n     * This method can be used to add a like filter value\n     */\n    like: 'like',\n    /**\n     * @method ilike\n     * @returns {Filter} Returns the modified filter for chaining\n     *\n     * @description\n     * This method can be used to add a ilike filter value\n     */\n    ilike: 'ilike',\n    notEqual: 'ne',\n};\n\n/**\n * @class Filter\n * @description\n * Filter class that can be used to build api endpoint filters using a semi-natural language style.\n */\nclass Filter {\n    /**\n     * @constructor\n     * @param {Filters} filters Filters list that this filter will be added to when it is completed.\n     */\n    constructor(filters) {\n        this.filters = filters;\n        this.propertyName = 'name';\n        this.comparator = 'like';\n        this.filterValue = undefined;\n    }\n\n    /**\n     * @method on\n     * @param {String} propertyName Property name that the filter should be applied on.\n     * @returns {Filter}\n     */\n    on(propertyName) {\n        checkDefined(propertyName, 'Property name to filter on');\n\n        this.propertyName = propertyName;\n        return this;\n    }\n\n    getQueryParamFormat() {\n        return [this.propertyName, this.comparator, this.filterValue].join(':');\n    }\n\n    /**\n     * @method getFilter\n     * @static\n     *\n     * @param {Filters} filters Filters list that this filter will be added to when it is completed.\n     *\n     * @returns A instance of the Filter class that can be used to create\n     * filters.\n     *\n     * @description\n     * Create a filter instance\n     */\n    static getFilter(filters) {\n        return new Filter(filters);\n    }\n}\n\n// Add the filters to the Filter prototype\n// TODO: Change to for..of. Currently would break e2e tests because of polyfill\nObject.keys(FILTER_COMPARATORS).forEach(filter => {\n    Object.defineProperty(Filter.prototype, filter, {\n        value: function filterGetter(filterValue) {\n            checkDefined(filterValue, 'filterValue');\n\n            this.comparator = FILTER_COMPARATORS[filter];\n            this.filterValue = filterValue;\n\n            this.filters.add(this);\n\n            return this.filters.getReturn();\n        },\n    });\n});\n\nexport default Filter;\n"]}