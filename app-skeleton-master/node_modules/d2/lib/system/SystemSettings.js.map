{"version":3,"sources":["../../src/system/SystemSettings.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;wBAOyB,cAAc;;sBACvB,YAAY;;;;;;;;;;;;IAUtB,cAAc;AACL,aADT,cAAc,GACgB;YAApB,GAAG,yDAAG,oBAAI,MAAM,EAAE;;8BAD5B,cAAc;;AAEZ,YAAI,CAAC,GAAG,GAAG,GAAG,CAAC;KAClB;;;;;;;;;;;;;;;;;iBAHC,cAAc;;eAmBb,eAAG;AACF,mBAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;SACzC;;;;;;;;;;;;;;;;;;eAgBE,aAAC,iBAAiB,EAAE;;;AACnB,qBAAS,YAAY,CAAC,KAAK,EAAE;;AAEzB,oBAAI;AACA,2BAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;iBAC5B,CAAC,OAAO,CAAC,EAAE;AACR,2BAAO,KAAK,CAAC;iBAChB;aACJ;;AAED,mBAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AACpC,oBAAI,CAAC,wBAAS,iBAAiB,CAAC,EAAE;AAC9B,0BAAM,IAAI,SAAS,CAAC,4EAA4E,CAAC,CAAC;iBACrG;;AAED,sBAAK,GAAG,CAAC,GAAG,CAAC,CAAC,gBAAgB,EAAE,iBAAiB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,SAAS,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CACzF,IAAI,CAAC,UAAA,QAAQ,EAAI;AACd,wBAAM,kBAAkB,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;AAClD,wBAAI,kBAAkB,EAAE;AACpB,+BAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC;qBACnC;AACD,0BAAM,CAAC,IAAI,KAAK,CAAC,6DAA6D,CAAC,CAAC,CAAC;iBACpF,CAAC,CAAC;aACV,CAAC,CAAC;SACN;;;eAEE,aAAC,iBAAiB,EAAE,KAAK,EAAE;AAC1B,gBAAM,UAAU,GAAG,CAAC,gBAAgB,EAAE,iBAAiB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACnE,gBAAI,KAAK,KAAK,IAAI,IAAI,MAAI,KAAK,EAAI,MAAM,KAAK,CAAC,EAAE;AAC7C,uBAAO,IAAI,CAAC,GAAG,UAAO,CAAC,UAAU,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC;aAC5D;AACD,mBAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC,CAAC;SAC5F;;;WArEC,cAAc;;;qBAwEL,cAAc","file":"SystemSettings.js","sourcesContent":["/**\n * @module System\n *\n * @requires lib/check\n * @requires api/Api\n */\n\nimport { isString } from '../lib/check';\nimport Api from '../api/Api';\n\n\n/**\n * @class SystemSettings\n *\n * @description\n * Handles communication with the systemSettings endpoint. Can be used to get or save systemSettings.\n */\n// TODO: Return the values from the local cache if we have not updated it? We could\nclass SystemSettings {\n    constructor(api = Api.getApi()) {\n        this.api = api;\n    }\n\n    /**\n     * @method all\n     *\n     * @returns {Promise} Promise that resolves with the systemsettings object from the api.\n     *\n     * @description\n     * Loads all the system settings in the system and returns them as an object from the promise.\n     * ```js\n     * d2.system.settings.all()\n     *  .then(systemSettings => {\n     *    console.log('Analytics was last updated on: ' + systemSettings.keyLastSuccessfulResourceTablesUpdate);\n     *  });\n     * ```\n     */\n    all() {\n        return this.api.get('systemSettings');\n    }\n\n    /**\n     * @method get\n     *\n     * @param {String} systemSettingsKey The identifier of the system setting that should be retrieved.\n     * @returns {Promise} A promise that resolves with the value or will fail if the value is not available.\n     *\n     * @description\n     * ```js\n     * d2.system.settings.get('keyLastSuccessfulResourceTablesUpdate')\n     *  .then(systemSettingsValue => {\n     *    console.log('Analytics was last updated on: ' + systemSettingsValue);\n     *  });\n     * ```\n     */\n    get(systemSettingsKey) {\n        function processValue(value) {\n            // Attempt to parse the response as JSON. If this fails we return the value as is.\n            try {\n                return JSON.parse(value);\n            } catch (e) {\n                return value;\n            }\n        }\n\n        return new Promise((resolve, reject) => {\n            if (!isString(systemSettingsKey)) {\n                throw new TypeError('A \"key\" parameter should be specified when calling get() on systemSettings');\n            }\n\n            this.api.get(['systemSettings', systemSettingsKey].join('/'), undefined, { dataType: 'text' })\n                .then(response => {\n                    const systemSettingValue = processValue(response);\n                    if (systemSettingValue) {\n                        resolve(processValue(response));\n                    }\n                    reject(new Error('The requested systemSetting has no value or does not exist.'));\n                });\n        });\n    }\n\n    set(systemSettingsKey, value) {\n        const settingUrl = ['systemSettings', systemSettingsKey].join('/');\n        if (value === null || (`${value}`).length === 0) {\n            return this.api.delete(settingUrl, { dataType: 'text' });\n        }\n        return this.api.post(settingUrl, value, { dataType: 'text', contentType: 'text/plain' });\n    }\n}\n\nexport default SystemSettings;\n"]}