{"version":3,"sources":["../../src/system/SystemConfiguration.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;sBAMgB,YAAY;;;;;;;;IAKtB,mBAAmB;AACV,aADT,mBAAmB,GACW;YAApB,GAAG,yDAAG,oBAAI,MAAM,EAAE;;8BAD5B,mBAAmB;;AAEjB,YAAI,CAAC,GAAG,GAAG,GAAG,CAAC;;AAEf,YAAI,CAAC,cAAc,GAAG,SAAS,CAAC;AAChC,YAAI,CAAC,cAAc,GAAG,IAAI,CAAC;KAC9B;;;;;;;;;;iBANC,mBAAmB;;eAelB,aAAC,WAAW,EAAE;;;AACb,gBAAI,IAAI,CAAC,cAAc,KAAK,IAAI,IAAI,WAAW,KAAK,IAAI,EAAE;AACtD,oBAAI,CAAC,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,eAAe,CAAC,CAC9C,IAAI,CAAC,UAAA,aAAa,EAAI;AACnB,0BAAK,cAAc,GAAG,aAAa,CAAC;AACpC,2BAAO,MAAK,cAAc,CAAC;iBAC9B,CAAC,CAAC;aACV;;AAED,mBAAO,IAAI,CAAC,cAAc,CAAC;SAC9B;;;;;;;;;;;;;eAWE,aAAC,GAAG,EAAE,WAAW,EAAE;AAClB,mBAAO,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM,EAAI;AACxC,oBAAI,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;AAC5B,2BAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;iBACvC;;AAED,uBAAO,OAAO,CAAC,MAAM,6BAA2B,GAAG,CAAG,CAAC;aAC1D,CAAC,CAAC;SACN;;;;;;;;;;;eAUE,aAAC,GAAG,EAAE,KAAK,EAAE;AACZ,gBAAM,IAAI,GAAG,IAAI,CAAC;AAClB,gBAAI,GAAG,YAAA,CAAC;;AAER,gBAAI,GAAG,KAAK,UAAU,EAAE;AACpB,uBAAO,OAAO,CAAC,MAAM,CAAC,iCAAiC,CAAC,CAAC;aAC5D,MAAM,IACH,CAAC,GAAG,KAAK,oBAAoB,IAAI,GAAG,KAAK,yBAAyB,IAAI,GAAG,KAAK,sBAAsB,CAAA,KACnG,KAAK,KAAK,MAAM,IAAI,KAAK,KAAK,IAAI,CAAA,AAAC,EACtC;;AAEE,mBAAG,GAAG,IAAI,CAAC,GAAG,UAAO,CAAC,CAAC,eAAe,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC;aACjF,MAAM,IAAI,GAAG,KAAK,eAAe,EAAE;;AAEhC,mBAAG,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,eAAe,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC;aACzG,MAAM;AACH,mBAAG,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,eAAe,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE;AACzD,4BAAQ,EAAE,MAAM;AAChB,+BAAW,EAAE,YAAY;iBAC5B,CAAC,CAAC;aACN;;AAED,mBAAO,GAAG,CACL,IAAI,CAAC,YAAM;;;AAGR,oBAAI,CAAC,cAAc,GAAG,SAAS,CAAC;AAChC,uBAAO,OAAO,CAAC,OAAO,EAAE,CAAC;aAC5B,CAAC,SACI,CAAC;uBAAM,OAAO,CAAC,MAAM,iCAA+B,GAAG,CAAG;aAAA,CAAC,CAAC;SACzE;;;WApFC,mBAAmB;;;qBAuFV,mBAAmB","file":"SystemConfiguration.js","sourcesContent":["/**\n * @module System\n *\n * @requires lib/check\n * @requires api/Api\n */\nimport Api from '../api/Api';\n\n/**\n * Handles communication with the configuration endpoint. Can be used to get or set configuration options.\n */\nclass SystemConfiguration {\n    constructor(api = Api.getApi()) {\n        this.api = api;\n\n        this._configuration = undefined;\n        this._configPromise = null;\n    }\n\n    /**\n     * Fetches all system configuration settings from the API and caches them so that future\n     * calls to this function won't call the API again.\n     *\n     * @param {boolean=false} ignoreCache If set to true, calls the API regardless of cache status\n     * @returns {Promise} Promise that resolves with all the individual configuration options from the api.\n     */\n    all(ignoreCache) {\n        if (this._configPromise === null || ignoreCache === true) {\n            this._configPromise = this.api.get('configuration')\n                .then(configuration => {\n                    this._configuration = configuration;\n                    return this._configuration;\n                });\n        }\n\n        return this._configPromise;\n    }\n\n    /**\n     * Returns the value of the specified configuration option.\n     *\n     * This is a convenience method that works exactly the same as calling `configuration.all()[name]`.\n     *\n     * @param key {String}\n     * @param {boolean=false} ignoreCache If set to true, calls the API regardless of cache status\n     * @returns {Promise}\n     */\n    get(key, ignoreCache) {\n        return this.all(ignoreCache).then(config => {\n            if (config.hasOwnProperty(key)) {\n                return Promise.resolve(config[key]);\n            }\n\n            return Promise.reject(`Unknown config option: ${key}`);\n        });\n    }\n\n\n    /**\n     * Send a query to the API to change the value of a configuration key to the specified value.\n     *\n     * @param key {String}\n     * @param value {String|null}\n     * @returns {Promise}\n     */\n    set(key, value) {\n        const that = this;\n        let req;\n\n        if (key === 'systemId') {\n            return Promise.reject('The system ID can\\'t be changed');\n        } else if (\n            (key === 'feedbackRecipients' || key === 'selfRegistrationOrgUnit' || key === 'selfRegistrationRole') &&\n            (value === 'null' || value === null)\n        ) {\n            // Only valid UIDs are accepted when POST'ing, so we have to use DELETE in stead of POST'ing a null value.\n            req = this.api.delete(['configuration', key].join('/'), { dataType: 'text' });\n        } else if (key === 'corsWhitelist') {\n            // The corsWhitelist endpoint expects an array of URL's, while here value is expected to be a string.\n            req = this.api.post(['configuration', key].join('/'), value.trim().split('\\n'), { dataType: 'text' });\n        } else {\n            req = this.api.post(['configuration', key].join('/'), value, {\n                dataType: 'text',\n                contentType: 'text/plain',\n            });\n        }\n\n        return req\n            .then(() => {\n                // Ideally we'd update the cache here, but doing so requires another trip to the server\n                // For now, just bust the cache to ensure it's not incorrect\n                that._configuration = undefined;\n                return Promise.resolve();\n            })\n            .catch(() => Promise.reject(`No configuration found for ${key}`));\n    }\n}\n\nexport default SystemConfiguration;\n"]}