{"version":3,"sources":["../src/d2.js"],"names":[],"mappings":"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","file":"d2.js","sourcesContent":["import { pick, Deferred } from './lib/utils';\nimport Logger from './logger/Logger';\nimport model from './model/models';\nimport Api from './api/Api';\nimport System from './system/System';\nimport I18n from './i18n/I18n';\nimport Config from './config';\nimport CurrentUser from './current-user/CurrentUser';\nimport jQuery from './external/jquery';\n\nlet firstRun = true;\nlet deferredD2Init = Deferred.create();\n\nconst preInitConfig = Config.create();\n\nexport function getManifest(url) {\n    const api = new Api(jQuery);\n    api.setBaseUrl('');\n\n    const manifestUtilities = {\n        getBaseUrl() {\n            return this.activities.dhis.href;\n        },\n    };\n\n    return api.get(`${url}`)\n        .then(manifest => Object.assign({}, manifest, manifestUtilities));\n}\n\n\n/**\n * @function getUserSettings\n *\n * @returns {Promise} A promise to the current user settings\n *\n * @description\n * The object that is the result of the promise will have the following properties\n * ```js\n * {\n *   \"uiLocale\": \"en\" // The users locale, that can be used for translations)\n * }\n * ```\n */\nexport function getUserSettings() {\n    const api = Api.getApi();\n\n    if (preInitConfig.baseUrl && firstRun) {\n        api.setBaseUrl(preInitConfig.baseUrl);\n    }\n\n    return api.get('userSettings');\n}\n\n/**\n * @function init\n *\n * @param {Object} initConfig Configuration object that will be used to configure to define D2 Setting.\n * See the description for more information on the available settings.\n * @returns {Promise} A promise that resolves with the intialized d2 object. Which is an object that exposes `model`, `models` and `Api`\n *\n * @description\n * Init function that used to initialise D2. This will load the schemas from the DHIS2 api and configure your D2 instance.\n *\n * The `config` object that can be passed into D2 can have the following properties:\n *\n * baseUrl: Set this when the url is something different then `/api`. If you are running your dhis instance in a subdirectory of the actual domain\n * for example http://localhost/dhis/ you should set the base url to `/dhis/api`\n *\n * ```js\n * import init from 'd2';\n *\n * init({baseUrl: '/dhis/api'})\n *   .then((d2) => {\n *     console.log(d2.model.dataElement.list());\n *   });\n * ```\n */\nexport function init(initConfig) {\n    const api = Api.getApi();\n    const logger = Logger.getLogger();\n\n    const config = Config.create(preInitConfig, initConfig);\n\n    const d2 = {\n        models: undefined,\n        model,\n        Api,\n        system: System.getSystem(),\n        i18n: I18n.getI18n(),\n    };\n\n    // Process the config in a the config class to keep all config calls together.\n    Config.processConfigForD2(config, d2);\n\n    // Because when importing the getInstance method in dependencies the getInstance could run before\n    // init we have to resolve the current promise on first run and for consecutive ones replace the\n    // old one with a fresh promise.\n    if (firstRun) {\n        firstRun = false;\n    } else {\n        deferredD2Init = Deferred.create();\n    }\n\n    return Promise.all([\n        api.get('schemas'),\n        api.get('attributes', { fields: ':all,optionSet[:all,options[:all]]', paging: false }),\n        api.get('me', { fields: ':all,organisationUnits[id],userGroups[id],userCredentials[:all,!user,userRoles[id]' }),\n        api.get('me/authorization'),\n        getUserSettings(),\n        api.get('system/info'),\n        api.get('apps'),\n        d2.i18n.load(),\n    ])\n        .then(res => {\n            const responses = {\n                schemas: pick('schemas')(res[0]),\n                attributes: pick('attributes')(res[1]),\n                currentUser: res[2],\n                authorities: res[3],\n                userSettings: res[4],\n                systemInfo: res[5],\n                apps: res[6],\n            };\n\n            responses.schemas\n                // TODO: Remove this when the schemas endpoint is versioned or shows the correct urls for the requested version\n                // The schemas endpoint is not versioned which will result into the modelDefinitions always using the\n                // \"default\" endpoint, we therefore modify the endpoint url based on the given baseUrl.\n                .map(schema => {\n                    const apiVersionMatch = config.baseUrl.match(/api\\/(2[3-9])/);\n\n                    // Not all schemas have an apiEndpoint\n                    if (apiVersionMatch && apiVersionMatch[1] && schema.apiEndpoint) {\n                        const version = apiVersionMatch[1];\n\n                        // Inject the current api version number into the endPoint urls\n                        schema.apiEndpoint = schema.apiEndpoint.replace(/api/, `api/${version}`); // eslint-disable-line no-param-reassign\n                    }\n\n                    return schema;\n                })\n                .forEach((schema) => {\n                    // Attributes that do not have values do not by default get returned with the data.\n                    // Therefore we need to grab the attributes that are attached to this particular schema to be able to know about them\n                    const schemaAttributes = responses.attributes\n                        .filter(attributeDescriptor => {\n                            const attributeNameFilter = [schema.name, 'Attribute'].join('');\n                            return attributeDescriptor[attributeNameFilter] === true;\n                        });\n\n                    if (!Object.prototype.hasOwnProperty.call(d2.models, schema.name)) {\n                        d2.models.add(model.ModelDefinition.createFromSchema(schema, schemaAttributes));\n                    }\n                });\n\n            d2.currentUser = CurrentUser.create(\n                responses.currentUser,\n                responses.authorities,\n                d2.models,\n                responses.userSettings\n            );\n            d2.system.setSystemInfo(responses.systemInfo);\n            d2.system.setInstalledApps(responses.apps);\n\n            deferredD2Init.resolve(d2);\n            return deferredD2Init.promise;\n        })\n        .catch((error) => {\n            logger.error('Unable to get schemas from the api', JSON.stringify(error), error);\n\n            deferredD2Init.reject('Unable to get schemas from the DHIS2 API');\n            return deferredD2Init.promise;\n        });\n}\n\n/**\n * @function getInstance\n *\n * @returns {Promise} A promise to an initialized d2 instance.\n *\n * @description\n * This function can be used to retrieve the `singleton` instance of d2. The instance is being created by calling\n * the `init` method.\n *\n * ```js\n * import {init, getInstance} from 'd2';\n *\n * init({baseUrl: '/dhis2/api/'});\n * getInstance()\n *   .then(d2 => {\n *      d2.models.dataElement.list();\n *      // and all your other d2 magic.\n *   });\n * ```\n */\nexport function getInstance() {\n    return deferredD2Init.promise;\n}\n\n// Alias preInitConfig to be able to `import {config} from 'd2';`\n/**\n * @property config\n *\n * @description\n * Can be used to set config options before initialisation of d2.\n *\n * ```js\n * import {config, init} from 'd2';\n *\n * config.baseUrl = '/demo/api';\n * config.i18n.sources.add('i18n/systemsettingstranslations.properties');\n *\n * init()\n *   .then(d2 => {\n *     d2.system.settings.all()\n *       .then(systemSettings => Object.keys())\n *       .then(systemSettingsKey => {\n *         d2.i18n.getTranslation(systemSettingsKey);\n *       });\n *   });\n *\n * ```\n */\nexport const config = preInitConfig;\n\nexport default {\n    init,\n    config,\n    getInstance,\n    getUserSettings,\n    getManifest,\n};\n"]}